# Language ja-JP translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-05-01T13:53:43\n"
"PO-Revision-Date: 2009-06-09 19:24+0900\n"
"Last-Translator: Keita Higashi <winnie_the_pooh@y3.dion.ne.jp>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, fuzzy, no-c-format
msgid "Defining beans using XML"
msgstr "XML を使っている Web Beans を定める"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"So far, we&#39;ve seen plenty of examples of beans declared using "
"annotations. However, there are a couple of occasions when we can&#39;t use "
"annotations to define the bean:"
msgstr ""
"これまで、アノテーションを使用して宣言される Web Beans の多くの例を見ました。"
"しかし、Web Bean を定義するためにアノテーションを使うことができない場合があり"
"ます。"

#. Tag: para
#, no-c-format
msgid "when the implementation class comes from some preexisting library, or"
msgstr "インプリメンテーションクラスがいくつかの既存のライブラリからなるとき"

#. Tag: para
#, fuzzy, no-c-format
msgid "when there should be multiple beans with the same implementation class."
msgstr ""
"複数の Web Beans が同じインプリメンテーションクラスでなければならないとき"

#. Tag: para
#, no-c-format
msgid ""
"One way to address these problems is to write a producer method. Weld offers "
"another option: declare the bean using XML. This feature will hopefully one "
"day be part of the CDI specification. Until then, it remains a portable "
"extension."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Many frameworks use XML to provide metadata relating to Java classes. "
"However, Weld uses a very different approach to specifying the names of Java "
"classes, fields or methods to most other frameworks. Instead of writing "
"class and member names as the string values of XML elements and attributes, "
"Weld lets you use the class or member name as the name of the XML element."
msgstr ""
"多くのフレームワークは、 Java クラスに関してメタデータを提供するために、 XML "
"を使います。しかし、 Web Beans は大部分の他のフレームワークに Java クラス、"
"フィールドまたはメソッドの名前を明示する非常に異なるアプローチを使います。 "
"XML 要素と属性の文字列値としてクラスとメンバー名を書く代わりに、 Web Beans は"
"クラスまたはメンバー名を XML 要素の名前として使うことができます。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The advantage of this approach is that you can write an XML schema that "
"prevents spelling errors in your XML document. It&#39;s even possible for a "
"tool to generate the XML schema automatically from the compiled Java code. "
"Or, an integrated development environment could perform the same validation "
"without the need for the explicit intermediate generation step."
msgstr ""
"このアプローチの長所は、 XML 文書でスペルミスを防止する XML スキーマを記述す"
"ることができるということです。ツールがコンパイルされた Java コードから自動的"
"に XML スキーマを生み出すことさえ可能です。あるいは、統合した開発環境は、明確"
"な中間の生成ステップを行うことなく、同じ妥当性の検証を実行することがありえま"
"す。"

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring beans"
msgstr "Web Bean クラスを宣言する"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For each Java package, Weld defines a corresponding XML namespace. The "
"namespace is formed by prepending <literal>urn:java:</literal> to the Java "
"package name. For the package <literal>com.mydomain.myapp</literal>, the XML "
"namespace is <literal>urn:java:com.mydomain.myapp</literal>."
msgstr ""
"Java パッケージごとに、 Web Beans は対応する XML 名前空間を定めます。名前空間"
"は、 Java パッケージ名前に <literal>urn:java:</literal> を前に付加することに"
"よって作られます。パッケージ <literal>com.mydomain.myapp</literal> により、 "
"XML 名前空間は、 <literal>urn:java:com.mydomain.myapp</literal> となります。"

#. Tag: para
#, no-c-format
msgid ""
"Java types belonging to a package are referred to using an XML element in "
"the namespace corresponding to the package. The name of the element is the "
"name of the Java type. Fields and methods of the type are specified by child "
"elements in the same namespace. If the type is an annotation, members are "
"specified by attributes of the element."
msgstr ""
"パッケージに属している Java 型は、パッケージと一致している名前空間で XML 要素"
"を使用することにゆだねられます。要素の名前は、 Java 型の名前です。型のフィー"
"ルドとメソッドは、同じ名前空間で子要素で明示されます。型がアノテーションであ"
"るならば、メンバーは要素の特質によって明示されます。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For example, the element <literal>&#60;util:Date/&#62;</literal> in the "
"following XML fragment refers to the class <literal>java.util.Date</literal>:"
msgstr ""
"たとえば、以下の XML 断片の要素 <literal>&lt;util:Date/&gt;</literal> は、ク"
"ラス <literal>java.util.Date</literal> を参照します。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"And this is all the code we need to declare that <literal>Date</literal> is "
"a bean! An instance of <literal>Date</literal> may now be injected by any "
"other bean:"
msgstr ""
"そして、これは <literal>Date</literal> をシンプル Web Bean として宣言するため"
"のすべてのコードです。<literal>Date</literal> のインスタンスは、現在他のどの "
"Web Bean にも導入されることがありえます。"

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring bean metadata"
msgstr "Web Bean メタデータを宣言する"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"We can declare the scope, deployment type and interceptor binding types "
"using direct child elements of the bean declaration:"
msgstr ""
"バインディングタイプが Web Bean 宣言の直接の子要素を使用して型を検査するス"
"コープ、デプロイメントタイプとインタセプターを宣言することができます。"

#. Tag: para
#, fuzzy, no-c-format
msgid "We use exactly the same approach to specify names and qualifiers:"
msgstr ""
"名前とバインディングタイプを明示するために、正確に同じアプローチを使います。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Where <literal>@Login</literal> and <literal>@SystemStart</literal> are "
"qualifier annotations types."
msgstr ""
"<literal>@Login</literal> と <literal>@SystemStart</literal> アノテーションタ"
"イプを結びつけているところ。"

#. Tag: para
#, fuzzy, no-c-format
msgid "As usual, a bean may support multiple qualifier types:"
msgstr ""
"通常通り、 Web Bean は複数のバインディングタイプをサポートすることがありえま"
"す。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Interceptors and decorators are beans as well, so they may be declared just "
"like any other bean:"
msgstr ""
"インタセプタとデコレータは単なるシンプル Web Beans であるので、それらはまるで"
"他のシンプル Web Bean のように宣言されることがありえます。"

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring bean members"
msgstr "Web Bean メンバーを宣言する"

#. Tag: para
#, no-c-format
msgid "TODO!"
msgstr "やるべきこと。"

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring inline beans"
msgstr "インライン Web Beans を宣言する"

#. Tag: para
#, fuzzy, no-c-format
msgid "Weld lets us define a bean at an injection point. For example:"
msgstr ""
"Web Beans は、依存性注入ポイントで Web Bean を定義できます。例を以下に示しま"
"す。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>&#60;Name&#62;</literal> element declares a bean of scope "
"<literal>@Dependent</literal> and class <literal>Name</literal>, with a set "
"of initial field values. This bean has a special, container-generated "
"qualifier and is therefore injectable only to the specific injection point "
"at which it is declared."
msgstr ""
"一組の最初のフィールド値で、 <literal>&lt;Name&gt;</literal> エレメントはス"
"コープ <literal>@Dependent</literal> とクラス <literal>Name</literal> の単純"
"な Web Bean を宣言します。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"This simple but powerful feature allows the Weld XML format to be used to "
"specify whole graphs of Java objects. It&#39;s not quite a full databinding "
"solution, but it&#39;s close!"
msgstr ""
"この単純であるが、強力な機能によって、 Java オブジェクトの全部のグラフを明示"
"するのにWeb Beans XML フォーマットを用いることができます。それは完全なデータ"
"バインディングの解決案とは言えませんが、それにほとんど近いものです。"

#. Tag: title
#, no-c-format
msgid "Using a schema"
msgstr "スキーマを使用する"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"If we want our XML document format to be authored by people who aren&#39;t "
"Java developers, or who don&#39;t have access to our code, we need to "
"provide a schema. There&#39;s nothing specific to Weld about writing or "
"using the schema."
msgstr ""
"XML 文書フォーマットに Java 開発者でない、または、コードにアクセスしない人々"
"によって記述して欲しいならば、スキーマを提供する必要があります。 Web Beans に"
"特有のスキーマを記述するか、記述する必要はありません。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Writing an XML schema is quite tedious. Therefore, the Weld project will "
"provide a tool which automatically generates the XML schema from compiled "
"Java code."
msgstr ""
"XML スキーマを記述することは、全く退屈です。したがって、 Web Beans RI プロ"
"ジェクトは、コンパイルされた Java コードから自動的に XML スキーマを生み出す"
"ツールを提供します。"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<beans xmlns=\"urn:java:javax.beans\"\n"
#~ "   xmlns:util=\"urn:java:java.util\">\n"
#~ "   <util:Date/>\n"
#~ "</beans>]]>"
#~ msgstr ""
#~ "<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
#~ "          xmlns:util=\"urn:java:java.util\">\n"
#~ "\n"
#~ "    <util:Date/>\n"
#~ "\n"
#~ "</WebBeans>]]>"

#, fuzzy
#~ msgid "<![CDATA[private @Inject Date date;]]>"
#~ msgstr "<![CDATA[@Current Date date]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myapp:ShoppingCart>\n"
#~ "   <SessionScoped/>\n"
#~ "   <myfwk:Transactional requiresNew=\"true\"/>\n"
#~ "   <myfwk:Secure/>\n"
#~ "</myapp:ShoppingCart>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:ShoppingCart>\n"
#~ "    <SessionScoped/>\n"
#~ "    <myfwk:Transactional requiresNew=\"true\"/>\n"
#~ "    <myfwk:Secure/>\n"
#~ "</myapp:ShoppingCart>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<util:Date>\n"
#~ "   <Named>currentTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "   <SessionScoped/>\n"
#~ "   <myapp:Login/>\n"
#~ "   <Named>loginTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "   <ApplicationScoped/>\n"
#~ "   <myapp:SystemStart/>\n"
#~ "   <Named>systemStartTime</Named>\n"
#~ "</util:Date>]]>"
#~ msgstr ""
#~ "<![CDATA[<util:Date>\n"
#~ "    <Named>currentTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "    <SessionScoped/>\n"
#~ "    <myapp:Login/>\n"
#~ "    <Named>loginTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "    <ApplicationScoped/>\n"
#~ "    <myapp:SystemStart/>\n"
#~ "    <Named>systemStartTime</Named>\n"
#~ "</util:Date>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[private @Inject Date currentTime;\n"
#~ "private @Login Date loginTime;\n"
#~ "private @SystemStart Date systemStartTime;]]>"
#~ msgstr ""
#~ "<![CDATA[@Current Date currentTime;\n"
#~ "@Login Date loginTime;\n"
#~ "@SystemStart Date systemStartTime;]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
#~ "   <myapp:PayByCheque/>\n"
#~ "   <myapp:Asynchronous/>\n"
#~ "</myapp:AsynchronousChequePaymentProcessor>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
#~ "    <myapp:PayByCheque/>\n"
#~ "    <myapp:Asynchronous/>\n"
#~ "</myapp:AsynchronousChequePaymentProcessor>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myfwk:TransactionInterceptor>\n"
#~ "   <Interceptor/>\n"
#~ "   <myfwk:Transactional/>\n"
#~ "</myfwk:TransactionInterceptor>]]>"
#~ msgstr ""
#~ "<![CDATA[<myfwk:TransactionInterceptor>\n"
#~ "    <Interceptor/>\n"
#~ "    <myfwk:Transactional/>\n"
#~ "</myfwk:TransactionInterceptor>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myapp:System>\n"
#~ "   <ApplicationScoped/>\n"
#~ "   <myapp:admin>\n"
#~ "      <myapp:Name>\n"
#~ "         <myapp:firstname>Gavin</myapp:firstname>\n"
#~ "         <myapp:lastname>King</myapp:lastname>\n"
#~ "         <myapp:email>gavin@hibernate.org</myapp:email>\n"
#~ "      </myapp:Name>\n"
#~ "   </myapp:admin>\n"
#~ "</myapp:System>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:System>\n"
#~ "    <ApplicationScoped/>\n"
#~ "    <myapp:admin>\n"
#~ "        <myapp:Name>\n"
#~ "            <myapp:firstname>Gavin</myapp:firstname>\n"
#~ "            <myapp:lastname>King</myapp:lastname>\n"
#~ "            <myapp:email>gavin@hibernate.org</myapp:email>\n"
#~ "        </myapp:Name>\n"
#~ "    </myapp:admin>\n"
#~ "</myapp:System>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<beans xmlns=\"urn:java:javax.beans\"\n"
#~ "   xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
#~ "   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "   xsi:schemaLocation=\"urn:java:javax.beans http://java.sun.com/jee/"
#~ "beans-1.0.xsd\n"
#~ "   urn:java:com.mydomain.myapp http://mydomain.com/xsd/myapp-1.2.xsd\">\n"
#~ "\n"
#~ "   <myapp:System>\n"
#~ "      ...\n"
#~ "   </myapp:System>\n"
#~ "\n"
#~ "</beans>]]>"
#~ msgstr ""
#~ "<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
#~ "          xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
#~ "          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "          xsi:schemaLocation=\"urn:java:javax.webbeans http://java.sun."
#~ "com/jee/web-beans-1.0.xsd\n"
#~ "                              urn:java:com.mydomain.myapp http://mydomain."
#~ "com/xsd/myapp-1.2.xsd\">\n"
#~ "\n"
#~ "    <myapp:System>\n"
#~ "        ...\n"
#~ "    </myapp:System>\n"
#~ "\n"
#~ "</WebBeans>]]>"

#~ msgid "In either of these cases, Web Beans gives us two options:"
#~ msgstr ""
#~ "これらのケースのどちらででも、 Web Beans は二つのオプションを与えます。"

#~ msgid "write a producer method, or"
#~ msgstr "プロデューサメソッドを書きます"

#~ msgid "declare the Web Bean using XML."
#~ msgstr "XML を使って Web Bean を宣言します"
