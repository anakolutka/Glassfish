<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->


<!DOCTYPE project [
<!ENTITY commonSetup SYSTEM "file:./../../../../../../../../../../appserv-tests/config/properties.xml">
<!ENTITY commonBuild SYSTEM "file:./../../../../../../../../../../appserv-tests/config/common.xml">
<!ENTITY eeCommonBuild SYSTEM "file:./../../../../../../../../../../appserv-tests/config/ee-common.xml">
<!ENTITY testProperties SYSTEM "file:./test.properties">
]>

<project name="ee-lbadmin-mbeans-tests" default="usage" basedir=".">

    &commonSetup;
    &commonBuild;
    &eeCommonBuild;
    &testProperties;

    <target name="run-lb-mbeans-tests" depends="init-common">

        <antcall target="test-create-http-lb-config">
            <param name="test.target.name" value="${test.lbconfigs.name}"/>
            <param name="test.failonerror" value="true"/>
        </antcall>

        <!-- Must fail re adding same lbconfig -->
        <echo> 
        Re adding lb config ${test.lbconfigs.name}, must fail. </echo>
        <antcall target="test-create-http-lb-config">
            <param name="test.target.name" value="${test.lbconfigs.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <antcall target="test-list-http-lb-configs"/>
        <antcall target="test-create-http-lb-ref"/>
        <antcall target="test-create-http-lb-server-ref"/>

        <antcall target="test-create-health-checker">
            <param name="test.target.name" value="${test.server.name}"/>
            <param name="test.failonerror" value="true"/>
        </antcall>

        <!-- negative test case already exists, must fail-->
        <echo> Re adding health checker, must fail. </echo>
        <antcall target="test-create-health-checker">
            <param name="test.target.name" value="${test.server.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <antcall target="test-create-health-checker">
            <param name="test.target.name" value="${cluster.name}"/>
            <param name="test.failonerror" value="true"/>
        </antcall>

        <!-- negative test case already exists, must fail-->
        <echo> Re adding health checker, must fail. </echo>
        <antcall target="test-create-health-checker">
            <param name="test.target.name" value="${cluster.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <!-- Must fail readding same lbconfig with server name-->
        <echo> Adding config same name as server, must fail. </echo>
        <antcall target="test-create-http-lb-config">
            <param name="test.target.name" value="${test.server.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <!--TMP Must fail readding same lbconfig with server name-->
        <echo> Deleting config same name as server, must fail. </echo>
        <antcall target="test-delete-http-lb-config">
            <param name="test.target.name" value="${test.server.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <!-- Must fail readding same lbconfig with cluster name-->
        <echo> Adding config same name as cluster, must fail. </echo>
        <antcall target="test-create-http-lb-config">
            <param name="test.target.name" value="${cluster.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <!-- TMP Must fail delete same lbconfig with cluster name-->
        <echo> Deleting config same name as cluster, must fail. </echo>
        <antcall target="test-delete-http-lb-config">
            <param name="test.target.name" value="${cluster.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <antcall target="test-enable-http-lb-server">
            <param name="test.target.name" value="${test.server.name}"/>
        </antcall>

        <antcall target="test-list-http-lb-config">
            <param name="test.target.name" value="${test.server.name}"/>
        </antcall>
        
        <antcall target="test-list-http-lb-config">
            <param name="test.target.name" value="${test.lbconfigs.name}"/>
        </antcall>
        
        <antcall target="test-disable-http-lb-server">
            <param name="test.target.name" value="${test.server.name}"/>
        </antcall>
        <antcall target="test-disable-http-lb-application">
            <param name="test.target.name" value="${test.server.name}"/>
        </antcall>
        <antcall target="test-enable-http-lb-application">
            <param name="test.target.name" value="${test.server.name}"/>
        </antcall>

        <antcall target="test-enable-http-lb-server">
            <param name="test.target.name" value="${cluster.name}"/>
        </antcall>

        <antcall target="test-list-http-lb-config">
            <param name="test.target.name" value="${cluster.name}"/>
        </antcall>

        <antcall target="test-list-http-lb-config">
            <param name="test.target.name" value="${test.lbconfigs.name}"/>
        </antcall>

        <antcall target="test-disable-http-lb-server">
            <param name="test.target.name" value="${cluster.name}"/>
        </antcall>
        <antcall target="test-disable-http-lb-application">
            <param name="test.target.name" value="${cluster.name}"/>
        </antcall>
        <antcall target="test-enable-http-lb-application">
            <param name="test.target.name" value="${cluster.name}"/>
        </antcall>

        <antcall target="test-export-http-lb-config"/>

        <antcall target="test-delete-health-checker">
            <param name="test.target.name" value="${test.server.name}"/>
            <param name="test.failonerror" value="true"/>
        </antcall>

        <!-- negative test case already deleted, must fail-->
        <echo> Already deleted , must fail. </echo>
        <antcall target="test-delete-health-checker">
            <param name="test.target.name" value="${test.server.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <antcall target="test-delete-health-checker">
            <param name="test.target.name" value="${cluster.name}"/>
            <param name="test.failonerror" value="true"/>
        </antcall>

        <!-- negative test case already deleted, must fail-->
        <echo> Already deleted , must fail. </echo>
        <antcall target="test-delete-health-checker">
            <param name="test.target.name" value="${cluster.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <!-- This should fail because it contains refs -->
        <echo> Not empty contains refs , must fail. </echo>
        <antcall target="test-delete-http-lb-config">
            <param name="test.target.name" value="${test.lbconfigs.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <!-- disable applications refs first, must fail -->
        <antcall target="test-delete-http-lb-server-ref-only">
            <param name="test.failonerror" value="false"/>
        </antcall>
        <antcall target="test-delete-http-lb-ref-only">
            <param name="test.failonerror" value="false"/>
        </antcall>

        <antcall target="test-disable-http-lb-application">
            <param name="test.target.name" value="${test.server.name}"/>
        </antcall>

        <antcall target="test-disable-http-lb-application">
            <param name="test.target.name" value="${cluster.name}"/>
        </antcall>

        <antcall target="test-delete-http-lb-server-ref">
            <param name="test.failonerror" value="true"/>
        </antcall>

        <antcall target="test-delete-http-lb-ref">
            <param name="test.failonerror" value="true"/>
        </antcall>

        <echo> Fails because, server needs to be removed </echo>
        <antcall target="test-delete-http-lb-config">
            <param name="test.target.name" value="${test.lbconfigs.name}"/>
            <param name="test.failonerror" value="false"/>
        </antcall>

        <echo> remove after bug fix of 6172210 </echo>
        <exec executable="${ASADMIN}" failonerror="false">
            <arg line="delete-http-lb-ref"/>
            <arg line="--user ${admin.user}"/>
            <arg line="--password ${admin.password}"/>
            <arg line="--host ${admin.host}"/>
            <arg line="--port ${admin.port}"/>
            <arg line="--config ${test.lbconfigs.name}"/>
            <arg line="server"/>
        </exec>

        <antcall target="test-delete-http-lb-config">
            <param name="test.target.name" value="${test.lbconfigs.name}"/>
            <param name="test.failonerror" value="true"/>
        </antcall>

        <echo> remove after bug fix of 6172210 </echo>
        <exec executable="${ASADMIN}" failonerror="false">
            <arg line="delete-http-lb-ref"/>
            <arg line="--user ${admin.user}"/>
            <arg line="--password ${admin.password}"/>
            <arg line="--host ${admin.host}"/>
            <arg line="--port ${admin.port}"/>
            <arg line="--config ${test.server.name}"/>
            <arg line="server"/>
        </exec>

        <antcall target="test-delete-http-lb-config">
            <param name="test.target.name" value="${test.server.name}"/>
            <param name="test.failonerror" value="true"/>
        </antcall>

        <echo> remove after bug fix of 6172210 </echo>
        <exec executable="${ASADMIN}" failonerror="false">
            <arg line="delete-http-lb-ref"/>
            <arg line="--user ${admin.user}"/>
            <arg line="--password ${admin.password}"/>
            <arg line="--host ${admin.host}"/>
            <arg line="--port ${admin.port}"/>
            <arg line="--config ${cluster.name}"/>
            <arg line="server"/>
        </exec>

        <antcall target="test-delete-http-lb-config">
            <param name="test.target.name" value="${cluster.name}"/>
            <param name="test.failonerror" value="true"/>
        </antcall>

        <antcall target="test-list-http-lb-configs"/>
    </target>

    <target name="test-create-http-lb-config">
      <exec executable="${ASADMIN}" failonerror="${test.failonerror}">
        <arg line="create-http-lb-config"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="${test.target.name}"/>
      </exec>
    </target>

    <target name="test-list-http-lb-configs">
      <exec executable="${ASADMIN}" failonerror="true">
        <arg line="list-http-lb-configs"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
      </exec>
    </target>

    <target name="test-list-http-lb-config">
      <exec executable="${ASADMIN}" failonerror="true">
        <arg line="list-http-lb-configs"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="${test.target.name}"/>
      </exec>
    </target>

    <target name="test-delete-http-lb-config">
      <exec executable="${ASADMIN}" failonerror="${test.failonerror}">
        <arg line="delete-http-lb-config"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="${test.target.name}"/>
      </exec>
    </target>

    <target name="test-create-http-lb-ref">
      <antcall target="setup-default-cluster-common"/>
      <exec executable="${ASADMIN}" failonerror="true">
        <arg line="create-http-lb-ref"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="--config ${test.lbconfigs.name}"/>
        <arg line="${cluster.name}"/>
      </exec>
    </target>

    <target name="test-create-http-lb-server-ref">
      <exec executable="${ASADMIN}" failonerror="false">
        <arg line="create-instance"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="--nodeagent ${test.na.name}"/>
        <arg line="${test.server.name}"/>
      </exec>
      <exec executable="${ASADMIN}" failonerror="true">
        <arg line="create-http-lb-ref"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="--config ${test.lbconfigs.name}"/>
        <arg line="${test.server.name}"/>
      </exec>
    </target>

    <target name="test-delete-http-lb-server-ref">
        <antcall target="test-delete-http-lb-server-ref-only">
            <param name="test.failonerror" value="${test.failonerror}"/>
        </antcall>
      <exec executable="${ASADMIN}" failonerror="${test.failonerror}">
        <arg line="delete-instance"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="${test.server.name}"/>
      </exec>
    </target>

    <target name="test-delete-http-lb-server-ref-only">
      <exec executable="${ASADMIN}" failonerror="${test.failonerror}">
        <arg line="delete-http-lb-ref"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="--config ${test.lbconfigs.name}"/>
        <arg line="${test.server.name}"/>
      </exec>
    </target>


    <target name="test-delete-http-lb-ref">
        <antcall target="test-delete-http-lb-ref-only">
            <param name="test.failonerror" value="${test.failonerror}"/>
        </antcall>
      <antcall target="remove-default-cluster-common"/>
    </target>

    <target name="test-delete-http-lb-ref-only">
      <exec executable="${ASADMIN}" failonerror="${test.failonerror}">
        <arg line="delete-http-lb-ref"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="--config ${test.lbconfigs.name}"/>
        <arg line="${cluster.name}"/>
      </exec>
    </target>


    <target name="test-enable-http-lb-application">
      <exec executable="${ASADMIN}" failonerror="true">
        <arg line="enable-http-lb-application"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="--name ${test.lbadmin.app}"/>
        <arg line="${test.target.name}"/>
      </exec>
    </target>

    <target name="test-disable-http-lb-application">
      <exec executable="${ASADMIN}" failonerror="true">
        <arg line="disable-http-lb-application"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="--name ${test.lbadmin.app}"/>
        <arg line="${test.target.name}"/>
      </exec>
    </target>


    <target name="test-create-health-checker">
      <exec executable="${ASADMIN}" failonerror="$test.failonerror}">
        <arg line="create-http-health-checker"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="--url /test/createhealthchecker"/>
        <arg line="--timeout 999"/>
        <arg line="--interval 111"/>
        <arg line="--config ${test.lbconfigs.name}"/>
        <arg line="${test.target.name}"/>
      </exec>
    </target>

    <target name="test-delete-health-checker">
      <exec executable="${ASADMIN}" failonerror="{test.failonerror}">
        <arg line="delete-http-health-checker"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="--config ${test.lbconfigs.name}"/>
        <arg line="${test.target.name}"/>
      </exec>
    </target>

    <target name="test-enable-http-lb-server">
      <exec executable="${ASADMIN}" failonerror="true">
        <arg line="enable-http-lb-server"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="${test.target.name}"/>
      </exec>
    </target>

    <target name="test-disable-http-lb-server">
      <exec executable="${ASADMIN}" failonerror="true">
        <arg line="disable-http-lb-server"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="${test.target.name}"/>
      </exec>
    </target>

    <target name="test-export-http-lb-config">
      <exec executable="${ASADMIN}" failonerror="true">
        <arg line="export-http-lb-config"/>
        <arg line="--user ${admin.user}"/>
        <arg line="--password ${admin.password}"/>
        <arg line="--host ${admin.host}"/>
        <arg line="--port ${admin.port}"/>
        <arg line="--config ${test.lbconfigs.name}"/>
      </exec>
    </target>

    <target name="usage">
        <antcall target="usage-common"/>
    </target>
</project>
