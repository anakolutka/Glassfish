# Language ja-JP translations for Web_Beans:_Java_Contexts_and_Dependency_Injection package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Web_Beans:_Java_Contexts_and_Dependency_Injection "
"VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-05-01T13:53:42\n"
"PO-Revision-Date: 2009-05-22 22:46+0900\n"
"Last-Translator: TANABE Junnichi <jun@lmns.biz>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, fuzzy, no-c-format
msgid "CDI extensions available as part of Weld"
msgstr "Web Beansの一部として利用可能なJSR-299拡張機能"

#. Tag: para
#, fuzzy, no-c-format
msgid "These modules are usable on any JSR-299 implementation, not just Weld!"
msgstr ""
"これらのモジュールはWeb Beansだけではなく、あらゆるJSR-299実装においても利用"
"できます！"

#. Tag: title
#, fuzzy, no-c-format
msgid "Weld Logger"
msgstr "Web Beansロガー"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Adding logging to your application is now even easier with simple injection "
"of a logger object into any CDI bean. Simply create an injection point of "
"type <literal>org.slf4j.Logger</literal> and an appropriate logger object "
"will be injected into any instance of the bean."
msgstr ""
"あなたのアプリケーションへのロギングの追加はJSR-299 beanへのロガーオブジェク"
"トを単純なインジェクションよりも今やずっと簡単です。単に <emphasis>@Logger</"
"emphasis> アノテーションでorg.jboss.webbeans.log.Log型のメンバにアノテーショ"
"ンを付けることで適切なロガーオブジェクトがそのbeanのインスタンスにインジェク"
"トされるでしょう。"

#. Tag: para
#, no-c-format
msgid ""
"The example shows how objects can be interpolated into a message. If you use "
"this approach, you do not need to surround a call to the logger with a "
"condition like <literal>if ( log.isDebugEnabled() )</literal> to avoid "
"string concatenation."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"You can add Weld logging to your project by including weld-logger.jar, sl4j-"
"api.jar and sl4j-jdk14.jar to your project. Alternatively, express a "
"dependency on the <literal>org.jboss.weld:weld-logger</literal> Maven "
"artifact."
msgstr ""
"あなたは webbeans-logger.jar と webbeans-logging.jar を含めることであなたのプ"
"ロジェクトにWeb Beansロガーを追加することが出来ます。もしくは、 <literal>org."
"jboss.webbeans:webbeans-logger</literal> Mavenアーティファクトに依存性を表現"
"しても良いです。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"If you are using Weld as your JSR-299 implementation, there&#39;s no need to "
"include sl4j as it&#39;s already included (and used internally)."
msgstr ""
"もしあなたがJSR-299実装としてWeb Beansを利用しているのであれば、すでにインク"
"ルード済みなので、 <literal>webbeans-logging.jar</literal> をインクルードする"
"必要はありません。"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[import org.slf4j.Logger;\n"
#~ "import javax.inject.Inject;\n"
#~ "\n"
#~ "public class Checkout {\n"
#~ "   private @Inject Logger log;\n"
#~ "\n"
#~ "   public void invoiceItems() {\n"
#~ "      ShoppingCart cart;\n"
#~ "      ...\n"
#~ "      log.debug(\"Items invoiced for {}\", cart);\n"
#~ "   }\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[public class Checkout {\n"
#~ "    import org.jboss.webbeans.annotation.Logger;\n"
#~ "    import org.jboss.webbeans.log.Log;\n"
#~ "    \n"
#~ "    @Logger\n"
#~ "    private Log log;\n"
#~ "\n"
#~ "    void invoiceItems() {\n"
#~ "        ShoppingCart cart;\n"
#~ "        . . .\n"
#~ "        log.debug(\"Items invoiced for {0}\", cart);\n"
#~ "    }\n"
#~ "    \n"
#~ "}]]>"

#, fuzzy
#~ msgid ""
#~ "The example shows how objects can be interpolated into a message. This "
#~ "interpolation is done using <emphasis>java.text.MessageFormat</emphasis>, "
#~ "so see the JavaDoc for that class for more details. In this case, the "
#~ "<literal>ShoppingCart</literal> should have implemented the "
#~ "<emphasis>toString()</emphasis> method to produce a human readable value "
#~ "that is meaningful in messages. Normally, this call would have involved "
#~ "evaluating cart.toString() with String concatenation to produce a single "
#~ "String argument. Thus it was necessary to surround the call with an if-"
#~ "statement using the condition <emphasis>log.isDebugEnabled()</emphasis> "
#~ "to avoid the expensive String concatenation if the message was not "
#~ "actually going to be used. However, when using <literal>@Logger</literal>-"
#~ "injected logging, the conditional test can be left out since the object "
#~ "arguments are not evaluated unless the message is going to be logged."
#~ msgstr ""
#~ "サンプルはどのようにオブジェクトがメッセージに保管され得るかを示していま"
#~ "す。保管は <emphasis>java.text.MessageFormat</emphasis> を使用することでな"
#~ "されます。より詳細についてはJavaDocを参照して下さい。この場合では、"
#~ "ShoppingCart はメッセージに人間が読み取れて意味のある値を生成するために "
#~ "<emphasis>toString()</emphasis> メソッドが実装されているべきです。通常、こ"
#~ "の呼び出しにより単一のString引数を生成する為にcart.toString()をString連結"
#~ "することが必要となるでしょう。それゆえに、そのメッセージを実際に使用される"
#~ "意図が無い場合に高コストなString連結を避けるために <emphasis>log."
#~ "isDebugEnabled()</emphasis> 条件を使ったif文で囲って呼び出してやる必要があ"
#~ "りました。しかしながら、@Logger アノテーションを使ってロギングをインジェク"
#~ "トするとき、そのメッセージが実際にログ出力されない限りはそのオブジェクト引"
#~ "数は評価されないので条件テストは除外することができます。"
