# Language zh-CN translations for master.xml package.
# Automatically generated, 2008.
# 
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-03-30 09:14+0800\n"
"Last-Translator: Sean Wu <alartin@gmail.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Introduction"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"So you're keen to get started writing your first bean? Or perhaps you're "
"skeptical, wondering what kinds of hoops the CDI specification will make you"
" jump through! The good news is that you've probably already written and "
"used hundreds, perhaps thousands of beans. CDI just makes it easier to "
"actually use them to build an application!"
msgstr ""
"你是否已经迫不及待想要开始编写你的第一个bean了？或许，你仍旧抱有怀疑态度，想要知道CDI规范会给出什么样的圈套让你跳。好消息是你也许已经编写并且使用了好几百个或者好几千个bean了。CDI只是让你更容易的使用bean来构建应用。"

#. Tag: title
#, fuzzy, no-c-format
msgid "What is a bean?"
msgstr "什么是bean？"

#. Tag: para
#, no-c-format
msgid ""
"A bean is exactly what you think it is. Only now, it has a true identity in "
"the container environment."
msgstr "一个bean就是你想象的那样。只是现在它在容器环境下有了一个真实身份。"

#. Tag: para
#, no-c-format
msgid ""
"Prior to Java EE 6, there was no clear definition of the term \"bean\" in "
"the Java EE platform. Of course, we've been calling Java classes used in web"
" and enterprise applications \"beans\" for years. There were even a couple "
"of different kinds of things called \"beans\" in EE specifications, "
"including EJB beans and JSF managed beans. Meanwhile, other third-party "
"frameworks such as Spring and Seam introduced their own ideas of what it "
"meant to be a \"bean\". What we've been missing is a common definition."
msgstr ""
"在JavaEE "
"6之前，JavaEE平台对于“bean”没有一个清晰的定义。然而，我们已经把用在web和企业应用的Java类称作“bean”很多年了。在JavaEE规范甚至有两种完全不同类型的“bean”，它们是EJB"
" bean和JSF托管bean。在此期间，一些第三方框架例如Spring和Seam也都引入了各自的“bean”。我们缺少一个公共的“bean”定义。"

#. Tag: para
#, no-c-format
msgid ""
"Java EE 6 finally lays down that common definition in the Managed Beans "
"specification. Managed Beans are defined as container-managed objects with "
"minimal programming restrictions, otherwise known by the acronym POJO (Plain"
" Old Java Object). They support a small set of basic services, such as "
"resource injection, lifecycle callbacks and interceptors. Companion "
"specifications, such as EJB and CDI, build on this basic model. But, "
"<emphasis>at last</emphasis>, there's a uniform concept of a bean and a "
"lightweight component model that's aligned across the Java EE platform."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"With very few exceptions, almost every concrete Java class that has a "
"constructor with no parameters (or a constructor designated with the "
"annotation <literal>@Inject</literal>) is a bean. This includes every "
"JavaBean and every EJB session bean. If you've already got some JavaBeans or"
" session beans lying around, they're already beans&mdash;you won't need any "
"additional special metadata. There's just little one thing you need to do "
"before you can start injecting them into stuff: you need to put them in an "
"archive (a jar, or a Java EE module such as a war or EJB jar) that contains "
"a special marker file: <literal>META-INF/beans.xml</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The JavaBeans and EJBs you've been writing every day, up until now, have not"
" been able to take advantage of the new services defined by the CDI "
"specification. But you'll be able to use every one of them with "
"CDI&mdash;allowing the container to create and destroy instances of your "
"beans and associate them with a designated context, injecting them into "
"other beans, using them in EL expressions, specializing them with qualifier "
"annotations, even adding interceptors and decorators to them&mdash;without "
"modifying your existing code. At most, you'll need to add some annotations."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now let's see how to create your first bean that actually uses CDI."
msgstr "现在，让我们来看看如何用CDI创建你的第一个bean。"

#. Tag: title
#, fuzzy, no-c-format
msgid "Getting our feet wet"
msgstr "初试牛刀"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Suppose that we have two existing Java classes that we've been using for "
"years in various applications. The first class parses a string into a list "
"of sentences:"
msgstr "假定我们有两个已经写好的Java类，我们已经在不同的应用中使用它们好多年了。第一个类将一个字符串解析为一个句子列表："

#. Tag: programlisting
#, no-c-format
msgid ""
"public class SentenceParser {\n"
"   public List&lt;String&gt; parse(String text) { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The second existing class is a stateless session bean front-end for an "
"external system that is able to translate sentences from one language to "
"another:"
msgstr "第二个已有类是一个无状态的会话Bean，这个会话Bean作为一个外部系统的前端，能够将句子从一种语言翻译到另一个语言："

#. Tag: programlisting
#, no-c-format
msgid ""
"@Stateless\n"
"public class SentenceTranslator implements Translator {\n"
"   public String translate(String sentence) { ... }\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "Where <literal>Translator</literal> is the EJB local interface:"
msgstr "<literal>Translator</literal>是EJB的本地接口："

#. Tag: programlisting
#, no-c-format
msgid ""
"@Local\n"
"public interface Translator {\n"
"   public String translate(String sentence);\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Unfortunately, we don't have a class that translates whole text documents. "
"So let's write a bean for this job:"
msgstr "不幸的是，我们没有Java类能够翻译整个文档。因此，让我们写一个bean来做这个工作："

#. Tag: programlisting
#, no-c-format
msgid ""
"public class TextTranslator {\n"
"   private SentenceParser sentenceParser;\n"
"   private Translator sentenceTranslator;\n"
"    \n"
"   @Inject\n"
"   TextTranslator(SentenceParser sentenceParser, Translator sentenceTranslator) {\n"
"      this.sentenceParser = sentenceParser;\n"
"      this.sentenceTranslator = sentenceTranslator;\n"
"   }\n"
"    \n"
"   public String translate(String text) {\n"
"      StringBuilder sb = new StringBuilder();\n"
"      for (String sentence: sentenceParser.parse(text)) {\n"
"          sb.append(sentenceTranslator.translate(sentence));\n"
"      }\n"
"      return sb.toString();\n"
"   }\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"But wait! <literal>TextTranslator</literal> does not have a constructor with"
" no parameters! Is it still a bean? If you remember, a class that does not "
"have a constructor with no parameters can still be a bean if it has a "
"constructor annotated <literal>@Inject</literal>."
msgstr ""
"但是，等一下!<literal>TextTranslator</literal>并没有一个无参构造器！它仍然是一个bean么？好吧，一个没有无参构造器的类依然能够成为一个bean，如果你还记得，只要在它的一个构造器上使用<literal>@Inject</literal>注释即可。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"As you've guessed, the <literal>@Inject</literal> annotation has something "
"to do with dependency injection! <literal>@Inject</literal> may be applied "
"to a constructor or method of a bean, and tells the container to call that "
"constructor or method when instantiating the bean. The container will inject"
" other beans into the parameters of the constructor or method."
msgstr ""
"就像你猜到的一样， <literal>@Inject</literal>注释和依赖注入有关！ "
"<literal>@Inject</literal>可以应用到一个bean的构造器或者方法上，它告诉容器在初始化一个bean的时候去调用这个构造器或者方法。容器能够将其他的bean注入到构造器或者方法的参数中。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"We may obtain an instance of <literal>TextTranslator</literal> by injecting "
"it into a constructor, method or field of a bean, or a field or method of a "
"Java EE component class such as a servlet. The container chooses the object "
"to be injected based on the type of the injection point, not the name of the"
" field, method or parameter."
msgstr ""
"我们可以通过在bean的构造器、方法或变量域中注入<literal>TextTranslator</literal>来获得它的实例，或者像Servlet这样的JavaEE组件的变量域或方法。容器基于注入点的类型来选择注入的对象，而不是变量域、方法或参数的名字。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Let's create a UI controller bean that uses field injection to obtain an "
"instance of the <literal>TextTranslator</literal>, translating the text "
"entered by a user:"
msgstr ""
"让我们来创建一个UI控制器bean，然后使用通过变量域注入获取<literal>TextTranslator</literal>的一个实例，通过用户翻译文本："

#. Tag: programlisting
#, no-c-format
msgid ""
"@Named @RequestScoped\n"
"public class TranslateController {\n"
"   @Inject TextTranslator textTranslator;\n"
"\n"
"   private String inputText;\n"
"   private String translation;\n"
"\n"
"   // JSF action method, perhaps\n"
"   public void translate() {\n"
"      translation = textTranslator.translate(inputText); \n"
"   }\n"
"\n"
"   public String getInputText() {\n"
"      return inputText;\n"
"   }\n"
"\n"
"   public void setInputText(String text) {\n"
"      this.inputText = text;\n"
"   }\n"
"\n"
"   public String getTranslation() {\n"
"      return translation;\n"
"   }\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "Field injection of <literal>TextTranslator</literal> instance"
msgstr "变量域注入<literal>TextTranslator</literal>实例："

#. Tag: para
#, no-c-format
msgid ""
"Notice the controller bean is request-scoped and named. Since this "
"combination is so common in web applications, there's a built-in annotation "
"for it in CDI that we could have used as a shorthand. When the (stereotype) "
"annotation <literal>@Model</literal> is declared on a class, it creates a "
"request-scoped and named bean."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Alternatively, we may obtain an instance of "
"<literal>TextTranslator</literal> programmatically from an injected instance"
" of <literal>Instance</literal>, parameterized with the bean type:"
msgstr ""
"通过将其注入到一个Web Bean，Servlet或者EJB，我们能够获得一个 "
"<literal>TextTranslator</literal>的实例:"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Inject Instance&lt;TextTranslator&gt; textTranslatorInstance;\n"
"...\n"
"public void translate() {\n"
"   textTranslatorInstance.get().translate(inputText);\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Notice that it isn't necessary to create a getter or setter method to inject"
" one bean into another. CDI can access an injected field directly (even if "
"it's private!), which sometimes helps eliminate some wasteful code. The name"
" of the field is arbitrary. It's the field's type that determines what is "
"injected."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"At system initialization time, the container must validate that exactly one "
"bean exists which satisfies each injection point. In our example, if no "
"implementation of <literal>Translator</literal> is available&mdash;if the "
"<literal>SentenceTranslator</literal> EJB was not deployed&mdash;the "
"container would inform us of an <emphasis>unsatisfied dependency</emphasis>."
" If more than one implementation of <literal>Translator</literal> were "
"available, the container would inform us of the <emphasis>ambiguous "
"dependency</emphasis>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Before we get too deep in the details, let's pause and examine a bean's "
"anatomy. What aspects of the bean are significant, and what gives it its "
"identity? Instead of just giving examples of beans, we're going to define "
"what <emphasis>makes</emphasis> something a bean."
msgstr ""
