<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="en-US"><sect1><title>Performance Tuning</title></sect1><sect1><title>EclipseLink provides a diverse set of features to measure and optimize application performance. You can enable or disable most features in the descriptors or session, making any resulting performance gains global. </title></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Introduction_to_Optimization"/>Introduction to Optimization</title></sect1><sect1><title>Performance considerations are present at every step of the development cycle. Although this implies an awareness of performance issues in your design and implementation, it does not mean that you should expect to achieve the best possible performance in your first pass. </title></sect1><sect1><title>For example, if optimization complicates the design, leave it until the final development phase. You should still plan for these optimizations from your first iteration, to make them easier to integrate later. </title></sect1><sect1><title>The most important concept associated with tuning your EclipseLink application is the idea of an iterative approach. The most effective way to tune your application is to do the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Measuring_EclipseLink_Performance_with_the_EclipseLink_Profiler">Measure EclipseLink Performance with the EclipseLink Profiler</ulink>. </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Identifying_Sources_of_Application_Performance_Problems">Identify sources of application performance problems</ulink> and modify application components; </title>
      </listitem>
      <listitem>
         <title>Measure performance again. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Measuring_EclipseLink_Performance_with_the_EclipseLink_Profiler">Measure EclipseLink Performance with the EclipseLink Profiler</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Measuring_EclipseLink_Performance_with_the_EclipseLink_Profiler">Measure EclipseLink Performance with the EclipseLink Profiler</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Identifying_Sources_of_Application_Performance_Problems">Identify sources of application performance problems</ulink> and modify application components; </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Identifying_Sources_of_Application_Performance_Problems">Identify sources of application performance problems</ulink> and modify application components; </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Identifying_Sources_of_Application_Performance_Problems">Identify sources of application performance problems</ulink>
   <listitem>
      <title>Measure performance again. </title>
   </listitem></sect1><sect1><title>Measure performance again. </title></sect1><sect1><title>To identify the changes that improve your application performance, modify only one or two components at a time. You should also tune your application in a nonproduction environment before you deploy the application. </title></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Identifying_Sources_of_Application_Performance_Problems"/>Identifying Sources of Application Performance Problems</title></sect1><sect1><title>For various parts of an EclipseLink-enabled application, this section describes the performance problems most commonly encountered and provides suggestions for improving performance. Areas of the application where performance problems could occur include the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Identifying_General_Performance_Optimization">Identifying General Performance Optimization</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Schema">Schema</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Mappings_and_Descriptors">Mappings and Descriptors</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Sessions">Sessions</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Cache">Cache</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Data_Access">Data Access</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Queries">Queries</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_the_Unit_of_Work">Unit of Work</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_the_Application_Server_and_Database_Optimization">Application Server and Database Optimization</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Identifying_General_Performance_Optimization">Identifying General Performance Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Identifying_General_Performance_Optimization">Identifying General Performance Optimization</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Schema">Schema</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Schema">Schema</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Schema">Schema</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Mappings_and_Descriptors">Mappings and Descriptors</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Mappings_and_Descriptors">Mappings and Descriptors</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Mappings_and_Descriptors">Mappings and Descriptors</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Sessions">Sessions</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Sessions">Sessions</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Sessions">Sessions</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Cache">Cache</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Cache">Cache</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Cache">Cache</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Data_Access">Data Access</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Data_Access">Data Access</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Data_Access">Data Access</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Queries">Queries</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Queries">Queries</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Queries">Queries</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_the_Unit_of_Work">Unit of Work</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_the_Unit_of_Work">Unit of Work</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_the_Unit_of_Work">Unit of Work</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_the_Application_Server_and_Database_Optimization">Application Server and Database Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_the_Application_Server_and_Database_Optimization">Application Server and Database Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_the_Application_Server_and_Database_Optimization">Application Server and Database Optimization</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Measuring_EclipseLink_Performance_with_the_EclipseLink_Profiler"/>Measuring EclipseLink Performance with the EclipseLink Profiler</title></sect1><sect1><title>The most important challenge to performance tuning is knowing what to optimize. To improve the performance of your application, identify the areas of your application that do not operate at peak efficiency. The EclipseLink performance profiler helps you identify performance problems by logging performance statistics for every executed query in a given session. </title></sect1><sect1><title/>
   <informaltable frame="all">
      <tgroup cols="1"><tbody><row>
            <entry>
               <para>Note: You should also consider using general performance profilers such as JDeveloper or JProbe to analyze performance problems. These tools can provide more detail that may be required to properly diagnose a problem. </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title>The EclipseLink performance profiler logs the following information to the EclipseLink log file (for general information about EclipseLink logging, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#Logging">Logging</ulink>): </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#Logging">Logging</ulink>
   <orderedlist>
      <listitem>
         <title>query class; </title>
      </listitem>
      <listitem>
         <title>domain class; </title>
      </listitem>
      <listitem>
         <title>total time, total execution time of the query, including any nested queries (in milliseconds); </title>
      </listitem>
      <listitem>
         <title>local time, execution time of the query, excluding any nested queries (in milliseconds); </title>
      </listitem>
      <listitem>
         <title>number of objects, the total number of objects affected; </title>
      </listitem>
      <listitem>
         <title>number of objects handled per second; </title>
      </listitem>
      <listitem>
         <title>logging, the amount of time spent printing logging messages (in milliseconds); </title>
      </listitem>
      <listitem>
         <title>SQL prepare, the amount of time spent preparing the SQL script (in milliseconds); </title>
      </listitem>
      <listitem>
         <title>SQL execute, the amount of time spent executing the SQL script (in milliseconds); </title>
      </listitem>
      <listitem>
         <title>row fetch, the amount of time spent fetching rows from the database (in milliseconds); </title>
      </listitem>
      <listitem>
         <title>cache, the amount of time spent searching or updating the object cache (in milliseconds); </title>
      </listitem>
      <listitem>
         <title>object build, the amount of time spent building the domain object (in milliseconds); </title>
      </listitem>
      <listitem>
         <title>query prepare, the amount of time spent to prepare the query prior to execution (in milliseconds); </title>
      </listitem>
      <listitem>
         <title>SQL generation, the amount of time spent to generate the SQL script before it is sent to the database (in milliseconds). </title>
      </listitem>
   </orderedlist></sect1><sect1><title>query class; </title>
   <listitem>
      <title>domain class; </title>
   </listitem></sect1><sect1><title>domain class; </title>
   <listitem>
      <title>total time, total execution time of the query, including any nested queries (in milliseconds); </title>
   </listitem></sect1><sect1><title>total time, total execution time of the query, including any nested queries (in milliseconds); </title>
   <listitem>
      <title>local time, execution time of the query, excluding any nested queries (in milliseconds); </title>
   </listitem></sect1><sect1><title>local time, execution time of the query, excluding any nested queries (in milliseconds); </title>
   <listitem>
      <title>number of objects, the total number of objects affected; </title>
   </listitem></sect1><sect1><title>number of objects, the total number of objects affected; </title>
   <listitem>
      <title>number of objects handled per second; </title>
   </listitem></sect1><sect1><title>number of objects handled per second; </title>
   <listitem>
      <title>logging, the amount of time spent printing logging messages (in milliseconds); </title>
   </listitem></sect1><sect1><title>logging, the amount of time spent printing logging messages (in milliseconds); </title>
   <listitem>
      <title>SQL prepare, the amount of time spent preparing the SQL script (in milliseconds); </title>
   </listitem></sect1><sect1><title>SQL prepare, the amount of time spent preparing the SQL script (in milliseconds); </title>
   <listitem>
      <title>SQL execute, the amount of time spent executing the SQL script (in milliseconds); </title>
   </listitem></sect1><sect1><title>SQL execute, the amount of time spent executing the SQL script (in milliseconds); </title>
   <listitem>
      <title>row fetch, the amount of time spent fetching rows from the database (in milliseconds); </title>
   </listitem></sect1><sect1><title>row fetch, the amount of time spent fetching rows from the database (in milliseconds); </title>
   <listitem>
      <title>cache, the amount of time spent searching or updating the object cache (in milliseconds); </title>
   </listitem></sect1><sect1><title>cache, the amount of time spent searching or updating the object cache (in milliseconds); </title>
   <listitem>
      <title>object build, the amount of time spent building the domain object (in milliseconds); </title>
   </listitem></sect1><sect1><title>object build, the amount of time spent building the domain object (in milliseconds); </title>
   <listitem>
      <title>query prepare, the amount of time spent to prepare the query prior to execution (in milliseconds); </title>
   </listitem></sect1><sect1><title>query prepare, the amount of time spent to prepare the query prior to execution (in milliseconds); </title>
   <listitem>
      <title>SQL generation, the amount of time spent to generate the SQL script before it is sent to the database (in milliseconds). </title>
   </listitem></sect1><sect1><title>SQL generation, the amount of time spent to generate the SQL script before it is sent to the database (in milliseconds). </title></sect1><sect1><title/>
   <informaltable frame="all">
      <tgroup cols="1"><tbody><row>
            <entry>
               <para>Note: Use the EclipseLink profiler to profile single-threaded finite use cases to determine the bottle neck. </para>
               <para>Do not use the EclipseLink profiler to enable monitoring of a long-running multi-threaded server. </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title>This section includes information on the following topics: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Configure_the_EclipseLink_Performance_Profiler">How to Configure the EclipseLink Performance Profiler</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Access_the_EclipseLink_Profiler_Results">How to Access the EclipseLink Profiler Results</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Configure_the_EclipseLink_Performance_Profiler">How to Configure the EclipseLink Performance Profiler</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Configure_the_EclipseLink_Performance_Profiler">How to Configure the EclipseLink Performance Profiler</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Access_the_EclipseLink_Profiler_Results">How to Access the EclipseLink Profiler Results</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Access_the_EclipseLink_Profiler_Results">How to Access the EclipseLink Profiler Results</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Access_the_EclipseLink_Profiler_Results">How to Access the EclipseLink Profiler Results</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Configure_the_EclipseLink_Performance_Profiler"/>How to Configure the EclipseLink Performance Profiler</title></sect1><sect1><title>To enable the EclipseLink performance profiler, select the EclipseLink profiler option when configuring your session (see <ulink url="http://wiki.eclipse.org/Configuring_a_Session_%28ELUG%29#Configuring_a_Performance_Profiler">Configuring a Performance Profiler</ulink>). </title>EclipseLink<ulink url="http://wiki.eclipse.org/Configuring_a_Session_%28ELUG%29#Configuring_a_Performance_Profiler">Configuring a Performance Profiler</ulink></sect1><sect1><title>When using JPA the profiler can be set in your persistence.xml through the persistence property "eclipselink.profiler" to "PerformanceProfiler". See the ProfilerType in the config package for other profiling options. </title>persistence.xml"eclipselink.profiler""PerformanceProfiler"ProfilerTypeconfig</sect1><sect1><title>The EclipseLink performance profiler is an instance of org.eclipse.persistence.tools.profiler.PerformanceProfiler class. It provides the following public API: </title>org.eclipse.persistence.tools.profiler.PerformanceProfiler<orderedlist>
      <listitem>
         <title>logProfile – enables the profiler; </title>
      </listitem>
      <listitem>
         <title>dontLogProfile – disables the profiler; </title>
      </listitem>
      <listitem>
         <title>logProfileSummary – organizes the profiler log into a summary of all the individual operation profiles including operation statistics like the shortest time of all the operations that were profiled, the total time of all the operations, the number of objects returned by profiled queries, and the total time that was spent in each kind of operation that was profiled; </title>
      </listitem>
      <listitem>
         <title>logProfileSummaryByQuery – organizes the profiler log into a summary of all the individual operation profiles by query; </title>
      </listitem>
      <listitem>
         <title>logProfileSummaryByClass – organizes the profiler log into a summary of all the individual operation profiles by class. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>logProfile – enables the profiler; </title>logProfile<listitem>
      <title>dontLogProfile – disables the profiler; </title>
   </listitem></sect1><sect1><title>dontLogProfile – disables the profiler; </title>dontLogProfile<listitem>
      <title>logProfileSummary – organizes the profiler log into a summary of all the individual operation profiles including operation statistics like the shortest time of all the operations that were profiled, the total time of all the operations, the number of objects returned by profiled queries, and the total time that was spent in each kind of operation that was profiled; </title>
   </listitem></sect1><sect1><title>logProfileSummary – organizes the profiler log into a summary of all the individual operation profiles including operation statistics like the shortest time of all the operations that were profiled, the total time of all the operations, the number of objects returned by profiled queries, and the total time that was spent in each kind of operation that was profiled; </title>logProfileSummary<listitem>
      <title>logProfileSummaryByQuery – organizes the profiler log into a summary of all the individual operation profiles by query; </title>
   </listitem></sect1><sect1><title>logProfileSummaryByQuery – organizes the profiler log into a summary of all the individual operation profiles by query; </title>logProfileSummaryByQuery<listitem>
      <title>logProfileSummaryByClass – organizes the profiler log into a summary of all the individual operation profiles by class. </title>
   </listitem></sect1><sect1><title>logProfileSummaryByClass – organizes the profiler log into a summary of all the individual operation profiles by class. </title>logProfileSummaryByClass</sect1><sect1><title>
      <anchor id="How_to_Access_the_EclipseLink_Profiler_Results"/>How to Access the EclipseLink Profiler Results</title></sect1><sect1><title>The simplest way to view EclipseLink profiler results is to read the EclipseLink log files with a text editor. For general information about EclipseLink logging, such as logging file location, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#Logging">Logging</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#Logging">Logging</ulink></sect1><sect1><title>This example shows an example of the EclipseLink profiler output. </title></sect1><sect1><title>
      <anchor id="Example_11-1"/>Performance Profiler Output </title>Performance Profiler Output</sect1><sect1><title>Begin Profile of{</title></sect1><sect1><title>ReadAllQuery(com.demos.employee.domain.Employee)</title></sect1><sect1><title>Profile(ReadAllQuery,# of obj=12, time=1399,sql execute=217,</title></sect1><sect1><title>prepare=495, row fetch=390, time/obj=116,obj/sec=8)</title></sect1><sect1><title>} End Profile</title></sect1><sect1><title>The second line of the profile contains the following information about a query: </title>
   <orderedlist>
      <listitem>
         <title>ReadAllQuery(com.demos.employee.domain.Employee): specific query profiled, and its arguments. </title>
      </listitem>
      <listitem>
         <title>Profile(ReadAllQuery: start of the profile and the type of query. </title>
      </listitem>
      <listitem>
         <title># of obj=12: number of objects involved in the query. </title>
      </listitem>
      <listitem>
         <title>time=1399: total execution time of the query (in milliseconds). </title>
      </listitem>
      <listitem>
         <title>sql execute=217: total time spent executing the SQL statement. </title>
      </listitem>
      <listitem>
         <title>prepare=495: total time spent preparing the SQL statement. </title>
      </listitem>
      <listitem>
         <title>row fetch=390: total time spent fetching rows from the database. </title>
      </listitem>
      <listitem>
         <title>time/obj=116: number of milliseconds spent on each object. </title>
      </listitem>
      <listitem>
         <title>obj/sec=8: number of objects handled per second. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>ReadAllQuery(com.demos.employee.domain.Employee): specific query profiled, and its arguments. </title>ReadAllQuery(com.demos.employee.domain.Employee)<listitem>
      <title>Profile(ReadAllQuery: start of the profile and the type of query. </title>
   </listitem></sect1><sect1><title>Profile(ReadAllQuery: start of the profile and the type of query. </title>Profile(ReadAllQuery<listitem>
      <title># of obj=12: number of objects involved in the query. </title>
   </listitem></sect1><sect1><title># of obj=12: number of objects involved in the query. </title># of obj=12<listitem>
      <title>time=1399: total execution time of the query (in milliseconds). </title>
   </listitem></sect1><sect1><title>time=1399: total execution time of the query (in milliseconds). </title>time=1399<listitem>
      <title>sql execute=217: total time spent executing the SQL statement. </title>
   </listitem></sect1><sect1><title>sql execute=217: total time spent executing the SQL statement. </title>sql execute=217<listitem>
      <title>prepare=495: total time spent preparing the SQL statement. </title>
   </listitem></sect1><sect1><title>prepare=495: total time spent preparing the SQL statement. </title>prepare=495<listitem>
      <title>row fetch=390: total time spent fetching rows from the database. </title>
   </listitem></sect1><sect1><title>row fetch=390: total time spent fetching rows from the database. </title>row fetch=390<listitem>
      <title>time/obj=116: number of milliseconds spent on each object. </title>
   </listitem></sect1><sect1><title>time/obj=116: number of milliseconds spent on each object. </title>time/obj=116<listitem>
      <title>obj/sec=8: number of objects handled per second. </title>
   </listitem></sect1><sect1><title>obj/sec=8: number of objects handled per second. </title>obj/sec=8</sect1><sect1><title>
      <anchor id="Identifying_General_Performance_Optimization"/>Identifying General Performance Optimization</title></sect1><sect1><title>In general, avoid overriding EclipseLink default behavior unless your application requires it. Some EclipseLink defaults are suitable for a development environment; you should change these defaults to suit your production environment (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_for_a_Production_Environment">Optimizing for a Production Environment</ulink>). </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_for_a_Production_Environment">Optimizing for a Production Environment</ulink></sect1><sect1><title>Use the Workbench rather than manual coding. These tools are not only easy to use: the default configuration they export to deployment XML (and the code it generates, if required) represents best practices optimized for most applications. </title></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Optimizing_for_a_Production_Environment"/>Optimizing for a Production Environment</title></sect1><sect1><title>Some EclipseLink defaults are suitable for a development environment but we recommend that you change these to suit your production environment for optimal performance. These defaults include: </title>
   <orderedlist>
      <listitem>
         <title>Batch writing: enable.For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_Writing_for_Optimization">How to Use Batch Writing for Optimization</ulink>. </title>
      </listitem>
      <listitem>
         <title>Statement caching: enable either in EclipseLink when using an internal connection pool or in the data source when using an external connection pool and choose a statement cache size appropriate for your application.For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement Caching for Optimization</ulink>. </title>
      </listitem>
      <listitem>
         <title>Read and write connection pool size: increase to the desired number of concurrent threads (for example, 50).For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_Data_Access_%28ELUG%29#Connection_Pools">Connection Pools</ulink>. </title>
      </listitem>
      <listitem>
         <title>Session cache size: increase to the desired number of objects to be cached in memory (for example, 1000). Note that you can configure session cache size for each class individually.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Guidelines_for_Configuring_the_Cache_and_Identity_Maps">Guidelines for Configuring the Cache and Identity Maps</ulink>. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>Batch writing: enable.For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_Writing_for_Optimization">How to Use Batch Writing for Optimization</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_Writing_for_Optimization">How to Use Batch Writing for Optimization</ulink>
   <listitem>
      <title>Statement caching: enable either in EclipseLink when using an internal connection pool or in the data source when using an external connection pool and choose a statement cache size appropriate for your application.For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement Caching for Optimization</ulink>. </title>
   </listitem></sect1><sect1><title>Statement caching: enable either in EclipseLink when using an internal connection pool or in the data source when using an external connection pool and choose a statement cache size appropriate for your application.For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement Caching for Optimization</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement Caching for Optimization</ulink>
   <listitem>
      <title>Read and write connection pool size: increase to the desired number of concurrent threads (for example, 50).For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_Data_Access_%28ELUG%29#Connection_Pools">Connection Pools</ulink>. </title>
   </listitem></sect1><sect1><title>Read and write connection pool size: increase to the desired number of concurrent threads (for example, 50).For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_Data_Access_%28ELUG%29#Connection_Pools">Connection Pools</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_Data_Access_%28ELUG%29#Connection_Pools">Connection Pools</ulink>
   <listitem>
      <title>Session cache size: increase to the desired number of objects to be cached in memory (for example, 1000). Note that you can configure session cache size for each class individually.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Guidelines_for_Configuring_the_Cache_and_Identity_Maps">Guidelines for Configuring the Cache and Identity Maps</ulink>. </title>
   </listitem></sect1><sect1><title>Session cache size: increase to the desired number of objects to be cached in memory (for example, 1000). Note that you can configure session cache size for each class individually.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Guidelines_for_Configuring_the_Cache_and_Identity_Maps">Guidelines for Configuring the Cache and Identity Maps</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Guidelines_for_Configuring_the_Cache_and_Identity_Maps">Guidelines for Configuring the Cache and Identity Maps</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Optimizing_Schema"/>Optimizing Schema</title></sect1><sect1><title>Optimization is an important consideration when you design your database schema and object model. Most performance issues occur when the object model or database schema is too complex, which can make the database slow and difficult to query. This is most likely to happen if you derive your database schema directly from a complex object model. </title></sect1><sect1><title>To optimize performance, design the object model and database schema together. However, allow each model to be designed optimally: do not require a direct one-to-one correlation between the two. </title></sect1><sect1><title>This section includes the following schema optimization examples: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_1:_Aggregation_of_Two_Tables_Into_One">Schema Case 1: Aggregation of Two Tables Into One</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_2:_Splitting_One_Table_Into_Many">Schema Case 2: Splitting One Table Into Many</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_3:_Collapsed_Hierarchy">Schema Case 3: Collapsed Hierarchy</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_4:_Choosing_One_Out_of_Many">Schema Case 4: Choosing One Out of Many</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_1:_Aggregation_of_Two_Tables_Into_One">Schema Case 1: Aggregation of Two Tables Into One</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_1:_Aggregation_of_Two_Tables_Into_One">Schema Case 1: Aggregation of Two Tables Into One</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_2:_Splitting_One_Table_Into_Many">Schema Case 2: Splitting One Table Into Many</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_2:_Splitting_One_Table_Into_Many">Schema Case 2: Splitting One Table Into Many</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_2:_Splitting_One_Table_Into_Many">Schema Case 2: Splitting One Table Into Many</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_3:_Collapsed_Hierarchy">Schema Case 3: Collapsed Hierarchy</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_3:_Collapsed_Hierarchy">Schema Case 3: Collapsed Hierarchy</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_3:_Collapsed_Hierarchy">Schema Case 3: Collapsed Hierarchy</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_4:_Choosing_One_Out_of_Many">Schema Case 4: Choosing One Out of Many</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_4:_Choosing_One_Out_of_Many">Schema Case 4: Choosing One Out of Many</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Schema_Case_4:_Choosing_One_Out_of_Many">Schema Case 4: Choosing One Out of Many</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Schema_Case_1:_Aggregation_of_Two_Tables_Into_One"/>Schema Case 1: Aggregation of Two Tables Into One</title></sect1><sect1><title>A common schema optimization technique is to aggregate two tables into a single table. This improves read and write performance by requiring only one database operation instead of two. </title></sect1><sect1><title>The <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-1">Original Schema (Aggregation of Two Tables Case)</ulink> and <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-2">Optimized Schema (Aggregation of Two Tables Case)</ulink> tables illustrate the table aggregation technique. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-1">Original Schema (Aggregation of Two Tables Case)</ulink>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-2">Optimized Schema (Aggregation of Two Tables Case)</ulink></sect1><sect1><title>
      <anchor id="Table_11-1"/>Original Schema (Aggregation of Two Tables Case) </title>Original Schema (Aggregation of Two Tables Case)<informaltable frame="all">
      <tgroup cols="2"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t3"/>Elements <anchor id="r1c2-t3"/>
               </para>
            </entry>
            <entry>
               <para>Details <anchor id="r2c1-t3"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Title </para>
            </entry>
            <entry>
               <para>ACME Member Location Tracking System <anchor id="r3c1-t3"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Classes </para>
            </entry>
            <entry>
               <para>Member, Address <anchor id="r4c1-t3"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Tables </para>
            </entry>
            <entry>
               <para>MEMBER, ADDRESS <anchor id="r5c1-t3"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Relationships </para>
            </entry>
            <entry>
               <para>address - OneToOne - Address </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title>The nature of this application dictates that you always look up employees and addresses together. As a result, querying a member based on address information requires a database join, and reading a member and its address requires two read statements. Writing a member requires two write statements. This adds unnecessary complexity to the system, and results in poor performance. </title></sect1><sect1><title>A better solution is to combine the MEMBER and ADDRESS tables into a single table, and change the one-to-one relationship to an aggregate relationship. This lets you read all information with a single operation, and doubles the update and insert speed, because only a single row in one table requires modifications. </title></sect1><sect1><title>
      <anchor id="Table_11-2"/>Optimized Schema (Aggregation of Two Tables Case) </title>Optimized Schema (Aggregation of Two Tables Case)<informaltable frame="all">
      <tgroup cols="2"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t4"/>Elements <anchor id="r1c2-t4"/>
               </para>
            </entry>
            <entry>
               <para>Details <anchor id="r2c1-t4"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Classes </para>
            </entry>
            <entry>
               <para>Member, Address <anchor id="r3c1-t4"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Tables </para>
            </entry>
            <entry>
               <para>MEMBER <anchor id="r4c1-t4"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Relationships </para>
            </entry>
            <entry>
               <para>address - Embedded (aggregate) - Address </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title>
      <anchor id="Schema_Case_2:_Splitting_One_Table_Into_Many"/>Schema Case 2: Splitting One Table Into Many</title></sect1><sect1><title>To improve overall performance of the system, split large tables into two or more smaller tables. This significantly reduces the amount of data traffic required to query the database. </title></sect1><sect1><title>For example, the system illustrated in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-3">Original Schema (Splitting One Table into Many Case)</ulink> table assigns employees to projects within an organization. The most common operation reads a set of employees and projects, assigns employees to projects, and update the employees. The employee's address or job classification is also occasionally used to determine the project on which the employee is placed. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-3">Original Schema (Splitting One Table into Many Case)</ulink></sect1><sect1><title>
      <anchor id="Table_11-3"/>Original Schema (Splitting One Table into Many Case) </title>Original Schema (Splitting One Table into Many Case)<informaltable frame="all">
      <tgroup cols="5"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t5"/>Elements <anchor id="r1c2-t5"/>
               </para>
            </entry>
            <entry>
               <para>Details <anchor id="r1c3-t5"/>
               </para>
            </entry>
            <entry>
               <para>Instance Variable <anchor id="r1c4-t5"/>
               </para>
            </entry>
            <entry>
               <para>Mapping <anchor id="r1c5-t5"/>
               </para>
            </entry>
            <entry>
               <para>Target <anchor id="r2c1-t5"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Title </para>
            </entry>
            <entry>
               <para>ACME Employee Workflow System </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r3c1-t5"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Classes </para>
            </entry>
            <entry>
               <para>Employee, Address, PhoneNumber, EmailAddress, JobClassification, Project </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r4c1-t5"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Tables </para>
            </entry>
            <entry>
               <para>EMPLOYEE, PROJECT, PROJ_EMP </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r5c1-t5"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Relationships </para>
            </entry>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>address </para>
            </entry>
            <entry>
               <para>Embedded (aggregate) </para>
            </entry>
            <entry>
               <para>Address <anchor id="r6c1-t5"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>phoneNumber </para>
            </entry>
            <entry>
               <para>Embedded (aggregate) </para>
            </entry>
            <entry>
               <para>EmailAddress <anchor id="r7c1-t5"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>emailAddress </para>
            </entry>
            <entry>
               <para>Embedded (aggregate) </para>
            </entry>
            <entry>
               <para>EmailAddress <anchor id="r8c1-t5"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>job </para>
            </entry>
            <entry>
               <para>Embedded (aggregate) </para>
            </entry>
            <entry>
               <para>JobClassification <anchor id="r9c1-t5"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>projects </para>
            </entry>
            <entry>
               <para>ManyToMany </para>
            </entry>
            <entry>
               <para>Project </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title>When you read a large volume of employee records from the database, you must also read their aggregate parts. Because of this, the system suffers from general read performance issues. To resolve this, break the EMPLOYEE table into the EMPLOYEE, ADDRESS, PHONE, EMAIL, and JOB tables, as illustrated in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-4">Optimized Schema (Splitting One Table into Many Case)</ulink> table. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-4">Optimized Schema (Splitting One Table into Many Case)</ulink></sect1><sect1><title>Because you usually read only the employee information, splitting the table reduces the amount of data transferred from the database to the client. This improves your read performance by reducing the amount of data traffic by 25 percent. </title></sect1><sect1><title>
      <anchor id="Table_11-4"/>Optimized Schema (Splitting One Table into Many Case) </title>Optimized Schema (Splitting One Table into Many Case)<informaltable frame="all">
      <tgroup cols="5"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t6"/>Elements <anchor id="r1c2-t6"/>
               </para>
            </entry>
            <entry>
               <para>Details <anchor id="r1c3-t6"/>
               </para>
            </entry>
            <entry>
               <para>Instance Variable <anchor id="r1c4-t6"/>
               </para>
            </entry>
            <entry>
               <para>Mapping <anchor id="r1c5-t6"/>
               </para>
            </entry>
            <entry>
               <para>Target <anchor id="r2c1-t6"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Title </para>
            </entry>
            <entry>
               <para>ACME Employee Workflow System </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r3c1-t6"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Classes </para>
            </entry>
            <entry>
               <para>Employee, Address, PhoneNumber, EmailAddress, JobClassification, Project </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r4c1-t6"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Tables </para>
            </entry>
            <entry>
               <para>EMPLOYEE, ADDRESS, PHONE, EMAIL, JOB, PROJECT, PROJ_EMP </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r5c1-t6"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Relationships </para>
            </entry>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>address </para>
            </entry>
            <entry>
               <para>OneToOne </para>
            </entry>
            <entry>
               <para>Address <anchor id="r6c1-t6"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>phoneNumber </para>
            </entry>
            <entry>
               <para>OneToOne </para>
            </entry>
            <entry>
               <para>EmailAddress <anchor id="r7c1-t6"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>emailAddress </para>
            </entry>
            <entry>
               <para>OneToOne </para>
            </entry>
            <entry>
               <para>EmailAddress <anchor id="r8c1-t6"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>job </para>
            </entry>
            <entry>
               <para>OneToOne </para>
            </entry>
            <entry>
               <para>JobClassification <anchor id="r9c1-t6"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>projects </para>
            </entry>
            <entry>
               <para>ManyToMany </para>
            </entry>
            <entry>
               <para>Project </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title>
      <anchor id="Schema_Case_3:_Collapsed_Hierarchy"/>Schema Case 3: Collapsed Hierarchy</title></sect1><sect1><title>A common mistake when you transform an object-oriented design into a relational model, is to build a large hierarchy of tables on the database. This makes querying difficult, because queries against this type of design can require a large number of joins. It is usually a good idea to collapse some of the levels in your inheritance hierarchy into a single table. </title></sect1><sect1><title>The <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-5">Original Schema (Collapsed Hierarchy Case)</ulink> table represents a system that assigns clients to a company's sales representatives. The managers also track the sales representatives that report to them. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-5">Original Schema (Collapsed Hierarchy Case)</ulink></sect1><sect1><title>
      <anchor id="Table_11-5"/>Original Schema (Collapsed Hierarchy Case) </title>Original Schema (Collapsed Hierarchy Case)<informaltable frame="all">
      <tgroup cols="2"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t7"/>Elements <anchor id="r1c2-t7"/>
               </para>
            </entry>
            <entry>
               <para>Details <anchor id="r2c1-t7"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Title </para>
            </entry>
            <entry>
               <para>ACME Sales Force System <anchor id="r3c1-t7"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Classes </para>
            </entry>
            <entry>
               <para>Tables <anchor id="r4c1-t7"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Person </para>
            </entry>
            <entry>
               <para>PERSON <anchor id="r5c1-t7"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>PERSON, EMPLOYEE <anchor id="r6c1-t7"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>SalesRep </para>
            </entry>
            <entry>
               <para>PERSON, EMPLOYEE, REP <anchor id="r7c1-t7"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Staff </para>
            </entry>
            <entry>
               <para>PERSON, EMPLOYEE, STAFF <anchor id="r8c1-t7"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Client </para>
            </entry>
            <entry>
               <para>PERSON, CLIENT <anchor id="r9c1-t7"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Contact </para>
            </entry>
            <entry>
               <para>PERSON, CONTACT </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title>The system suffers from complexity issues that hinder system development and performance. Nearly all queries against the database require large, resource-intensive joins. If you collapse the three-level table hierarchy into a single table, as illustrated in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-6">Optimized Schema (Collapsed Hierarchy Case)</ulink> table, you substantially reduce system complexity. You eliminate joins from the system, and simplify queries. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-6">Optimized Schema (Collapsed Hierarchy Case)</ulink></sect1><sect1><title>
      <anchor id="Table_11-6"/>Optimized Schema (Collapsed Hierarchy Case) </title>Optimized Schema (Collapsed Hierarchy Case)<informaltable frame="all">
      <tgroup cols="2"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t8"/>Elements <anchor id="r1c2-t8"/>
               </para>
            </entry>
            <entry>
               <para>Details <anchor id="r2c1-t8"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Classes </para>
            </entry>
            <entry>
               <para>Tables <anchor id="r3c1-t8"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Person </para>
            </entry>
            <entry>
               <para>none <anchor id="r4c1-t8"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Employee </para>
            </entry>
            <entry>
               <para>EMPLOYEE <anchor id="r5c1-t8"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>SalesRep </para>
            </entry>
            <entry>
               <para>EMPLOYEE <anchor id="r6c1-t8"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Staff </para>
            </entry>
            <entry>
               <para>EMPLOYEE <anchor id="r7c1-t8"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Client </para>
            </entry>
            <entry>
               <para>CLIENT <anchor id="r8c1-t8"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Contact </para>
            </entry>
            <entry>
               <para>CLIENT </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Schema_Case_4:_Choosing_One_Out_of_Many"/>Schema Case 4: Choosing One Out of Many</title></sect1><sect1><title>In a one-to-many relationship, a single source object has a collection of other objects. In some cases, the source object frequently requires one particular object in the collection, but requires the other objects only infrequently. You can reduce the size of the returned result set in this type of case by adding an instance variable for the frequently required object. This lets you access the object without instantiating the other objects in the collection. </title></sect1><sect1><title>The <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-7">Original Schema (Choosing One out of Many Case)</ulink> table represents a system by which an international shipping company tracks the location of packages in transit. When a package moves from one location to another, the system creates a new a location entry for the package in the database. The most common query against any given package is for its current location. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-7">Original Schema (Choosing One out of Many Case)</ulink></sect1><sect1><title>
      <anchor id="Table_11-7"/>Original Schema (Choosing One out of Many Case) </title>Original Schema (Choosing One out of Many Case)<informaltable frame="all">
      <tgroup cols="5"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t9"/>Elements <anchor id="r1c2-t9"/>
               </para>
            </entry>
            <entry>
               <para>Details <anchor id="r1c3-t9"/>
               </para>
            </entry>
            <entry>
               <para>Instance Variable <anchor id="r1c4-t9"/>
               </para>
            </entry>
            <entry>
               <para>Mapping <anchor id="r1c5-t9"/>
               </para>
            </entry>
            <entry>
               <para>Target <anchor id="r2c1-t9"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Title </para>
            </entry>
            <entry>
               <para>ACME Shipping Package Location Tracking system </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r3c1-t9"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Classes </para>
            </entry>
            <entry>
               <para>Package, Location </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r4c1-t9"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Tables </para>
            </entry>
            <entry>
               <para>PACKAGE, LOCATION </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r5c1-t9"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Relationships </para>
            </entry>
            <entry>
               <para>Package </para>
            </entry>
            <entry>
               <para>locations </para>
            </entry>
            <entry>
               <para>OneToMany </para>
            </entry>
            <entry>
               <para>Location </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title>A package in this system can accumulate several location values in its LOCATION collection as it travels to its destination. Reading all locations from the database is resource intensive, especially when the only location of interest is the current location. </title></sect1><sect1><title>To resolve this type of problem, add a specific instance variable that represents the current location. You then add a one-to-one mapping for the instance variable, and use the instance variable to query for the current location. As illustrated in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-7">Original Schema (Choosing One out of Many Case)</ulink> table, because you can now query for the current location without reading all locations associated with the package, this dramatically improves the performance of the system. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-7">Original Schema (Choosing One out of Many Case)</ulink></sect1><sect1><title>
      <anchor id="Table_11-8.7COptimized_Schema_.28Choosing_One_out_of_Many_Case.29"/>Optimized Schema (Choosing One out of Many Case) </title>Optimized Schema (Choosing One out of Many Case)<informaltable frame="all">
      <tgroup cols="5"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t10"/>Elements <anchor id="r1c2-t10"/>
               </para>
            </entry>
            <entry>
               <para>Details <anchor id="r1c3-t10"/>
               </para>
            </entry>
            <entry>
               <para>Instance Variable <anchor id="r1c4-t10"/>
               </para>
            </entry>
            <entry>
               <para>Mapping <anchor id="r1c5-t10"/>
               </para>
            </entry>
            <entry>
               <para>Target <anchor id="r2c1-t10"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Classes </para>
            </entry>
            <entry>
               <para>Package, Location </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r3c1-t10"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Tables </para>
            </entry>
            <entry>
               <para>PACKAGE, LOCATION </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>
                  <anchor id="r4c1-t10"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Relationships </para>
            </entry>
            <entry>
               <para>Package </para>
            </entry>
            <entry>
               <para>locations </para>
            </entry>
            <entry>
               <para>OneToMany </para>
            </entry>
            <entry>
               <para>Location <anchor id="r5c1-t10"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Package </para>
            </entry>
            <entry>
               <para>currentLocation </para>
            </entry>
            <entry>
               <para>OneToOne </para>
            </entry>
            <entry>
               <para>Location </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title>
      <anchor id="Optimizing_Mappings_and_Descriptors"/>Optimizing Mappings and Descriptors</title></sect1><sect1><title>Always use indirection (lazy loading). It is not only critical in optimizing database access, but also allows EclipseLink to make several other optimizations including optimizing its cache access and unit of work processing. See <ulink url="http://wiki.eclipse.org/Configuring_a_Mapping_%28ELUG%29#Configuring_Indirection_.28Lazy_Loading.29">Configuring Indirection (Lazy Loading)</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Mapping_%28ELUG%29#Configuring_Indirection_.28Lazy_Loading.29">Configuring Indirection (Lazy Loading)</ulink></sect1><sect1><title>Avoid using the existence checking option checkCacheThenDatabase on descriptors (see <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#BCGIIBFA">Configuring Cache Existence Checking at the Descriptor Level</ulink>), unless required by the application. The default existence checking behavior offers better performance. </title>checkCacheThenDatabase<ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#BCGIIBFA">Configuring Cache Existence Checking at the Descriptor Level</ulink></sect1><sect1><title>Avoid expensive initialization in the default constructor that EclipseLink uses to instantiate objects. Instead, use lazy initialization or use an EclipseLink instantiation policy (see <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Instantiation_Policy">Configuring Instantiation Policy</ulink>) to configure the descriptor to use a different constructor. </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Instantiation_Policy">Configuring Instantiation Policy</ulink></sect1><sect1><title>Avoid using method access in your EclipseLink mappings (see <ulink url="http://wiki.eclipse.org/Configuring_a_Mapping_%28ELUG%29#Configuring_Method_or_Direct_Field_Accessing_at_the_Mapping_Level">Configuring Method or Direct Field Accessing at the Mapping Level</ulink>), especially if you have expensive or potentially dangerous side-effect code in your get or set methods; use the default direct attribute access instead. </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Mapping_%28ELUG%29#Configuring_Method_or_Direct_Field_Accessing_at_the_Mapping_Level">Configuring Method or Direct Field Accessing at the Mapping Level</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Optimizing_Sessions"/>Optimizing Sessions</title></sect1><sect1><title>Use a Server session in a server environment, not a DatabaseSession. </title>DatabaseSession</sect1><sect1><title>Use the EclipseLink client session instead of remote session. A client session is appropriate for most multiuser Java EE application server environments. </title></sect1><sect1><title>Do not pool client sessions. Pooling sessions offers no performance gains. </title></sect1><sect1><title>We recommend you increase the size of your session read and write connection pools to the desired number of concurrent threads (for example, 50). You configure this in EclipseLink when using an internal connection pool or in the data source when using an external connection pool. </title></sect1><sect1><title>For more information, see the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_for_a_Production_Environment">Optimizing for a Production Environment</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#CServer_and_Client_Sessions">Server and Client Sessions</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_Data_Access_%28ELUG%29#Connection_Pools">Connection Pools</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_for_a_Production_Environment">Optimizing for a Production Environment</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_for_a_Production_Environment">Optimizing for a Production Environment</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#CServer_and_Client_Sessions">Server and Client Sessions</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#CServer_and_Client_Sessions">Server and Client Sessions</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#CServer_and_Client_Sessions">Server and Client Sessions</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_Data_Access_%28ELUG%29#Connection_Pools">Connection Pools</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_Data_Access_%28ELUG%29#Connection_Pools">Connection Pools</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_Data_Access_%28ELUG%29#Connection_Pools">Connection Pools</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Optimizing_Cache"/>Optimizing Cache</title></sect1><sect1><title>Cache coordination (see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Cache_Coordination">Cache Coordination</ulink>) is one way to allow multiple, possibly distributed, instances of a session to broadcast object changes among each other so that each session's cache can be kept up-to-date. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Cache_Coordination">Cache Coordination</ulink></sect1><sect1><title>However, cache coordination is best suited to applications with specific characteristics (see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#hen_to_Use_Cache_CoordinationI">When to Use Cache Coordination</ulink>). Before implementing cache coordination, tune the EclipseLink cache for each class using alternatives such as object identity type (see <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Cache_Type_and_Size_at_the_Descriptor_Level">Configuring Cache Type and Size at the Descriptor Level</ulink>), cache invalidation (see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#CCache_InvalidationI">Cache Invalidation</ulink>), or cache isolation (see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Cache_Isolation">Cache Isolation</ulink>). Doing so lets you configure the optimal cache configuration for each type of class (see the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-9">Identity Map and Cache Configuration by Class Type</ulink> table) and may eliminate the need for distributed cache coordination altogether. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#hen_to_Use_Cache_CoordinationI">When to Use Cache Coordination</ulink>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Cache_Type_and_Size_at_the_Descriptor_Level">Configuring Cache Type and Size at the Descriptor Level</ulink>
   <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#CCache_InvalidationI">Cache Invalidation</ulink>
   <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Cache_Isolation">Cache Isolation</ulink>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-9">Identity Map and Cache Configuration by Class Type</ulink></sect1><sect1><title>
      <anchor id="Table_11-9"/>Identity Map and Cache Configuration by Class Type </title>Identity Map and Cache Configuration by Class Type<informaltable frame="all">
      <tgroup cols="3"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t11"/>Class Type <anchor id="r1c2-t11"/>
               </para>
            </entry>
            <entry>
               <para>Identity Map Options <anchor id="r1c3-t11"/>
               </para>
            </entry>
            <entry>
               <para>Cache Options <anchor id="r2c1-t11"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>read-only </para>
            </entry>
            <entry>
               <para>soft, hard, or full 1 </para>
            </entry>
            <entry>
               <para>
                  <anchor id="r3c1-t11"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>read-mostly </para>
            </entry>
            <entry>
               <para>soft or hard </para>
            </entry>
            <entry>
               <para>cache invalidation or cache coordination <anchor id="r4c1-t11"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>write-mostly </para>
            </entry>
            <entry>
               <para>weak </para>
            </entry>
            <entry>
               <para>cache invalidation </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title>1 If the number of instances is finite.</title>1 </sect1><sect1><title>If you do use cache coordination, use JMS for cache coordination rather than RMI. JMS is more robust, easier to configure, and runs asynchronously. If you require synchronous cache coordination, use RMI. </title></sect1><sect1><title>You can configure a descriptor to control when the EclipseLink runtime will refresh the session cache when an instance of this object type is queried (see <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Cache_Refreshing">Configuring Cache Refreshing</ulink>). We do not recommend the use of Always Refresh or Disable Cache Hits. </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Cache_Refreshing">Configuring Cache Refreshing</ulink>Always RefreshDisable Cache Hits</sect1><sect1><title>Using Always Refresh may result in refreshing the cache on queries when not required or desired. As an alternative, consider configuring cache refresh on a query by query basis (see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#How_to_Refresh_the_Cache">How to Refresh the Cache</ulink>). </title>Always Refresh<ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#How_to_Refresh_the_Cache">How to Refresh the Cache</ulink></sect1><sect1><title>Using Disable Cache Hits instructs EclipseLink to bypass the cache for object read queries based on primary key. This results in a database round trip every time an object read query based on primary key is executed on this object type, negating the performance advantage of the cache. When used in conjunction with Always Refresh, this option ensures that all queries go to the database. This can have a significant impact on performance. These options should only be used in specialized circumstances. </title>Disable Cache HitsAlways Refresh</sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Optimizing_Data_Access"/>Optimizing Data Access</title></sect1><sect1><title>Depending on the type of data source your application accesses, EclipseLink offers a variety of Login options that you can use to tune the performance of low level data reads and writes. </title>Login</sect1><sect1><title>You can use several techniques to improve data access performance for your application. This section discusses some of the more common approaches, including the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Optimize_JDBC_Driver_Properties">How to Optimize JDBC Driver Properties</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Optimize_Data_Format">How to Optimize Data Format</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_Writing_for_Optimization">How to Use Batch Writing for Optimization</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Outer-Join_Reading_with_Inherited_Subclasses">How to Use Outer-Join Reading with Inherited Subclasses</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement </ulink>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">Caching for Optimization</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Optimize_JDBC_Driver_Properties">How to Optimize JDBC Driver Properties</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Optimize_JDBC_Driver_Properties">How to Optimize JDBC Driver Properties</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Optimize_Data_Format">How to Optimize Data Format</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Optimize_Data_Format">How to Optimize Data Format</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Optimize_Data_Format">How to Optimize Data Format</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_Writing_for_Optimization">How to Use Batch Writing for Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_Writing_for_Optimization">How to Use Batch Writing for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_Writing_for_Optimization">How to Use Batch Writing for Optimization</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Outer-Join_Reading_with_Inherited_Subclasses">How to Use Outer-Join Reading with Inherited Subclasses</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Outer-Join_Reading_with_Inherited_Subclasses">How to Use Outer-Join Reading with Inherited Subclasses</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Outer-Join_Reading_with_Inherited_Subclasses">How to Use Outer-Join Reading with Inherited Subclasses</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement </ulink>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">Caching for Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement </ulink>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">Caching for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement </ulink>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">Caching for Optimization</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Optimize_JDBC_Driver_Properties"/>How to Optimize JDBC Driver Properties</title></sect1><sect1><title>Consider the default behavior of the JDBC driver you choose for your application. Some JDBC driver options can affect data access performance. </title></sect1><sect1><title>Some important JDBC driver properties can be configured directly using the Workbench or EclipseLink API (for example, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_JDBC_Fetch_Size_for_Optimization">How to Use JDBC Fetch Size for Optimization</ulink>). </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_JDBC_Fetch_Size_for_Optimization">How to Use JDBC Fetch Size for Optimization</ulink></sect1><sect1><title>JDBC driver properties that are not supported directly by Workbench or EclipseLink API can still be configured as generic JDBC properties that EclipseLink passes to the JDBC driver. </title></sect1><sect1><title>For example, some JDBC drivers, such as Sybase JConnect, perform a database round trip to test whether or not a connection is closed: that is, calling the JDBC driver method isClosed results in a stored procedure call or SQL select. This database round-trip can cause a significant performance reduction. To avoid this, you can disable this behavior: for Sybase JConnect, you can set property name CLOSED_TEST to value INTERNAL. </title>isClosedCLOSED_TESTINTERNAL</sect1><sect1><title>For more information about configuring general JDBC driver properties from within your EclipseLink application, see <ulink url="http://wiki.eclipse.org/Configuring_a_Data_Source_Login_%28ELUG%29#Configuring_Properties">Configuring Properties</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Data_Source_Login_%28ELUG%29#Configuring_Properties">Configuring Properties</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Optimize_Data_Format"/>How to Optimize Data Format</title></sect1><sect1><title>By default, EclipseLink optimizes data access by accessing the data from JDBC in the format the application requires. For example, EclipseLink retrieves long data types from JDBC instead of having the driver return a BigDecimal that EclipseLink would then have to convert into a long. </title>longBigDecimallong</sect1><sect1><title>Some older JDBC drivers do not perform data conversion correctly and conflict with this optimization. In this case, you can disable this optimization (see <ulink url="http://wiki.eclipse.org/Configuring_a_Database_Login_%28ELUG%29#Configuring_Advanced_Options">Configuring Advanced Options</ulink>). </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Database_Login_%28ELUG%29#Configuring_Advanced_Options">Configuring Advanced Options</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Use_Batch_Writing_for_Optimization"/>How to Use Batch Writing for Optimization</title></sect1><sect1><title>Batch writing can improve database performance by sending groups of INSERT, UPDATE, and DELETE statements to the database in a single transaction, rather than individually. </title>INSERTUPDATEDELETE</sect1><sect1><title>When used without parameterized SQL, this is known as dynamic batch writing. </title></sect1><sect1><title>When used with parameterized SQL (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement Caching for Optimization</ulink>), this is known as parameterized batch writing. This allows a repeatedly executed statement, such as a group of inserts of the same type, to be executed as a single statement and a set of bind parameters. This can provide a large performance benefit as the database does not have to parse the batch. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement Caching for Optimization</ulink></sect1><sect1><title>When using batch writing, you can tune the maximum batch writing size. </title></sect1><sect1><title>In JPA applications, you can use persistence unit property eclipselink.jdbc.batch-writing (see <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Use_EclipseLink_JPA_Extensions_for_JDBC_Connection_Communication">EclipseLink JPA Persistence Unit Properties for JDBC Connection Communication</ulink>). </title>eclipselink.jdbc.batch-writing<ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Use_EclipseLink_JPA_Extensions_for_JDBC_Connection_Communication">EclipseLink JPA Persistence Unit Properties for JDBC Connection Communication</ulink></sect1><sect1><title>In POJO applications, you can use setMaxBatchWritingSize method of the Login interface. The meaning of this value depends on whether or not you are using parameterized SQL: </title>setMaxBatchWritingSizeLogin<orderedlist>
      <listitem>
         <title>If you are using parameterized SQL (you configure your Login by calling its bindAllParameters method), the maximum batch writing size is the number of statements to batch with 100 being the default. </title>
      </listitem>
      <listitem>
         <title>If you are using dynamic SQL, the maximum batch writing size is the size of the SQL string buffer in characters with 32000 being the default. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>If you are using parameterized SQL (you configure your Login by calling its bindAllParameters method), the maximum batch writing size is the number of statements to batch with 100 being the default. </title>LoginbindAllParameters<listitem>
      <title>If you are using dynamic SQL, the maximum batch writing size is the size of the SQL string buffer in characters with 32000 being the default. </title>
   </listitem></sect1><sect1><title>If you are using dynamic SQL, the maximum batch writing size is the size of the SQL string buffer in characters with 32000 being the default. </title></sect1><sect1><title>By default, EclipseLink does not enable batch writing because not all databases and JDBC drivers support it. We recommend that you enable batch writing for selected databases and JDBC drivers that support this option. If your JDBC driver does not support batch writing, use the batch writing capabilities of EclipseLink, known as native batch writing (see <ulink url="http://wiki.eclipse.org/Configuring_a_Database_Login_%28ELUG%29#Configuring_JDBC_Options">Configuring JDBC Options</ulink>). </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Database_Login_%28ELUG%29#Configuring_JDBC_Options">Configuring JDBC Options</ulink></sect1><sect1><title>For a more detailed example of using batch writing to optimize write queries, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Batch_Writing_and_Parameterized_SQL">Batch Writing and Parameterized SQL</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Batch_Writing_and_Parameterized_SQL">Batch Writing and Parameterized SQL</ulink></sect1><sect1><title>
      <anchor id="How_to_Use_Outer-Join_Reading_with_Inherited_Subclasses"/>How to Use Outer-Join Reading with Inherited Subclasses</title></sect1><sect1><title>You can configure an object-level read query to allow inherited subclasses to be outer-joined to avoid the cost of a single query per class, as the following exampple shows. </title></sect1><sect1><title>
      <anchor id="Example_11-2.7CConfiguring_an_ObjectLevelReadQuery_to_Outer-Join_Inherited_Subclasses"/>Configuring an ObjectLevelReadQuery to Outer-Join Inherited Subclasses </title>Configuring an ObjectLevelReadQuery to Outer-Join Inherited Subclasses</sect1><sect1><title>objectLevelReadQuery.setShouldOuterJoinSubclasses(true);</title></sect1><sect1><title>You can configure a descriptor's InheritancePolicy to allow the same thing, as the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-3">Configuring a Descriptor to Allow Inherited Subclasses to be Outer-Joined</ulink> example shows. By configuring the InheritancePolicy, this option applies to all queries on the descriptor's class. </title>InheritancePolicy<ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-3">Configuring a Descriptor to Allow Inherited Subclasses to be Outer-Joined</ulink>InheritancePolicy</sect1><sect1><title>
      <anchor id="Example_11-3"/>Configuring a Descriptor to Allow Inherited Subclasses to be Outer-Joined </title>Configuring a Descriptor to Allow Inherited Subclasses to be Outer-Joined</sect1><sect1><title>descriptor.getInheritancePolicy().setShouldOuterJoinSubclasses(true);</title></sect1><sect1><title>For more information, see the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_Descriptors_%28ELUG%29#Descriptors_and_Inheritance">Descriptors and Inheritance</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Reading_Subclasses_on_Queries">Configuring Reading Subclasses on Queries</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Join_Reading_and_Object-Level_Read_Queries">Join Reading and Object-Level Read Queries</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_Descriptors_%28ELUG%29#Descriptors_and_Inheritance">Descriptors and Inheritance</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_Descriptors_%28ELUG%29#Descriptors_and_Inheritance">Descriptors and Inheritance</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Reading_Subclasses_on_Queries">Configuring Reading Subclasses on Queries</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Reading_Subclasses_on_Queries">Configuring Reading Subclasses on Queries</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Reading_Subclasses_on_Queries">Configuring Reading Subclasses on Queries</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Join_Reading_and_Object-Level_Read_Queries">Join Reading and Object-Level Read Queries</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Join_Reading_and_Object-Level_Read_Queries">Join Reading and Object-Level Read Queries</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Join_Reading_and_Object-Level_Read_Queries">Join Reading and Object-Level Read Queries</ulink></sect1><sect1><title>
      <anchor id="How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization"/>How to Use Parameterized SQL (Parameter Binding) and Prepared Statement Caching for Optimization</title></sect1><sect1><title>Using parameterized SQL, you can keep the overall length of an SQL query from exceeding the statement length limit that your JDBC driver or database server imposes. </title></sect1><sect1><title>Using parameterized SQL and prepared statement caching, you can improve performance by reducing the number of times the database SQL engine parses and prepares SQL for a frequently called query. </title></sect1><sect1><title>By default, EclipseLink enables parameterized SQL but not prepared statement caching. We recommend that you enable statement caching either in EclipseLink when using an internal connection pool or in the data source when using an external connection pool and choose a statement cache size appropriate for your application. </title></sect1><sect1><title>Note: When parameter binding is enabled, querying a database field with a fixed CHAR length may result in no results returned. This is because the white space may not be trimmed. Instead, you can: </title>Note<orderedlist>
      <listitem>
         <title>Use a Variable length column type (for example, VARCHAR). </title>
      </listitem>
      <listitem>
         <title>Force the proper padding manually (either in your application or in a converter). </title>
      </listitem>
      <listitem>
         <title>Not use parameter binding. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>Use a Variable length column type (for example, VARCHAR). </title>
   <listitem>
      <title>Force the proper padding manually (either in your application or in a converter). </title>
   </listitem></sect1><sect1><title>Force the proper padding manually (either in your application or in a converter). </title>
   <listitem>
      <title>Not use parameter binding. </title>
   </listitem></sect1><sect1><title>Not use parameter binding. </title></sect1><sect1><title>Not all JDBC drivers support all JDBC binding options (see <ulink url="http://wiki.eclipse.org/Configuring_a_Database_Login_%28ELUG%29#Configuring_JDBC_Options">Configuring JDBC Options</ulink>). Selecting a combination of options may result in different behavior from one driver to another. Before selecting JDBC options, consult your JDBC driver documentation. When choosing binding options, consider the following approach: </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Database_Login_%28ELUG%29#Configuring_JDBC_Options">Configuring JDBC Options</ulink>
   <orderedlist>
      <listitem>
         <title>Try binding all parameters with all other binding options disabled. </title>
      </listitem>
      <listitem>
         <title>If this fails to bind some large parameters, consider enabling one of the following options, depending on the parameter's data type and the binding options that your JDBC driver supports: </title>
      </listitem>
      <listitem>
         <title>If this fails to bind some large parameters, try enabling streams for binding.Typically, configuring string or byte array binding will invoke streams for binding. If not, explicitly configuring streams for binding may help. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>Try binding all parameters with all other binding options disabled. </title>
   <listitem>
      <title>If this fails to bind some large parameters, consider enabling one of the following options, depending on the parameter's data type and the binding options that your JDBC driver supports: </title>
   </listitem></sect1><sect1><title>If this fails to bind some large parameters, consider enabling one of the following options, depending on the parameter's data type and the binding options that your JDBC driver supports: </title></sect1><sect1><title>To bind large String parameters, try enabling string binding.If large String parameters still fail to bind, consider adjusting the maximum String size. EclipseLink sets the maximum String size to 32000 characters by default. </title>StringStringStringString<listitem>
      <title>To bind large Byte array parameters, try enabling byte array binding. </title>
   </listitem></sect1><sect1><title>To bind large Byte array parameters, try enabling byte array binding. </title>Byte<listitem>
      <title>If this fails to bind some large parameters, try enabling streams for binding.Typically, configuring string or byte array binding will invoke streams for binding. If not, explicitly configuring streams for binding may help. </title>
   </listitem></sect1><sect1><title>If this fails to bind some large parameters, try enabling streams for binding.Typically, configuring string or byte array binding will invoke streams for binding. If not, explicitly configuring streams for binding may help. </title></sect1><sect1><title>For Java EE applications that use EclipseLink external connection pools, you must configure parameterized SQL in EclipseLink, but you cannot configure prepared statement caching in EclipseLink. In this case, you must configure prepared statement caching in the application server connection pool. For example, in OC4J, if you configure your data-source.xml file with a managed data-source (where connection-driver is oracle.jdbc.OracleDriver, and class is oracle.j2ee.sql.DriverManagerDataSource), you can configure a non-zero num-cached-statements that enables JDBC statement caching and defines the maximum number of statements cached. </title>data-source.xmldata-sourceconnection-driveroracle.jdbc.OracleDriverclassoracle.j2ee.sql.DriverManagerDataSourcenum-cached-statements</sect1><sect1><title>For applications that use EclipseLink internal connection pools, you can configure parameterized SQL and prepared statement caching. </title></sect1><sect1><title>You can configure parameterized SQL and prepared statement caching at the following levels: </title>
   <orderedlist>
      <listitem>
         <title>session database login level–applies to all queries and provides additional parameter binding API to alleviate the limit imposed by some drivers on SQL statement size.We recommend that you use this approach.For more information, see the following: </title>
      </listitem>
      <listitem>
         <title>project level–applies to all named queries (see <ulink url="http://wiki.eclipse.org/Configuring_a_Relational_Project_%28ELUG%29#Configuring_Named_Query_Parameterized_SQL_and_Statement_Caching_at_the_Project_Level">Configuring Named Query Parameterized SQL and Statement Caching at the Project Level</ulink>); </title>
      </listitem>
      <listitem>
         <title>descriptor level–applies on a per-named-query basis (see <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Named_Query_Options">Configuring Named Query Options</ulink>); </title>
      </listitem>
      <listitem>
         <title>query level–applies on a per-query basis (see <ulink url="http://wiki.eclipse.org/Using_Basic_Query_API_%28ELUG%29#How_to_Use_Parameterized_SQL_and_Statement_Caching_in_a_DatabaseQuery">How to Use Parameterized SQL and Statement Caching in a DatabaseQuery</ulink>). </title>
      </listitem>
   </orderedlist></sect1><sect1><title>session database login level–applies to all queries and provides additional parameter binding API to alleviate the limit imposed by some drivers on SQL statement size.We recommend that you use this approach.For more information, see the following: </title></sect1><sect1><title>JPA applications: see persistence unit properties eclipselink.jdbc.bind-parameters and eclipselink.jdbc.cache-statements in <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Use_EclipseLink_JPA_Extensions_for_JDBC_Connection_Communication">EclipseLink JPA Persistence Unit Properties for JDBC Connection Communication</ulink>. </title>eclipselink.jdbc.bind-parameterseclipselink.jdbc.cache-statements<ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Use_EclipseLink_JPA_Extensions_for_JDBC_Connection_Communication">EclipseLink JPA Persistence Unit Properties for JDBC Connection Communication</ulink>
   <listitem>
      <title>POJO applications: see <ulink url="http://wiki.eclipse.org/Configuring_a_Database_Login_%28ELUG%29#Configuring_JDBC_Options">Configuring JDBC Options</ulink> 
      </title>
   </listitem></sect1><sect1><title>POJO applications: see <ulink url="http://wiki.eclipse.org/Configuring_a_Database_Login_%28ELUG%29#Configuring_JDBC_Options">Configuring JDBC Options</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Database_Login_%28ELUG%29#Configuring_JDBC_Options">Configuring JDBC Options</ulink>
   <listitem>
      <title>project level–applies to all named queries (see <ulink url="http://wiki.eclipse.org/Configuring_a_Relational_Project_%28ELUG%29#Configuring_Named_Query_Parameterized_SQL_and_Statement_Caching_at_the_Project_Level">Configuring Named Query Parameterized SQL and Statement Caching at the Project Level</ulink>); </title>
   </listitem></sect1><sect1><title>project level–applies to all named queries (see <ulink url="http://wiki.eclipse.org/Configuring_a_Relational_Project_%28ELUG%29#Configuring_Named_Query_Parameterized_SQL_and_Statement_Caching_at_the_Project_Level">Configuring Named Query Parameterized SQL and Statement Caching at the Project Level</ulink>); </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Relational_Project_%28ELUG%29#Configuring_Named_Query_Parameterized_SQL_and_Statement_Caching_at_the_Project_Level">Configuring Named Query Parameterized SQL and Statement Caching at the Project Level</ulink>
   <listitem>
      <title>descriptor level–applies on a per-named-query basis (see <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Named_Query_Options">Configuring Named Query Options</ulink>); </title>
   </listitem></sect1><sect1><title>descriptor level–applies on a per-named-query basis (see <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Named_Query_Options">Configuring Named Query Options</ulink>); </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Named_Query_Options">Configuring Named Query Options</ulink>
   <listitem>
      <title>query level–applies on a per-query basis (see <ulink url="http://wiki.eclipse.org/Using_Basic_Query_API_%28ELUG%29#How_to_Use_Parameterized_SQL_and_Statement_Caching_in_a_DatabaseQuery">How to Use Parameterized SQL and Statement Caching in a DatabaseQuery</ulink>). </title>
   </listitem></sect1><sect1><title>query level–applies on a per-query basis (see <ulink url="http://wiki.eclipse.org/Using_Basic_Query_API_%28ELUG%29#How_to_Use_Parameterized_SQL_and_Statement_Caching_in_a_DatabaseQuery">How to Use Parameterized SQL and Statement Caching in a DatabaseQuery</ulink>). </title>
   <ulink url="http://wiki.eclipse.org/Using_Basic_Query_API_%28ELUG%29#How_to_Use_Parameterized_SQL_and_Statement_Caching_in_a_DatabaseQuery">How to Use Parameterized SQL and Statement Caching in a DatabaseQuery</ulink></sect1><sect1><title>
      <anchor id="Optimizing_Queries"/>Optimizing Queries</title></sect1><sect1><title>EclipseLink provides an extensive query API for reading, writing, and updating data. This section describes ways of optimizing query performance in various circumstances. </title></sect1><sect1><title>Before optimizing queries, consider the optimization suggestions in <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Data_Access">Optimizing Data Access</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Data_Access">Optimizing Data Access</ulink></sect1><sect1><title>This section includes information on the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL and Prepared Statement Caching for Optimization</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Named_Queries_for_Optimization">How to Use Named Queries for Optimization</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_and_Join_Reading_for_Optimization">How to Use Batch and Join Reading for Optimization</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Partial_Object_Queries_and_Fetch_Groups_for_Optimization">How to Use Partial Object Queries and Fetch Groups for Optimization</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Read-Only_Queries_for_Optimization">How to Use Read-Only Queries for Optimization</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_JDBC_Fetch_Size_for_Optimization">How to Use JDBC Fetch Size for Optimization</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization">How to Use Cursored Streams and Scrollable Cursors for Optimization</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Result_Set_Pagination_for_Optimization">How to Use Result Set Pagination for Optimization</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Read_Optimization_Examples">Read Optimization Examples</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Write_Optimization_Examples">Write Optimization Examples</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL and Prepared Statement Caching for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL and Prepared Statement Caching for Optimization</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Named_Queries_for_Optimization">How to Use Named Queries for Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Named_Queries_for_Optimization">How to Use Named Queries for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Named_Queries_for_Optimization">How to Use Named Queries for Optimization</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_and_Join_Reading_for_Optimization">How to Use Batch and Join Reading for Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_and_Join_Reading_for_Optimization">How to Use Batch and Join Reading for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_and_Join_Reading_for_Optimization">How to Use Batch and Join Reading for Optimization</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Partial_Object_Queries_and_Fetch_Groups_for_Optimization">How to Use Partial Object Queries and Fetch Groups for Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Partial_Object_Queries_and_Fetch_Groups_for_Optimization">How to Use Partial Object Queries and Fetch Groups for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Partial_Object_Queries_and_Fetch_Groups_for_Optimization">How to Use Partial Object Queries and Fetch Groups for Optimization</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Read-Only_Queries_for_Optimization">How to Use Read-Only Queries for Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Read-Only_Queries_for_Optimization">How to Use Read-Only Queries for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Read-Only_Queries_for_Optimization">How to Use Read-Only Queries for Optimization</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_JDBC_Fetch_Size_for_Optimization">How to Use JDBC Fetch Size for Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_JDBC_Fetch_Size_for_Optimization">How to Use JDBC Fetch Size for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_JDBC_Fetch_Size_for_Optimization">How to Use JDBC Fetch Size for Optimization</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization">How to Use Cursored Streams and Scrollable Cursors for Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization">How to Use Cursored Streams and Scrollable Cursors for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization">How to Use Cursored Streams and Scrollable Cursors for Optimization</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Result_Set_Pagination_for_Optimization">How to Use Result Set Pagination for Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Result_Set_Pagination_for_Optimization">How to Use Result Set Pagination for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Result_Set_Pagination_for_Optimization">How to Use Result Set Pagination for Optimization</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Read_Optimization_Examples">Read Optimization Examples</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Read_Optimization_Examples">Read Optimization Examples</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Read_Optimization_Examples">Read Optimization Examples</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Write_Optimization_Examples">Write Optimization Examples</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Write_Optimization_Examples">Write Optimization Examples</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Write_Optimization_Examples">Write Optimization Examples</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Use_Parameterized_SQL_and_Prepared_Statement_Caching_for_Optimization"/>How to Use Parameterized SQL and Prepared Statement Caching for Optimization</title></sect1><sect1><title>These features let you cache and reuse a query's preparsed database statement when the query is reexecuted. </title></sect1><sect1><title>For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement Caching for Optimization</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_.28Parameter_Binding.29_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL (Parameter Binding) and Prepared Statement Caching for Optimization</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Use_Named_Queries_for_Optimization"/>How to Use Named Queries for Optimization</title></sect1><sect1><title>Whenever possible, use named queries in your application. Named queries help you avoid duplication, are easy to maintain and reuse, and easily add complex query behavior to the application. Using named queries also allows for the query to be prepared once, and for the SQL generation to be cached. </title></sect1><sect1><title>For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Named_Queries">Named Queries</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Named_Queries">Named Queries</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Use_Batch_and_Join_Reading_for_Optimization"/>How to Use Batch and Join Reading for Optimization</title></sect1><sect1><title>To optimize database read operations, EclipseLink supports both batch and join reading. When you use these techniques, you dramatically decrease the number of times you access the database during a read operation, especially when your result set contains a large number of objects. </title></sect1><sect1><title>For more information, see the following: </title>
   <orderedlist>
      <listitem>
         <title>For JPA applications, see the following: </title>
      </listitem>
      <listitem>
         <title>For POJO applications, see the following: </title>
      </listitem>
   </orderedlist></sect1><sect1><title>For JPA applications, see the following: </title></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Use_the_.40JoinFetch_Annotation">How to Use the @JoinFetch Annotation</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Use_the_.40JoinFetch_Annotation">How to Use the @JoinFetch Annotation</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Join_Fetch">Join Fetch Query Hint</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Join_Fetch">Join Fetch Query Hint</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Join_Fetch">Join Fetch Query Hint</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Batch">Batch Query Hint</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Batch">Batch Query Hint</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Batch">Batch Query Hint</ulink>
   <listitem>
      <title>For POJO applications, see the following: </title>
   </listitem></sect1><sect1><title>For POJO applications, see the following: </title></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Join_Reading_and_Object-Level_Read_Queries">Join Reading and Object-Level Read Queries</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Join_Reading_and_Object-Level_Read_Queries">Join Reading and Object-Level Read Queries</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_Basic_Query_API_%28ELUG%29#Using_Batch_Reading">Using Batch Reading</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_Basic_Query_API_%28ELUG%29#Using_Batch_Reading">Using Batch Reading</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_Basic_Query_API_%28ELUG%29#Using_Batch_Reading">Using Batch Reading</ulink></sect1><sect1><title>
      <anchor id="How_to_Use_Partial_Object_Queries_and_Fetch_Groups_for_Optimization"/>How to Use Partial Object Queries and Fetch Groups for Optimization</title></sect1><sect1><title>Partial object queries let you retrieve partially populated objects from the database rather than complete objects. </title></sect1><sect1><title>When using weaving with JPA or POJO applications, you can use fetch groups to accomplish the same performance optimization. </title></sect1><sect1><title>For more information about partial object reading, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Partial_Object_Queries">Partial Object Queries</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Partial_Object_Queries">Partial Object Queries</ulink></sect1><sect1><title>For more information about fetch groups, see <ulink url="http://wiki.eclipse.org/Introduction_to_Descriptors_%28ELUG%29#Fetch_Groups">Fetch Groups</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_Descriptors_%28ELUG%29#Fetch_Groups">Fetch Groups</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Use_Read-Only_Queries_for_Optimization"/>How to Use Read-Only Queries for Optimization</title></sect1><sect1><title>You can configure an object-level read query as read-only, as this shows. When you execute such a query in the context of a UnitOfWork (or EclipseLink JPA persistence provider), EclipseLink returns a read-only, non-registered object. You can improve performance by querying read-only data in this way because the read-only objects need not be registered or checked for changes. </title>UnitOfWork</sect1><sect1><title>Configuring an ObjectLevelReadQuery as Read-Only </title>Configuring an ObjectLevelReadQuery as Read-Only</sect1><sect1><title>objectLevelReadQuery.setIsReadOnly(true);</title></sect1><sect1><title>For more information, see the following: </title>
   <orderedlist>
      <listitem>
         <title>For JPA applications, see the following: </title>
      </listitem>
      <listitem>
         <title>For POJO applications, see the following: </title>
      </listitem>
   </orderedlist></sect1><sect1><title>For JPA applications, see the following: </title></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Read_Only">Read Only Query Hint</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Read_Only">Read Only Query Hint</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Use_the_.40ReadOnly_Annotation">How to Use the ReadOnly Annotation</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Use_the_.40ReadOnly_Annotation">How to Use the ReadOnly Annotation</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Use_the_.40ReadOnly_Annotation">How to Use the ReadOnly Annotation</ulink>
   <listitem>
      <title>For POJO applications, see the following: </title>
   </listitem></sect1><sect1><title>For POJO applications, see the following: </title></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Read-Only_Descriptors">Configuring Read-Only Descriptors</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Read-Only_Descriptors">Configuring Read-Only Descriptors</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Read-Only_Query">Read-Only Query</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Read-Only_Query">Read-Only Query</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Read-Only_Query">Read-Only Query</ulink></sect1><sect1><title>
      <anchor id="How_to_Use_JDBC_Fetch_Size_for_Optimization"/>How to Use JDBC Fetch Size for Optimization</title></sect1><sect1><title>The JDBC fetch size gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed. </title></sect1><sect1><title>For large queries that return a large number of objects you can configure the row fetch size used in the query to improve performance by reducing the number database hits required to satisfy the selection criteria. </title></sect1><sect1><title>Most JDBC drivers default to a fetch size of 10, so if you are reading 1000 objects, increasing the fetch size to 256 can significantly reduce the time required to fetch the query's results. The optimal fetch size is not always obvious. Usually, a fetch size of one half or one quarter of the total expected result size is optimal. Note that if you are unsure of the result set size, incorrectly setting a fetch size too large or too small can decrease performance. </title></sect1><sect1><title>Set the query fetch size with ReadQuery method setFetchSize, as the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-5">JDBC Driver Fetch Size</ulink> example shows. Alternatively, you can use ReadQuery method setMaxRows to set the limit for the maximum number of rows that any ResultSet can contain. </title>ReadQuerysetFetchSize<ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-5">JDBC Driver Fetch Size</ulink>ReadQuerysetMaxRowsResultSet</sect1><sect1><title>
      <anchor id="Example_11-5"/>JDBC Driver Fetch Size </title>JDBC Driver Fetch Size</sect1><sect1><title>// Create query and set Employee as its reference class</title></sect1><sect1><title>ReadAllQuery query = new ReadAllQuery(Employee.class);</title></sect1><sect1><title>ExpressionBuilder builder = query.getExpressionBuilder(); </title></sect1><sect1><title>query.setSelectionCriteria(builder.get("id").greaterThan(100));</title></sect1><sect1><title> </title></sect1><sect1><title>// Set the JDBC fetch size</title></sect1><sect1><title>query.setFetchSize(50);</title></sect1><sect1><title> </title></sect1><sect1><title>// Configure the query to return results as a ScrollableCursor</title></sect1><sect1><title>query.useScrollableCursor();</title></sect1><sect1><title> </title></sect1><sect1><title>// Execute the query</title></sect1><sect1><title>ScrollableCursor cursor = (ScrollableCursor) session.executeQuery(query);</title></sect1><sect1><title> </title></sect1><sect1><title>// Iterate over the results</title></sect1><sect1><title> </title></sect1><sect1><title>while (cursor.hasNext()) {</title></sect1><sect1><title>    System.out.println(cursor.next().toString());</title></sect1><sect1><title>}</title></sect1><sect1><title>cursor.close();</title></sect1><sect1><title>In this example, when you execute the query, the JDBC driver retrieves the first 50 rows from the database (or all rows if less than 50 rows satisfy the selection criteria). As you iterate over the first 50 rows, each time you call cursor.next(), the JDBC driver returns a row from local memory–it does not need to retrieve the row from the database. When you try to access the fifty first row (assuming there are more than 50 rows that satisfy the selection criteria), the JDBC driver again goes to the database and retrieves another 50 rows. In this way, 100 rows are returned with only two database hits. </title>cursor.next()</sect1><sect1><title>If you specify a value of zero (default; means the fetch size is not set), then the hint is ignored and the JDBC driver's default is used. </title></sect1><sect1><title>For more information see the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Fetch_Size">Fetch Size Query Hint</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Fetch_Size">Fetch Size Query Hint</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Fetch_Size">Fetch Size Query Hint</ulink></sect1><sect1><title>
      <anchor id="How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization"/>How to Use Cursored Streams and Scrollable Cursors for Optimization</title></sect1><sect1><title>You can configure a query to retrieve data from the database using a cursored Java stream or scrollable cursor. This lets you view a result set in manageable increments rather than as a complete collection. This is useful when you have a large result set. You can further tune performance by configuring the JDBC driver fetch size used (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_JDBC_Fetch_Size_for_Optimization">How to Use JDBC Fetch Size for Optimization|</ulink>). </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_JDBC_Fetch_Size_for_Optimization">How to Use JDBC Fetch Size for Optimization|</ulink></sect1><sect1><title>For more information about scrollable cursors, see <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#Handling_Cursor_and_Stream_Query_Results">Handling Cursor and Stream Query Results</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#Handling_Cursor_and_Stream_Query_Results">Handling Cursor and Stream Query Results</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Use_Result_Set_Pagination_for_Optimization"/>How to Use Result Set Pagination for Optimization</title></sect1><sect1><title>As this figure shows, using ReadQuery methods setMaxRows(maxRows) and setFirstResult(firstResult), you can configure a query to retrieve a result set in pages, that is, a partial result as a List of pageSize (or less) results. </title>ReadQuerysetMaxRows(maxRows)setFirstResult(firstResult)ListpageSize</sect1><sect1><title>
      <anchor id="Figure_11-1"/>Using Result Set Pagination </title>Using Result Set Pagination</sect1><sect1><title>
      <inlinegraphic fileref="http://wiki.eclipse.org/images/8/88/Page.gif" width="4.1354inch"
                     depth="2.3752inch"/>
   </title></sect1><sect1><title>In this example, for the first query invocation, pageSize=3, maxRows=pageSize, and firstResult=0. This returns a List of results 00 through 02. </title>pageSize=3maxRows=pageSizefirstResult=00002</sect1><sect1><title>For each subsequent query invocation, you increment maxRows=maxRows+pageSize and firstResult=firstResult+pageSize. This returns a new List for each page of results 03 through 05, 06 through 08, and so on. </title>maxRows=maxRows+pageSizefirstResult=firstResult+pageSizeList03050608</sect1><sect1><title>Typically, you use this approach when you do not necessarily need to process the entire result set. For example, when a user wishes to scan the result set a page at a time looking for a particular result and may abandon the query after the desired record is found. </title></sect1><sect1><title>The advantage of this approach over cursors is that it does not require any state or live connection on the server; you only need to store the firstResult index on the client. This makes it useful for paging through a Web result. </title>firstResult</sect1><sect1><title>For more information, see the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#Handling_Query_Results_Using_Pagination">Handling Query Results Using Pagination</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization">How to Use Cursored Streams and Scrollable Cursors for Optimization</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#Handling_Query_Results_Using_Pagination">Handling Query Results Using Pagination</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#Handling_Query_Results_Using_Pagination">Handling Query Results Using Pagination</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization">How to Use Cursored Streams and Scrollable Cursors for Optimization</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization">How to Use Cursored Streams and Scrollable Cursors for Optimization</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization">How to Use Cursored Streams and Scrollable Cursors for Optimization</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Read_Optimization_Examples"/>Read Optimization Examples</title></sect1><sect1><title>EclipseLink provides the read optimization features listed in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-10">Read Optimization Features</ulink> table. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-10">Read Optimization Features</ulink></sect1><sect1><title>This section includes the following read optimization examples: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_1:_Displaying_Names_in_a_List">Reading Case 1: Displaying Names in a List</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_2:_Batch_Reading_Objects">Reading Case 2: Batch Reading Objects</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_3:_Using_Complex_Custom_SQL_Queries">Reading Case 3: Using Complex Custom SQL Queries</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_4:_Using_View_Objects">Reading Case 4: Using View Objects</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_5:_Inheritance_Subclass_Outer-Joining">Reading Case 5: Inheritance Subclass Outer-Joining</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_1:_Displaying_Names_in_a_List">Reading Case 1: Displaying Names in a List</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_1:_Displaying_Names_in_a_List">Reading Case 1: Displaying Names in a List</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_2:_Batch_Reading_Objects">Reading Case 2: Batch Reading Objects</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_2:_Batch_Reading_Objects">Reading Case 2: Batch Reading Objects</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_2:_Batch_Reading_Objects">Reading Case 2: Batch Reading Objects</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_3:_Using_Complex_Custom_SQL_Queries">Reading Case 3: Using Complex Custom SQL Queries</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_3:_Using_Complex_Custom_SQL_Queries">Reading Case 3: Using Complex Custom SQL Queries</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_3:_Using_Complex_Custom_SQL_Queries">Reading Case 3: Using Complex Custom SQL Queries</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_4:_Using_View_Objects">Reading Case 4: Using View Objects</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_4:_Using_View_Objects">Reading Case 4: Using View Objects</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_4:_Using_View_Objects">Reading Case 4: Using View Objects</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_5:_Inheritance_Subclass_Outer-Joining">Reading Case 5: Inheritance Subclass Outer-Joining</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_5:_Inheritance_Subclass_Outer-Joining">Reading Case 5: Inheritance Subclass Outer-Joining</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_5:_Inheritance_Subclass_Outer-Joining">Reading Case 5: Inheritance Subclass Outer-Joining</ulink></sect1><sect1><title>
      <anchor id="Table_11-10"/>Read Optimization Features </title>Read Optimization Features<informaltable frame="all">
      <tgroup cols="3"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t12"/>Feature <anchor id="r1c2-t12"/>
               </para>
            </entry>
            <entry>
               <para>Function <anchor id="r1c3-t12"/>
               </para>
            </entry>
            <entry>
               <para>Performance Technique <anchor id="r2c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Unit of work </para>
            </entry>
            <entry>
               <para>Tracks object changes within the unit of work. </para>
            </entry>
            <entry>
               <para>To minimize the amount of tracking required, registers only those objects that will change.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Transactions_%28ELUG%29">Introduction to EclipseLink Transactions</ulink>. <anchor id="r3c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Indirection (lazy loading) </para>
            </entry>
            <entry>
               <para>Uses indirection objects to defer the loading and processing of relationships. </para>
            </entry>
            <entry>
               <para>Provides a major performance benefit. It allows database access to be optimized and allows EclipseLink to internally make several optimizations in caching and unit of work. <anchor id="r4c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Soft cache, weak identity map </para>
            </entry>
            <entry>
               <para>Offers client-side caching for objects read from database, and drops objects from the cache when memory becomes low. </para>
            </entry>
            <entry>
               <para>Reduces database calls and improves memory performance.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Cache_Type_and_Object_Identity">Cache Type and Object Identity</ulink>. <anchor id="r5c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Weak identity map </para>
            </entry>
            <entry>
               <para>Offers client-side caching for objects. </para>
            </entry>
            <entry>
               <para>Reduces database access and maintains a cache of all referenced objects.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Cache_Type_and_Object_Identity">Cache Type and Object Identity</ulink>. <anchor id="r6c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Batch reading and joining </para>
            </entry>
            <entry>
               <para>Reduces database access by batching many queries into a single query that reads more data. </para>
            </entry>
            <entry>
               <para>Dramatically reduces the number of database accesses required to perform a read query.For more information, see <ulink url="http://wiki.eclipse.org/Using_Basic_Query_API_%28ELUG%29#Using_Batch_Reading">Using Batch Reading</ulink> and <ulink url="http://wiki.eclipse.org/Using_Basic_Query_API_%28ELUG%29#Using_Join_Reading_with_ObjectLevelReadQuery">Using Join Reading with ObjectLevelReadQuery</ulink>. <anchor id="r7c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Partial object reading and fetch groups. </para>
            </entry>
            <entry>
               <para>Allows reading of a subset of a result set of the object's attributes. </para>
            </entry>
            <entry>
               <para>Reduces the amount of data read from the database.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Partial_Object_Queries">Partial Object Queries</ulink>.For more information about fetch groups, see <ulink url="http://wiki.eclipse.org/Introduction_to_Descriptors_%28ELUG%29#Fetch_Groups">Fetch Groups</ulink>. <anchor id="r8c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Report query </para>
            </entry>
            <entry>
               <para>Similar to partial object reading, but returns only the data instead of the objects. </para>
            </entry>
            <entry>
               <para>Supports complex reporting functions such as aggregation and group-by functions. Also lets you compute complex results on the database, instead of reading the objects into the application and computing the results locally.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Report_Query">Report Query</ulink>. <anchor id="r9c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Read-only query </para>
            </entry>
            <entry>
               <para>EclipseLink returns a read-only, non-registered object. </para>
            </entry>
            <entry>
               <para>The read-only objects need not be registered or checked for changes.For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Read-Only_Queries_for_Optimization">How to Use Read-Only Queries for Optimization</ulink> 
                  <anchor id="r10c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>JDBC fetch size and ReadQuery first result maximum rows </para>
            </entry>
            <entry>
               <para>Reduces the number of database hits required to return all the rows that satisfy selection criteria. </para>
            </entry>
            <entry>
               <para>For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_JDBC_Fetch_Size_for_Optimization">How to Use JDBC Fetch Size for Optimization</ulink>. <anchor id="r11c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Cursors </para>
            </entry>
            <entry>
               <para>Lets you view a large result set in manageable increments rather than as a complete collection </para>
            </entry>
            <entry>
               <para>For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization">How to Use Cursored Streams and Scrollable Cursors for Optimization</ulink> 
                  <anchor id="r12c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Inheritance subclass outer joins </para>
            </entry>
            <entry>
               <para>Allows queries against an inheritance superclass that can read all of its subclasses in a single query, instead of multiple queries, with or without a view. </para>
            </entry>
            <entry>
               <para>For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Reading_Case_5:_Inheritance_Subclass_Outer-Joining">Reading Case 5: Inheritance Subclass Outer-Joining</ulink>. <anchor id="r13c1-t12"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Soft identity map </para>
            </entry>
            <entry>
               <para>Similar to the weak identity map, except that the map uses soft references instead of weak references. This method allows full garbage collection and provides full caching and guaranteed identity </para>
            </entry>
            <entry>
               <para>Allows for optimal caching of the objects without the overhead of a sub-cache, while still allowing the JVM to garbage collect the objects if memory is low.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Soft_Identity_Map">Soft Identity Map</ulink>. </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Reading_Case_1:_Displaying_Names_in_a_List"/>Reading Case 1: Displaying Names in a List</title></sect1><sect1><title>An application may ask the user to choose an element from a list. Because the list displays only a subset of the information contained in the objects, it is not necessary to query for all information for objects from the database. </title></sect1><sect1><title>EclipseLink features that optimize these types of operations include the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Partial_Object_Reading">Partial Object Reading</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Report_Query">Report Query</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Fetch_Groups">Fetch Groups</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Partial_Object_Reading">Partial Object Reading</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Partial_Object_Reading">Partial Object Reading</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Report_Query">Report Query</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Report_Query">Report Query</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Report_Query">Report Query</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Fetch_Groups">Fetch Groups</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Fetch_Groups">Fetch Groups</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Fetch_Groups">Fetch Groups</ulink></sect1><sect1><title>These features let you query only the information required to display the list. The user can then select an object from the list. </title></sect1><sect1><title>
      <anchor id="Example_11-6"/>No Optimization </title>No Optimization</sect1><sect1><title>JPA </title></sect1><sect1><title>/* Read all the employees from the database, ask the user to choose one and return it. */</title></sect1><sect1><title>/* This must read in all the information for all the employees */</title></sect1><sect1><title>ListBox list;</title></sect1><sect1><title> </title></sect1><sect1><title>// Fetch data from database and add to list box</title></sect1><sect1><title>List employees = entityManager.createQuery("Select e from Employee e").getResultList();</title></sect1><sect1><title>list.addAll(employees);</title></sect1><sect1><title> </title></sect1><sect1><title>// Display list box</title></sect1><sect1><title>....</title></sect1><sect1><title> </title></sect1><sect1><title>// Get selected employee from list</title></sect1><sect1><title>Employee selectedEmployee = (Employee) list.getSelectedItem();</title></sect1><sect1><title> </title></sect1><sect1><title>return selectedEmployee;</title></sect1><sect1><title>Native API </title></sect1><sect1><title>/* Read all the employees from the database, ask the user to choose one and return it. */</title></sect1><sect1><title>/* This must read in all the information for all the employees */</title></sect1><sect1><title>ListBox list;</title></sect1><sect1><title> </title></sect1><sect1><title>// Fetch data from database and add to list box</title></sect1><sect1><title>List employees = session.readAllObjects(Employee.class);</title></sect1><sect1><title>list.addAll(employees);</title></sect1><sect1><title> </title></sect1><sect1><title>// Display list box</title></sect1><sect1><title>....</title></sect1><sect1><title> </title></sect1><sect1><title>// Get selected employee from list</title></sect1><sect1><title>Employee selectedEmployee = (Employee) list.getSelectedItem();</title></sect1><sect1><title> </title></sect1><sect1><title>return selectedEmployee;</title></sect1><sect1><title/><sect2><title>
      <anchor id="Partial_Object_Reading"/>Partial Object Reading</title>
   <para>Partial object reading is a query designed to extract only the required information from a selected record in a database, rather than all the information the record contains. Because partial object reading does not fully populate objects, you can neither cache nor edit partially read objects. </para>
   <para>For more information about partial object queries, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Partial_Object_Queries">Partial Object Queries</ulink>. </para>
   <para>In this example, the query builds complete employee objects, even though the list displays only employee last names. With no optimization, the query reads all the employee data. </para>
   <para>The <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-7">Optimization Through Partial Object Reading</ulink> example demonstrates the use of partial object reading. It reads only the last name and primary key for the employee data. This reduces the amount of data read from the database. </para>
   <para>
      <anchor id="Example_11-7"/>Optimization Through Partial Object Reading </para>
   <para>JPA </para>
   <para>/* Read all the employees from the database, ask the user to choose one and return it. */</para>
   <para>/* This uses partial object reading to read just the last names of the employees. */</para>
   <para>ListBox list;</para>
   <para> </para>
   <para>// Fetch data from database and add to list box </para>
   <para>List employees = entityManager.createQuery("Select new Employee(e.id, e.lastName) from Employee e").getResultList();</para>
   <para>list.addAll(employees);</para>
   <para> </para>
   <para>// Display list box</para>
   <para>....</para>
   <para> </para>
   <para>// Get selected employee from list</para>
   <para>Employee selectedEmployee = (Employee)entityManager.find(Employee.class, ((Employee)list.getSelectedItem()).getId());</para>
   <para>return selectedEmployee;</para>
   <para>Native API </para>
   <para>/* Read all the employees from the database, ask the user to choose one and return it. */</para>
   <para>/* This uses partial object reading to read just the last names of the employees. */</para>
   <para>/* Since EclipseLink automatically includes the primary key of the object, the full object can easily be read for editing */</para>
   <para>ListBox list;</para>
   <para> </para>
   <para>// Fetch data from database and add to list box</para>
   <para>ReadAllQuery query = new ReadAllQuery(Employee.class);</para>
   <para>query.addPartialAttribute("lastName");</para>
   <para> </para>
   <para>// The next line avoids a query exception</para>
   <para>query.dontMaintainCache();</para>
   <para>List employees = session.executeQuery(query);</para>
   <para>list.addAll(employees);</para>
   <para> </para>
   <para>// Display list box</para>
   <para>....</para>
   <para> </para>
   <para>// Get selected employee from list</para>
   <para>Employee selectedEmployee = (Employee)session.readObject(list.getSelectedItem());</para>
   <para>return selectedEmployee;</para></sect2><sect2><title>
      <anchor id="Report_Query"/>Report Query</title>
   <para>Report query lets you retrieve data from a set of objects and their related objects. Report query supports database reporting functions and features. </para>
   <para>For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Report_Query_Results">Report Query Results</ulink>. </para>
   <para>The <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-8">Optimization Through Report Query</ulink> example demonstrates the use of report query to read only the last name of the employees. This reduces the amount of data read from the database compared to the code in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-6">No Optimization</ulink> example, and avoids instantiating employee instances. </para>
   <para>
      <anchor id="Example_11-8"/>Optimization Through Report Query </para>
   <para>JPA </para>
   <para>/* Read all the employees from the database, ask the user to choose one and return it. */</para>
   <para>/* This uses a report query to read just the last names of the employees. */</para>
   <para>ListBox list;</para>
   <para> </para>
   <para>// Fetch data from database and add to list box</para>
   <para>// This query returns a List of Object[] data values</para>
   <para>List rows = entityManager.createQuery("Select e.id, e.lastName from Employee e").getResultList();</para>
   <para>list.addAll(rows);</para>
   <para> </para>
   <para>// Display list box</para>
   <para>....</para>
   <para> </para>
   <para>// Get selected employee from list</para>
   <para>Object selectedItem[] = (Object[])list.getSelectedItem();</para>
   <para>Employee selectedEmployee = (Employee)entityManager.find(Employee.class, selectedItem[0]);</para>
   <para>return selectedEmployee;</para>
   <para>Native API </para>
   <para>/* Read all the employees from the database, ask the user to choose one and return it. */</para>
   <para>/* The report query is used to read just the last name of the employees. */</para>
   <para>/* Then the primary key stored in the report query result to read the real object */</para>
   <para>ListBox list;</para>
   <para> </para>
   <para>// Fetch data from database and add to list box</para>
   <para>ExpressionBuilder builder = new ExpressionBuilder();</para>
   <para>ReportQuery query = new ReportQuery (Employee.class, builder);</para>
   <para>query.addAttribute("lastName");</para>
   <para>query.retrievePrimaryKeys();</para>
   <para>List reportRows = (List) session.executeQuery(query);</para>
   <para>list.addAll(reportRows);</para>
   <para> </para>
   <para>// Display list box</para>
   <para>....</para>
   <para> </para>
   <para>// Get selected employee from list</para>
   <para>ReportQueryResult result = (ReportQueryResult) list.getSelectedItem();</para>
   <para>Employee selectedEmployee = (Employee)result.readobject(Employee.Class, session);</para>
   <para>Although the differences between the unoptimized example (<ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-6">No Optimization</ulink>) and the report query optimization in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-8">Optimization Through Report Query</ulink> example appear to be minor, report queries offer a substantial performance improvement. </para></sect2><sect2><title>
      <anchor id="Fetch_Groups"/>Fetch Groups</title>
   <para>Fetch groups are similar to partial object reading, but does allow caching of the objects read. For objects with many attributes or reference attributes to complex graphs (or both), you can define a fetch group that determines what attributes are returned when an object is read. Because EclipseLink will automatically execute additional queries when the get method is called for attributes not in the fetch group, ensure that the unfetched data is not required: refetching data can become a performance issue. </para>
   <para>For more information about querying with fetch groups, see <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#Using_Queries_with_Fetch_Groups">Using Queries with Fetch Groups</ulink>. </para>
   <para>The <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-9">Configuring a Query with a FetchGroup Using the FetchGroupManager</ulink> example demonstrates the use of a static fetch group. </para>
   <para>Configuring a Query with a FetchGroup Using the FetchGroupManager </para>
   <para>JPA </para>
   <para>// Use fetch group at query level</para>
   <para>ReadAllQuery query = new ReadAllQuery(Employee.class);</para>
   <para>FetchGroup group = new FetchGroup("nameOnly");</para>
   <para>group.addAttribute("firstName");</para>
   <para>group.addAttribute("lastName");</para>
   <para>query.setFetchGroup(group);</para>
   <para> </para>
   <para>JpaQuery jpaQuery = (JpaQuery)entityManager.createQuery("Select e from Employee e");</para>
   <para>jpaQuery.setDatabaseQuery(query);</para>
   <para> </para>
   <para>List employees = jpaQuery.getResultList();</para>
   <para> </para>
   <para> </para>
   <para>/* Only Employee attributes firstName and lastName are fetched.</para>
   <para>   If you call the Employee get method for any other attribute, EclipseLink executes</para>
   <para>   another query to retrieve all unfetched attribute values. Thereafter,</para>
   <para>   calling that get method will return the value directly from the object */</para>
   <para>Native API </para>
   <para>// Use fetch group at query level</para>
   <para>ReadAllQuery query = new ReadAllQuery(Employee.class);</para>
   <para>FetchGroup group = new FetchGroup("nameOnly");</para>
   <para>group.addAttribute("firstName");</para>
   <para>group.addAttribute("lastName");</para>
   <para>query.setFetchGroup(group);</para>
   <para> </para>
   <para>List employees = session.executeQuery(query);</para>
   <para> </para>
   <para>/* Only Employee attributes firstName and lastName are fetched.</para>
   <para>   If you call the Employee get method for any other attribute, EclipseLink executes</para>
   <para>   another query to retrieve all unfetched attribute values. Thereafter,</para>
   <para>   calling that get method will return the value directly from the object */</para>
   <para>
      <anchor id="Reading_Case_2:_Batch_Reading_Objects"/>Reading Case 2: Batch Reading Objects</para>
   <para>The way your application reads data from the database affects performance. For example, reading a collection of rows from the database is significantly faster than reading each row individually. </para>
   <para>A common performance challenge is to read a collection of objects that have a one-to-one reference to another object. This typically requires one read operation to read in the source rows, and one call for each target row in the one-to-one relationship. </para>
   <para>To reduce the number of read operations required, use join and batch reading. The <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-10">No Optimization</ulink> example illustrates the unoptimized code required to retrieve a collection of objects with a one-to-one reference to another object. The <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-11">Optimization Through Joining</ulink> and <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-12">Optimization Through Batch Reading</ulink> examples illustrate the use of joins and batch reading to improve efficiency. </para>
   <para>
      <anchor id="Example_11-10"/>No Optimization </para>
   <para>JPA </para>
   <para>// Read all the employees, and collect their address' cities. This takes N + 1 queries if not optimized </para>
   <para>// Read all the employees from the database. This requires 1 SQL call</para>
   <para>List employees = entityManager.createQuery("Select e from Employee e where e.lastName = 'Smith'").getResultList(); </para>
   <para>//SQL: Select * from Employee where l_name = 'Smith</para>
   <para> </para>
   <para>// Iterate over employees and get their addresses.</para>
   <para>// This requires N SQL calls</para>
   <para>Iterator iterator = employees.iterator();</para>
   <para>List cities = new ArrayList();</para>
   <para>while(iterator.hasNext()) {</para>
   <para>   Employee employee = (Employee) iterator.next();</para>
   <para>   cities.add(employee.getAddress().getCity());</para>
   <para>}</para>
   <para>//SQL: Select * from Address where address_id = 123, etc (* n)</para>
   <para>Native API </para>
   <para>// Read all the employees, and collect their address' cities. This takes N + 1 queries if not optimized </para>
   <para>// Read all the employees from the database. This requires 1 SQL call</para>
   <para>List employees = session.readAllObjects(Employee.class,</para>
   <para>        new ExpressionBuilder().get("lastName").equal("Smith"));</para>
   <para> </para>
   <para>//SQL: Select * from Employee where l_name = 'Smith</para>
   <para> </para>
   <para>// Iterate over employees and get their addresses.</para>
   <para>// This requires N SQL calls</para>
   <para>Iterator iterator = employees.iterator();</para>
   <para>List cities = new ArrayList();</para>
   <para>while(iterator.hasNext()) {</para>
   <para>   Employee employee = (Employee) iterator.next();</para>
   <para>   cities.add(employee.getAddress().getCity());</para>
   <para>}</para>
   <para>//SQL: Select * from Address where address_id = 123, etc (* n)</para>
   <para>
      <anchor id="Example_11-11"/>Optimization Through Joining </para>
   <para>JPA </para>
   <para>// Read all the employees; collect their address' cities. Although the code</para>
   <para>// is almost identical because joining optimization is used it takes only 1 query</para>
   <para> </para>
   <para>// Read all the employees from the database using joining.</para>
   <para>// This requires 1 SQL call</para>
   <para>List employees = entityManager.createQuery("Select e from Employee e join fetch e.address where e.lastName = 'Smith'").getResultList(); </para>
   <para>/// SQL: Select E.*, A.* from Employee E, Address A where E.l_name = 'Smith' and E.address_id = A.address_id</para>
   <para> </para>
   <para>// Iterate over employees and get their addresses.</para>
   <para>// The previous SQL already read all the addresses, so no SQL is required</para>
   <para> </para>
   <para>Iterator iterator = employees.iterator();</para>
   <para>List cities = new ArrayList();</para>
   <para>while (iterator.hasNext()) {</para>
   <para>    Employee employee = (Employee) iterator.next();</para>
   <para>    cities.add(employee.getAddress().getCity());</para>
   <para>}</para>
   <para>Native API </para>
   <para>// Read all the employees; collect their address' cities. Although the code</para>
   <para>// is almost identical because joining optimization is used it takes only 1 query</para>
   <para> </para>
   <para>// Read all the employees from the database using joining.</para>
   <para>// This requires 1 SQL call</para>
   <para>ReadAllQuery query = new ReadAllQuery(Employee.class);</para>
   <para>ExpressionBuilder builder = query.getExpressionBuilder(); </para>
   <para>query.setSelectionCriteria(builder.get("lastName").equal("Smith"));</para>
   <para>query.addJoinedAttribute("address");</para>
   <para>List employees = session.executeQuery(query);</para>
   <para>/// SQL: Select E.*, A.* from Employee E, Address A where E.l_name = 'Smith' and E.address_id = A.address_id</para>
   <para> </para>
   <para>// Iterate over employees and get their addresses.</para>
   <para>// The previous SQL already read all the addresses, so no SQL is required</para>
   <para>Iterator iterator = employees.iterator();</para>
   <para>List cities = new ArrayList();</para>
   <para>while (iterator.hasNext()) {</para>
   <para>    Employee employee = (Employee) iterator.next();</para>
   <para>    cities.add(employee.getAddress().getCity());</para>
   <para>}</para>
   <para>
      <anchor id="Example_11-12"/>Optimization Through Batch Reading </para>
   <para>JPA </para>
   <para>// Read all the employees; collect their address' cities. Although the code</para>
   <para>// is almost identical because batch reading optimization is used it takes only 2 queries</para>
   <para> </para>
   <para>// Read all the employees from the database, using batch reading.</para>
   <para> </para>
   <para>// This requires 1 SQL call, note that only the employees are read</para>
   <para>Query query = entityManager.createQuery("Select e from Employee e where e.lastName = 'Smith'");</para>
   <para>query.setHint("eclipselink.batch", "e.address");</para>
   <para>List employees = query.getResultList();</para>
   <para>// SQL: Select * from Employee where l_name = 'Smith</para>
   <para> </para>
   <para>// Iterate over employees and get their addresses.</para>
   <para>// The first address accessed will cause all the addresses to be read in a single SQL call</para>
   <para>Iterator iterator = employees.iterator();</para>
   <para>List cities = new ArrayList();</para>
   <para>while (iterator.hasNext()) {</para>
   <para>    Employee employee = (Employee) iterator.next();</para>
   <para>    cities.add(employee.getAddress().getCity());</para>
   <para>    // SQL: Select distinct A.* from Employee E, Address A</para>
   <para>    // where E.l_name = 'Smith' and E.address_id = A.address_i</para>
   <para>}</para>
   <para>Native API </para>
   <para>// Read all the employees; collect their address' cities. Although the code</para>
   <para>// is almost identical because batch reading optimization is used it takes only 2 queries</para>
   <para> </para>
   <para>// Read all the employees from the database, using batch reading.</para>
   <para> </para>
   <para>// This requires 1 SQL call, note that only the employees are read</para>
   <para>ReadAllQuery query = new ReadAllQuery(Employee.class);</para>
   <para>ExpressionBuilder builder = query.getExpressionBuilder(); </para>
   <para>query.setSelectionCriteria(bulder.get("lastName").equal("Smith"));</para>
   <para>query.addBatchReadAttribute("address");</para>
   <para>List employees = (List)session.executeQuery(query);</para>
   <para>// SQL: Select * from Employee where l_name = 'Smith</para>
   <para> </para>
   <para>// Iterate over employees and get their addresses.</para>
   <para>// The first address accessed will cause all the addresses to be read in a single SQL call</para>
   <para>Iterator iterator = employees.iterator();</para>
   <para>List cities = new ArrayList();</para>
   <para>while (iterator.hasNext()) {</para>
   <para>    Employee employee = (Employee) iterator.next();</para>
   <para>    cities.add(employee.getAddress().getCity());</para>
   <para>    // SQL: Select distinct A.* from Employee E, Address A</para>
   <para>    // where E.l_name = 'Smith' and E.address_id = A.address_i</para>
   <para>}</para>
   <para>Because the two-phase approach to the query (the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-11">Optimization Through Joining</ulink> and <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-12">Optimization Through Batch Reading</ulink> examples) accesses the database only twice, it is significantly faster than the approach illustrated in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-10">No Optimization</ulink> example. </para>
   <para>Joins offer a significant performance increase under most circumstances. Batch reading offers a further performance advantage in that it allows for delayed loading through value holders, and has much better performance where the target objects are shared. </para>
   <para>For example, if employees in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-10">No Optimization</ulink>, <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-11">Optimization Through Joining</ulink>, and <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-12">Optimization Through Batch Reading</ulink> examples are at the same address, batch reading reads much less data than joining, because batch reading uses a SQL DISTINCT call to filter duplicate data. </para>
   <para>Batch reading and joining are available for one-to-one, one-to-many, many-to-many, direct collection, direct map and aggregate collection mappings. Note that one-to-many joining will return a large amount of duplicate data and so is normally less efficient than batch reading. </para>
   <para>
      <anchor id="Reading_Case_3:_Using_Complex_Custom_SQL_Queries"/>Reading Case 3: Using Complex Custom SQL Queries</para>
   <para>EclipseLink provides a high-level query mechanism. However, if your application requires a complex query, a direct SQL or stored procedure call may be the best solution. </para>
   <para>For more information about executing SQL calls, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#SQLCall">SQLCall</ulink>. </para>
   <para/>
   <para>
      <anchor id="Reading_Case_4:_Using_View_Objects"/>Reading Case 4: Using View Objects</para>
   <para>Some application operations require information from several objects rather than from just one. This can be difficult to implement, and resource-intensive. The <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-13">No Optimization</ulink> example illustrates unoptimized code that reads information from several objects. </para>
   <para>
      <anchor id="Example_11-13"/>No Optimization </para>
   <para>JPA </para>
   <para>/* Gather the information to report on an employee and return the summary of the</para>
   <para>   information. In this situation, a hash table is used to hold the report</para>
   <para>   information. Notice that this reads a lot of objects from the database, but</para>
   <para>   uses very little of the information contained in the objects. This may take 5</para>
   <para>   queries and read in a large number of objects */</para>
   <para> </para>
   <para>public Map reportOnEmployee(String employeeName) {</para>
   <para>    List projects, associations;</para>
   <para>    Map report = new HashMap();</para>
   <para>    // Retrieve employee from database</para>
   <para>    Query query = entityManager.createQuery("Select e from Employee e where e.lastName = :name");</para>
   <para>    query.setParameter("name", employeeName);</para>
   <para>    Employee employee = (Employee)query.getSingleResult();</para>
   <para> </para>
   <para>    // Get all the projects affiliated with the employee</para>
   <para>    projects = entityManager.createNativeQuery("SELECT P.* FROM PROJECT P," + </para>
   <para>                       "EMPLOYEE E WHERE P.MEMBER_ID = E.EMP_ID AND E.L_NAME = " + </para>
   <para>                       employeeName, Project.class).getResultList();</para>
   <para> </para>
   <para>    // Get all the associations affiliated with the employee</para>
   <para>    associations = entityManager.createNativeQuery("SELECT A.* " +</para>
   <para>      "FROM ASSOC A, EMPLOYEE E WHERE A.MEMBER_ID = E.EMP_ID AND E.L_NAME = "</para>
   <para>      + employeeName, Association.class).getResultList();</para>
   <para> </para>
   <para>    report.put("firstName", employee.getFirstName());</para>
   <para>    report.put("lastName", employee.getLastName());</para>
   <para>    report.put("manager", employee.getManager());</para>
   <para>    report.put("city", employee.getAddress().getCity());</para>
   <para>    report.put("projects", projects);</para>
   <para>    report.put("associations", associations);</para>
   <para>    return report;</para>
   <para>}</para>
   <para>Native API </para>
   <para>/* Gather the information to report on an employee and return the summary of the</para>
   <para>   information. In this situation, a hash table is used to hold the report</para>
   <para>   information. Notice that this reads a lot of objects from the database, but</para>
   <para>   uses very little of the information contained in the objects. This may take 5</para>
   <para>   queries and read in a large number of objects */</para>
   <para> </para>
   <para>public Map reportOnEmployee(String employeeName) {</para>
   <para>    List projects, associations;</para>
   <para>    Map report = new HashMap();</para>
   <para>    // Retrieve employee from database</para>
   <para>    Employee employee = session.readObject(Employee.class,</para>
   <para>                        new ExpressionBuilder.get("lastName").equal(employeeName));</para>
   <para> </para>
   <para>    // Get all the projects affiliated with the employee</para>
   <para>    projects = session.readAllObjects(Project.class, </para>
   <para>                       "SELECT P.* FROM PROJECT P," + </para>
   <para>                       "EMPLOYEE E WHERE P.MEMBER_ID = E.EMP_ID AND E.L_NAME = " + </para>
   <para>                       employeeName);</para>
   <para> </para>
   <para>    // Get all the associations affiliated with the employee</para>
   <para>    associations = session.readAllObjects(Association.class, "SELECT A.* " +</para>
   <para>      "FROM ASSOC A, EMPLOYEE E WHERE A.MEMBER_ID = E.EMP_ID AND E.L_NAME = "</para>
   <para>      + employeeName);</para>
   <para> </para>
   <para>    report.put("firstName", employee.getFirstName());</para>
   <para>    report.put("lastName", employee.getLastName());</para>
   <para>    report.put("manager", employee.getManager());</para>
   <para>    report.put("city", employee.getAddress().getCity());</para>
   <para>    report.put("projects", projects);</para>
   <para>    report.put("associations", associations);</para>
   <para>    return report;</para>
   <para>}</para>
   <para>To improve application performance in these situations, define a new read-only object to encapsulate this information, and map it to a view on the database. To set the object to be read-only, configure its descriptor as read-only (see <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Read-Only_Descriptors">Configuring Read-Only Descriptors</ulink>). </para>
   <para>
      <anchor id="Example_11-14"/>Optimization Through View Object </para>
   <para>CREATE VIEW NAMED EMPLOYEE_VIEW AS (SELECT F_NAME = E.F_NAME, L_NAME = E.L_NAME,EMP_ID = E.EMP_ID, MANAGER_NAME = E.NAME, CITY = A.CITY, NAME = E.NAME </para>
   <para> FROM EMPLOYEE E, EMPLOYEE M, ADDRESS A </para>
   <para> WHERE E.MANAGER_ID = M.EMP_ID</para>
   <para> AND E.ADDRESS_ID = A.ADDRESS_ID)</para>
   <para>Define a descriptor for the EmployeeReport class as follows: </para>
   <orderedlist>
      <listitem>
         <para>Define the descriptor as usual, but specify the tableName as EMPLOYEE_VIEW. </para>
      </listitem>
      <listitem>
         <para>Map only the attributes required for the report. In the case of the numberOfProjects and associations, use a transformation mapping to retrieve the required data. </para>
      </listitem>
   </orderedlist>
   <para>You can now query the report from the database in the same way as any other object enabled by EclipseLink. </para>
   <para>
      <anchor id="Example_11-15"/>View the Report from <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-14">Optimization Through View Object</ulink> 
   </para>
   <para>// Return the report for the employee</para>
   <para>public EmployeeReport reportOnEmployee(String employeeName) {</para>
   <para>    EmployeeReport report;</para>
   <para>    report = (EmployeeReport) session.readObject(EmployeeReport.class, </para>
   <para>             new ExpressionBuilder.get("lastName").equal(employeeName));</para>
   <para>    return report;</para>
   <para>}</para>
   <para/>
   <informaltable frame="all">
      <tgroup cols="1"><tbody><row>
            <entry>
               <para>WARNING: Allowing an unverified SQL string to be passed into methods (for example: readAllObjects(Class class, String sql) and readObject(Class class, String sql) method) makes your application vulnerable to SQL injection attacks. </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable>
   <para>
      <anchor id="Reading_Case_5:_Inheritance_Subclass_Outer-Joining"/>Reading Case 5: Inheritance Subclass Outer-Joining</para>
   <para>If you have an inheritance hierarchy that spans multiple tables and frequently query for the root class, consider using outer joining. This allows an outer-joining to be used for queries against an inheritance superclass that can read all of its subclasses in a single query instead of multiple queries. </para>
   <para>Note that on some databases, the outer joins may be less efficient than the default multiple queries mechanism. </para>
   <para>For more information about inheritance, see <ulink url="http://wiki.eclipse.org/Introduction_to_Descriptors_%28ELUG%29#Descriptors_and_Inheritance">Descriptors and Inheritance</ulink>. </para>
   <para>For more information about querying on inheritance, see <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#Querying_on_an_Inheritance_Hierarchy">Querying on an Inheritance Hierarchy</ulink>. </para>
   <para/>
   <para>
      <anchor id="Write_Optimization_Examples"/>Write Optimization Examples</para>
   <para>EclipseLink provides the write optimization features listed in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Table_11-11">Write Optimization Features</ulink> table. </para>
   <para>This section includes the following write optimization examples: </para>
   <orderedlist>
      <listitem>
         <para>
            <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Writing_Case:_Batch_Writes">Writing Case: Batch Writes</ulink> 
         </para>
      </listitem>
   </orderedlist>
   <para>
      <anchor id="Table_11-11"/>Write Optimization Features </para>
   <informaltable frame="all">
      <tgroup cols="2"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t14"/>Feature <anchor id="r1c2-t14"/>
               </para>
            </entry>
            <entry>
               <para>Effect on Performance <anchor id="r2c1-t14"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Unit of work </para>
            </entry>
            <entry>
               <para>Improves performance by updating only the changed fields and objects. </para>
               <para>Minimizes the amount of tracking required (which can be expensive) by registering only those objects that will change. </para>
               <para>For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Transactions_%28ELUG%29">Introduction to EclipseLink Transactions</ulink>). </para>
               <para>Note: The unit of work supports marking classes as read-only (see <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Read-Only_Descriptors">Configuring Read-Only Descriptors</ulink> and <ulink url="http://wiki.eclipse.org/Using_Advanced_Unit_of_Work_API_%28ELUG%29#Declaring_Read-Only_Classes">Declaring Read-Only Classes</ulink>). This avoids tracking of objects that do not change. <anchor id="r3c1-t14"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Batch writing </para>
            </entry>
            <entry>
               <para>Lets you group all insert, update, and delete commands from a transaction into a single database call. This dramatically reduces the number of calls to the database (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Batch_Writing_and_Parameterized_SQL">Batch Writing and Parameterized SQL</ulink>). <anchor id="r4c1-t14"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Parameterized SQL </para>
            </entry>
            <entry>
               <para>Improves performance for frequently executed SQL statements (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Parameterized_SQL_and_Prepared_Statement_Caching_for_Optimization">How to Use Parameterized SQL and Prepared Statement Caching for Optimization</ulink>). <anchor id="r5c1-t14"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Sequence number preallocation </para>
            </entry>
            <entry>
               <para>Dramatically improves insert performance (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Sequence_Number_Preallocation">Sequence Number Preallocation</ulink>). <anchor id="r6c1-t14"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Multiprocessing </para>
            </entry>
            <entry>
               <para>Splitting a batch job across threads lets you synchronize reads from a cursored stream and use parallel units of work for performance improvements even on a single machine (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Multiprocessing">Multiprocessing</ulink>). <anchor id="r7c1-t14"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Does exist alternatives </para>
            </entry>
            <entry>
               <para>The does exist call on write object can be avoided in certain situations by checking the cache for does exist, or assuming the existence of the object (see <ulink url="http://wiki.eclipse.org/Configuring_a_Project_%28ELUG%29#Configuring_Existence_Checking_at_the_Project_Level">Configuring Existence Checking at the Project Level</ulink> or <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Cache_Existence_Checking_at_the_Descriptor_Level">Configuring Cache Existence Checking at the Descriptor Level</ulink> and <ulink url="http://wiki.eclipse.org/Using_Advanced_Unit_of_Work_API_%28ELUG%29#How_to_Use_Registration_and_Existence_Checking">How to Use Registration and Existence Checking</ulink>). <anchor id="r8c1-t14"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Change Tracking </para>
            </entry>
            <entry>
               <para>Improves writing and transactional read performance (see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Transactions_%28ELUG%29#Unit_of_Work_and_Change_Policy">Unit of Work and Change Policy</ulink> and <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Change_Policy">Configuring Change Policy</ulink>). <anchor id="r9c1-t14"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Isolated Client Sessions </para>
            </entry>
            <entry>
               <para>For write-only, or non-cached (isolated) objects, the unit of work isolation level should be set to isolated-always to avoid caching overhead when not caching (see <ulink url="http://wiki.eclipse.org/Introduction_to_Cache_%28ELUG%29#Cache_Isolation">Cache Isolation</ulink>). </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable>
   <para/>
   <para>
      <anchor id="Writing_Case:_Batch_Writes"/>Writing Case: Batch Writes</para>
   <para>The most common write performance problem occurs when a batch job inserts a large volume of data into the database. For example, consider a batch job that loads a large amount of data from one database, and then migrates the data into another. The following objects are involved: </para>
   <orderedlist>
      <listitem>
         <para>Simple individual objects with no relationships. </para>
      </listitem>
      <listitem>
         <para>Objects that use generated sequence numbers as their primary key. </para>
      </listitem>
      <listitem>
         <para>Objects that have an address that also uses a sequence number. </para>
      </listitem>
   </orderedlist>
   <para>The batch job loads 10,000 employee records from the first database and inserts them into the target database. With no optimization, the batch job reads all the records from the source database, acquires a unit of work from the target database, registers all objects, and commits the unit of work. </para>
   <para>
      <anchor id="Example_11-16"/>No Optimization </para>
   <para>JPA </para>
   <para>// Read all the employees from source entity manager</para>
   <para> </para>
   <para>// Read all the employees from the database. This requires 1 SQL call,</para>
   <para>// but will be very memory intensive as 10,000 objects will be read</para>
   <para>List&lt;Employee&gt; employees = (List&lt;Employee&gt;)sourceEntityManager.createQuery("Select e from Employee e").getResultList();</para>
   <para> </para>
   <para>//SQL: Select * from Employee</para>
   <para> </para>
   <para>// Acquire a unit of work and register the employees</para>
   <para>targetEntityManager.getTransaction().begin();</para>
   <para>for (Employee employee : employees) {</para>
   <para>    targetEntityManager.persist(employee);</para>
   <para>}</para>
   <para>targetEntityManager.getTransaction().commit();</para>
   <para>Native API </para>
   <para>// Read all the employees, acquire a unit of work, and register them</para>
   <para> </para>
   <para>// Read all the employees from the database. This requires 1 SQL call,</para>
   <para>// but will be very memory intensive as 10,000 objects will be read</para>
   <para>List employees = sourceSession.readAllObjects(Employee.class);</para>
   <para> </para>
   <para>//SQL: Select * from Employee</para>
   <para> </para>
   <para>// Acquire a unit of work and register the employees</para>
   <para>UnitOfWork uow = targetSession.acquireUnitOfWork();</para>
   <para>uow.registerAllObjects(employees);</para>
   <para>uow.commit();</para>
   <para>SQL </para>
   <para>BEGIN</para>
   <para>UPDATE Sequence SET count = count + 1 WHERE name = 'EMP'</para>
   <para>SELECT count FROM Sequence</para>
   <para>// ... repeat this 10,000 times + 10,000 times FOR the addresses ...</para>
   <para>COMMIT</para>
   <para>BEGIN</para>
   <para>INSERT INTO Address (...) VALUES (...)</para>
   <para>// ... repeat this 10,000 times</para>
   <para>INSERT INTO Employee (...) VALUES (...)</para>
   <para>// ... repeat this 10,000 times</para>
   <para>COMMIT</para>
   <para>This batch job performs poorly, because it requires 60,000 SQL executions. It also reads huge amounts of data into memory, which can raise memory performance issues. EclipseLink offers several optimization features to improve the performance of this batch job. </para>
   <para>To improve this operation, do the following: </para>
   <orderedlist>
      <listitem>
         <para>Use EclipseLink batch read operations and cursor support (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Cursors">Cursors</ulink>). </para>
      </listitem>
      <listitem>
         <para>Use batch writing or parameterized batch writing to write to the database (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Batch_Writing_and_Parameterized_SQL">Batch Writing and Parameterized SQL</ulink>).If your database does not support batch writing, use parameterized SQL to implement the write query. </para>
      </listitem>
      <listitem>
         <para>Implement sequence number preallocation (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Sequence_Number_Preallocation">Sequence Number Preallocation</ulink>). </para>
      </listitem>
      <listitem>
         <para>Implement multiprocessing (see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Multiprocessing">Multiprocessing</ulink>). </para>
      </listitem>
   </orderedlist>
   <para/></sect2><sect2><title>
      <anchor id="Cursors"/>Cursors</title>
   <para>To optimize the query in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-16">No Optimization</ulink> example, use a cursored stream to read the Employees from the source database. You can also employ a weak identity map instead of a hard or soft cache identity map in both the source and target databases. </para>
   <para>To address the potential for memory problems, use the releasePrevious method after each read to stream the cursor in groups of 100. Register each batch of 100 employees in a new unit of work and commit them. </para>
   <para>Although this does not reduce the amount of executed SQL, it does address potential out-of-memory issues. When your system runs out of memory, the result is performance degradation that increases over time, and excessive disk activity caused by memory swapping on disk. </para>
   <para>For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Cursored_Streams_and_Scrollable_Cursors_for_Optimization">How to Use Cursored Streams and Scrollable Cursors for Optimization</ulink>. </para>
   <para/></sect2><sect2><title>
      <anchor id="Batch_Writing_and_Parameterized_SQL"/>Batch Writing and Parameterized SQL</title>
   <para>Batch writing lets you combine a group of SQL statements into a single statement and send it to the database as a single database execution. This feature reduces the communication time between the application and the server, and substantially improves performance. </para>
   <para>You can enable batch writing alone (dynamic batch writing) using Login method useBatchWriting. If you add batch writing to the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-16">No Optimization</ulink> example, you execute each batch of 100 employees as a single SQL execution. This reduces the number of SQL executions from 20,200 to 300. </para>
   <para>You can also enable batch writing and parameterized SQL (parameterized batch writing) and prepared statement caching. Parameterized SQL avoids the prepare component of SQL execution. This improves write performance because it avoids the prepare cost of an SQL execution. For parameterized batch writing you would get one statement per Employee, and one for Address: this reduces the number of SQL executions from 20,200 to 400. Although this is more than dynamic batch writing alone, parameterized batch writing also avoids all parsing, so it is much more efficient overall. </para>
   <para>Although parameterized SQL avoids the prepare component of SQL execution, it does not reduce the number of executions. Because of this, parameterized SQL alone may not offer as big of a gain as batch writing. However, if your database does not support batch writing, parameterized SQL will improve performance. If you add parameterized SQL in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-16">No Optimization</ulink> example, you must still execute 20,200 SQL executions, but parameterized SQL reduces the number of SQL PREPAREs to 4. </para>
   <para>For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#How_to_Use_Batch_Writing_for_Optimization">How to Use Batch Writing for Optimization</ulink>. </para>
   <para/></sect2><sect2><title>
      <anchor id="Sequence_Number_Preallocation"/>Sequence Number Preallocation</title>
   <para>SQL select calls are more resource-intensive than SQL modify calls, so you can realize large performance gains by reducing the number of select calls you issue. The code in the <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-16">No Optimization</ulink> example uses the select calls to acquire sequence numbers. You can substantially improve performance if you use sequence number preallocation. </para>
   <para>In EclipseLink, you can configure the sequence preallocation size on the login object (the default size is 50). The <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Example_11-16">No Optimization</ulink> example uses a preallocation size of 1 to demonstrate this point. If you stream the data in batches of 100 as suggested in <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Cursors">Cursors</ulink>, set the sequence preallocation size to 100. Because employees and addresses in the example both use sequence numbering, you further improve performance by letting them share the same sequence. If you set the preallocation size to 200, this reduces the number of SQL execution from 60,000 to 20,200. </para>
   <para>For more information about sequencing preallocation, see <ulink url="http://wiki.eclipse.org/Introduction_to_Relational_Projects_%28ELUG%29#Sequencing_and_Preallocation_Size">Sequencing and Preallocation Size</ulink>. </para>
   <para/></sect2><sect2><title>
      <anchor id="Multiprocessing"/>Multiprocessing</title>
   <para>You can use multiple processes or multiple machines to split the batch job into several smaller jobs. In this example, splitting the batch job across threads enables you to synchronize reads from the cursored stream, and use parallel Units of Work on a single machine. </para>
   <para>This leads to a performance increase, even if the machine has only a single processor, because it takes advantage of the wait times inherent in SQL execution. While one thread waits for a response from the server, another thread uses the waiting cycles to process its own database operation. </para>
   <para>The following example illustrates the optimized code for this example. Note that it does not illustrate multiprocessing. </para>
   <para>
      <anchor id="Example_11-17"/>Fully Optimized </para>
   <para>JPA </para>
   <para>// Read each batch of employees, begin a transaction, and persist them</para>
   <para>Map properties = new HashMap();</para>
   <para>properties.put("eclipselink.jdbc.batch-writing", "JDBC");</para>
   <para>properties.put("eclipselink.jdbc.cache-statements", "true");</para>
   <para>EntityManagerFactory factory = Persistence.createEntityManagerFactory("my-batch-app", properties);</para>
   <para>EntityManager targetEntityManager = factory.createEntityManager();</para>
   <para> </para>
   <para>// Read all the page of employees from the database.</para>
   <para>// This requires 1 SQL call for each page, but fewer rows.</para>
   <para>Query query = sourceEntityManager.createQuery("Select e from Employee e");</para>
   <para>int start = 0;</para>
   <para>boolean done = false;</para>
   <para>while (!done) {</para>
   <para>    query.setFirstResult(start);</para>
   <para>    query.setMaxRows(start + 100);</para>
   <para>    List page = query.getResultList();</para>
   <para>    start = start + 100;</para>
   <para>    if (page.size() &lt; 100) {</para>
   <para>        done = true;</para>
   <para>    }</para>
   <para>    //SQL: Select * from Employee. Process each batch</para>
   <para>    targetEntityManager.getTransaction().begin();</para>
   <para>    for (Employee employee : employees) {</para>
   <para>        targetEntityManager.persist(employee);</para>
   <para>    }</para>
   <para>    targetEntityManager.getTransaction().commit();</para>
   <para>}</para>
   <para>Native API </para>
   <para>// Read each batch of employees, acquire a unit of work, and register them</para>
   <para>targetSession.getLogin().useBatchWriting();</para>
   <para>targetSession.getLogin().setSequencePreallocationSize(200);</para>
   <para>targetSession.getLogin().bindAllParameters();</para>
   <para>targetSession.getLogin().cacheAllStatements();</para>
   <para>targetSession.getLogin().setMaxBatchWritingSize(200);</para>
   <para>...</para>
   <para> </para>
   <para>// Read all the employees from the database into a stream.</para>
   <para>// This requires 1 SQL call, but none of the rows will be fetched.</para>
   <para>ReadAllQuery query = new ReadAllQuery(Employee.class);</para>
   <para>query.useCursoredStream();</para>
   <para>CursoredStream stream;</para>
   <para>stream = (CursoredStream) sourceSession.executeQuery(query);</para>
   <para>//SQL: Select * from Employee. Process each batch</para>
   <para>while (! stream.atEnd()) {</para>
   <para>    List employees = stream.read(100);</para>
   <para>    // Acquire a unit of work to register the employees</para>
   <para>    UnitOfWork uow = targetSession.acquireUnitOfWork();</para>
   <para>    uow.registerAllObjects(employees);</para>
   <para>    uow.commit();</para>
   <para>}</para>
   <para>SQL </para>
   <para>BEGIN </para>
   <para>UPDATE Sequence SET count = count + 200 WHERE name = 'SEQ'</para>
   <para>SELECT count FROM Sequence WHERE name = 'SEQ'</para>
   <para>COMMIT</para>
   <para>BEGIN </para>
   <para>BEGIN BATCH</para>
   <para>INSERT INTO Address (...) VALUES (...)</para>
   <para>//... repeat this 100 times</para>
   <para>INSERT INTO Employee (...) VALUES (...)</para>
   <para>//... repeat this 100 times</para>
   <para>END BATCH</para>
   <para>COMMIT</para>
   <para>
      <anchor id="Optimizing_the_Unit_of_Work"/>Optimizing the Unit of Work</para>
   <para>For best performance when using a unit of work, consider the following tips: </para>
   <orderedlist>
      <listitem>
         <para>Register objects with a unit of work only if objects are eligible for change. If you register objects that will not change, the unit of work needlessly clones and processes those objects. </para>
      </listitem>
      <listitem>
         <para>Avoid the cost of existence checking when you are registering a new or existing object (see <ulink url="http://wiki.eclipse.org/Using_Advanced_Unit_of_Work_API_%28ELUG%29#How_to_Use_Registration_and_Existence_Checking">How to Use Registration and Existence Checking</ulink>). </para>
      </listitem>
      <listitem>
         <para>Avoid the cost of change set calculation on a class you know will not change by telling the unit of work that the class is read-only (see <ulink url="http://wiki.eclipse.org/Using_Advanced_Unit_of_Work_API_%28ELUG%29#Declaring_Read-Only_Classes">Declaring Read-Only Classes</ulink>). </para>
      </listitem>
      <listitem>
         <para>Avoid the cost of change set calculation on an object read by a ReadAllQuery in a unit of work that you do not intend to change by unregistering the object (see <ulink url="http://wiki.eclipse.org/Using_Advanced_Unit_of_Work_API_%28ELUG%29#How_to_Unregister_Working_Clones">How to Unregister Working Clones</ulink>). </para>
      </listitem>
      <listitem>
         <para>Before using conforming queries, be sure that it is necessary. For alternatives, see <ulink url="http://wiki.eclipse.org/Using_Advanced_Unit_of_Work_API_%28ELUG%29#Using_Conforming_Queries_and_Descriptors">Using Conforming Queries and Descriptors</ulink>. </para>
      </listitem>
      <listitem>
         <para>Enable weaving and change tracking to greatly improve transactional performance. For more information, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Optimizing_Using_Weaving">Optimizing Using Weaving</ulink>. </para>
      </listitem>
   </orderedlist>
   <para>If your performance measurements show that you have a performance problem during unit of work commit, consider using object level or attribute level change tracking, depending on the type of objects involved and how they typically change. For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Transactions_%28ELUG%29#Unit_of_Work_and_Change_Policy">Unit of Work and Change Policy</ulink>. </para>
   <para/>
   <para>
      <anchor id="Optimizing_Using_Weaving"/>Optimizing Using Weaving</para>
   <para>We recommend that you enable weaving to improve performance. </para>
   <para>In addition to using weaving to transparently configure lazy loading (indirection) and change tracking, EclipseLink uses weaving to make numerous internal optimizations. </para>
   <para>We recommend that you enable weaving. Transactional performance can be greatly improved through using weaving and change tracking. </para>
   <para>For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Using_Weaving">Using Weaving</ulink>. </para>
   <para/>
   <para>
      <anchor id="Optimizing_the_Application_Server_and_Database_Optimization"/>Optimizing the Application Server and Database Optimization</para>
   <para>Configuring your application server and database correctly can have a big impact on performance and scalabilty. Ensure that you correctly optimize these key components of your application in addition to your EclipseLink application and persistence. </para>
   <para>For your application or Java EE server, ensure your memory, thread pool and connection pool sizes are sufficient for your server's expected load, and that your JVM has been configured optimally. </para>
   <para>Ensure that your database has been configured correctly for optimal performance and its expected load. </para>
   <para/>
   <para>
      <anchor id="Optimizing_Storage_and_Retrieval_of_Binary_Data_in_XML"/>Optimizing Storage and Retrieval of Binary Data in XML</para>
   <para>When working with Java API for XML Web Services (JAX-WS), you can use XML binary attachments to optimize the storage and retrieval of binary data in XML. Rather than storing the data as a base64 BLOB, you can optimize it by sending the data as a Multipurpose Internet Mail Extensions (MIME) attachment in order to retrieve it on the other end. </para>
   <para>To make the use of XML binary attachments, register an instance of the org.eclipselink.persistence.ox.attachment.XMLAttachmentMarshaller or XMLAttachmentUnmarshaller interface with the binding framework. During a marshal operation, binary data will be handed into the XMLAttachmentMarshaller, which will be required to provide an ID that you can use at a later time to retrieve the data. </para>
   <para>EclipseLink runtime supports MtOM and SwaRef-style attachments. </para>
   <para>EclipseLink provides support for the following Java types as attachments: </para>
   <orderedlist>
      <listitem>
         <para>java.awt.Image </para>
      </listitem>
      <listitem>
         <para>javax.activation.DataHandler </para>
      </listitem>
      <listitem>
         <para>javax.mail.internet.MimeMultipart </para>
      </listitem>
      <listitem>
         <para>javax.xml.transform.Source </para>
      </listitem>
      <listitem>
         <para>byte[] </para>
      </listitem>
      <listitem>
         <para>Byte[] </para>
      </listitem>
   </orderedlist>
   <para>You can generate schema and mappings based on JAXB classes for these types. </para>
   <para>You can configure which mappings will be treated as attachments and set the MIME types of those attachments. You perform configurations using the following JAXB annotations: </para>
   <orderedlist>
      <listitem>
         <para>XmlAttachmentRef–Used on a DataHandler to indicate that this should be mapped to a swaRef in the XML schema. This means it should be treated as a SwaRef attachment. </para>
      </listitem>
      <listitem>
         <para>XmlMimeType–Specifies the expected MIME type of the mapping. When used on a byte array, this value should be passed into the XMLAttachmentMarshaller during a marshal operation. During schema generation, this will result in an expectedContentType attribute being added to the related element. </para>
      </listitem>
      <listitem>
         <para>XmlInlineBinaryData–Indicates that this binary field should always be written inline as base64Binary and never treated as an attachment. </para>
      </listitem>
   </orderedlist>
   <para>For information on JAXB annotations, see Chapter 8 of the specification at <ulink url="http://jcp.org/aboutJava/communityprocess/pfd/jsr222/index.html">http://jcp.org/aboutJava/communityprocess/pfd/jsr222/index.html</ulink> 
   </para>
   <para>Additionally, you have to set the schema type on a mapping going to binary if it is to be considered an attachment: it is either base64Binary or swaRef. </para>
   <para/>
   <informaltable frame="all">
      <tgroup cols="1"><tbody><row>
            <entry>
               <para>Note: EclipseLink lets you override treating an object as an attachment on a per-mapping basis. </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable>
   <para>Consider the following examples. </para>
   <para>
      <anchor id="Example_11-44"/>Using SwaRef </para>
   <para>public class Employee {</para>
   <para> </para>
   <para>    @XmlAttachmentRef</para>
   <para>    public DataHandler photo;</para>
   <para>    ...</para>
   <para> }</para>
   <para>The preceding code yeilds the following XML schema type: </para>
   <para>&lt;xs:complexType name="employee"&gt;</para>
   <para>    &lt;xs:sequence&gt;</para>
   <para>        &lt;xs:element name="photo" type="xs:swaRef"/&gt;</para>
   <para>    &lt;/xs:sequence&gt;</para>
   <para> &lt;/xs:complexType&gt;</para>
   <para>The XML would look as follows: </para>
   <para>&lt;employee&gt;</para>
   <para>    &lt;photo&gt;attachment_id&lt;/photo&gt;</para>
   <para> &lt;/employee&gt;</para>
   <para>
      <anchor id="Example_11-45"/>Using MtOM Without MimeType </para>
   <para>public class Employee {</para>
   <para> </para>
   <para>    public java.awt.Image photo;</para>
   <para>    ...</para>
   <para> }</para>
   <para>The preceding code generates the following XML schema type: </para>
   <para>&lt;xs:complexType name="employee"&gt;</para>
   <para>    &lt;xs:sequence&gt;</para>
   <para>        &lt;xs:element name="photo" type="base64Binary"/&gt;</para>
   <para>    &lt;/xs:sequence&gt;</para>
   <para> &lt;/xs:complexType&gt;</para>
   <para>&lt;/xml&gt;</para>
   <para> </para>
   <para>The XML would look as follows:</para>
   <para>&lt;source lang="xml"&gt;</para>
   <para> &lt;employee&gt;</para>
   <para>    &lt;photo&gt;</para>
   <para>        &lt;xop:Include href="attachment_id"/&gt;</para>
   <para>    &lt;/photo&gt;</para>
   <para> &lt;/employee&gt;</para>
   <para>
      <anchor id="Example_11-46"/>Using MtOM with MimeType </para>
   <para>public class Employee {</para>
   <para> </para>
   <para>    @XmlMimeType("image/jpeg")</para>
   <para>    public java.awt.Image photo;</para>
   <para>    ...</para>
   <para> }</para>
   <para>The preceding code generates the following XML schema type: </para>
   <para>&lt;xs:complexType name="employee"&gt;</para>
   <para>    &lt;xs:sequence&gt;</para>
   <para>        &lt;xs:element name="photo" </para>
   <para>            ns:expectedContentTypes="image/jpeg" </para>
   <para>            type="xs:base64Binary"/&gt;</para>
   <para>    &lt;/xs:sequence&gt;</para>
   <para> &lt;/xs:complexType&gt;</para>
   <para>The XML would look as follows: </para>
   <para>&lt;employee&gt;</para>
   <para>    &lt;photo&gt;</para>
   <para>        &lt;xop:Include href="attachment_id"/&gt;</para>
   <para>    &lt;/photo&gt;</para>
   <para> &lt;/employee&gt;</para>
   <para>
      <anchor id="Example_11-47"/>Using Binary Object with Forced Inline </para>
   <para>public class Employee {</para>
   <para> </para>
   <para>    @XmlInlineBinaryData</para>
   <para>    public java.awt.Image photo;</para>
   <para>    ...</para>
   <para> }</para>
   <para>The preceding code generates the following XML schema type: </para>
   <para>&lt;xs:complexType name="employee"&gt;</para>
   <para>    &lt;xs:sequence&gt;</para>
   <para>        &lt;xs:element name="photo" type="xs:base64Binary"/&gt;</para>
   <para>    &lt;/xs:sequence&gt;</para>
   <para> &lt;/xs:complexType&gt;</para>
   <para>The XML would look as follows: </para>
   <para>&lt;employee&gt;</para>
   <para>    &lt;photo&gt;ASWIUHFD1323423OIJEUFHEIUFWE134DFO3IR3298RY== &lt;/photo&gt;</para>
   <para> &lt;/employee&gt;</para>
   <para>If you are not using JAXB, use the org.eclipselink.persistence.ox.mappings.XMLBinaryDataMapping and XMLBinaryDataCollectionMapping API to handle binary data. For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_XML_Mappings_%28ELUG%29#XML_Binary_Data_Mapping">XML Binary Data Mapping</ulink> and <ulink url="http://wiki.eclipse.org/Introduction_to_XML_Mappings_%28ELUG%29#XML_Binary_Data_Collection_Mapping">XML Binary Data Collection Mapping</ulink>. </para>
   <para/>
   <para>
      <anchor id="How_to_Use_an_Attachment_Marshaller_and_Unmarshaller"/>How to Use an Attachment Marshaller and Unmarshaller</para>
   <para>You implement EclipseLink XMLAttachmentMarshaller and XMLAttachmentUnmarshaller interfaces to add and retrieve various types of XML attachments. An XMLMarshaller holds an instance of an XMLAttachmentMarshaller, and XMLUnmarshaller–an instance of an XMLAttachmentUnmarshaller. </para>
   <para>You set and obtain an attachment marshaller and unmarshaller using the following corresponding XMLMarshaller and XMLUnmarshaller methods: setAttachmentMarshaller(XMLAttachmentMarshaller am) getAttachmentMarshaller() setAttachmentUnmarshaller(XMLAttachmentUnmarshaller au) getAttachmentUnmarshaller() </para>
   <para>The following example shows how to use an attachment marshaller in your application. </para>
   <para>
      <anchor id="Example_11-48"/>Using an Attachment Marshaller </para>
   <para>...</para>
   <para> XMLMarshaller marshaller = context.createMarshaller();</para>
   <para> XMLAttachmentMarshaller am = new EmployeeAttachmentMarshaller();</para>
   <para> marshaller.setAttachmentMarshaller(am);</para>
   <para> ...</para>
   <para>For the preceding example to be valid, the XML schema type should be set to swaRef. </para>
   <para>For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_XML_Projects_%28ELUG%29#How_to_Use_EclipseLink_XMLContext">How to Use EclipseLink XMLContext</ulink>. </para></sect2></sect1><sect1><title/></sect1><sect1><title>Weaving</title></sect1><sect1><title>Using Weaving</title></sect1><sect1><title>Weaving is a technique of manipulating the byte-code of compiled Java classes. EclipseLink uses weaving to enhance both JPA entities and Plain Old Java Object (POJO) classes for such things as lazy loading, change tracking, fetch groups, and internal optimizations. </title></sect1><sect1><title>This section describes the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Dynamic_Weaving_Using_the_EclipseLink_Agent">Configuring Dynamic Weaving Using the EclipseLink Agent</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Static_Weaving">Configuring Static Weaving</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Disabling_Weaving_Using_EclipseLink_Persistence_Unit_Properties">Disabling Weaving Using EclipseLink Persistence Unit Properties</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_and_POJO_Classes">What You May Need to Know About Weaving and POJO Classes</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_and_Java_EE_Application_Servers">What You May Need to Know About Weaving and Java EE Application Servers</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Dynamic_Weaving_Using_the_EclipseLink_Agent">Configuring Dynamic Weaving Using the EclipseLink Agent</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Dynamic_Weaving_Using_the_EclipseLink_Agent">Configuring Dynamic Weaving Using the EclipseLink Agent</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Static_Weaving">Configuring Static Weaving</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Static_Weaving">Configuring Static Weaving</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Static_Weaving">Configuring Static Weaving</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Disabling_Weaving_Using_EclipseLink_Persistence_Unit_Properties">Disabling Weaving Using EclipseLink Persistence Unit Properties</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Disabling_Weaving_Using_EclipseLink_Persistence_Unit_Properties">Disabling Weaving Using EclipseLink Persistence Unit Properties</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Disabling_Weaving_Using_EclipseLink_Persistence_Unit_Properties">Disabling Weaving Using EclipseLink Persistence Unit Properties</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_and_POJO_Classes">What You May Need to Know About Weaving and POJO Classes</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_and_POJO_Classes">What You May Need to Know About Weaving and POJO Classes</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_and_POJO_Classes">What You May Need to Know About Weaving and POJO Classes</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_and_Java_EE_Application_Servers">What You May Need to Know About Weaving and Java EE Application Servers</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_and_Java_EE_Application_Servers">What You May Need to Know About Weaving and Java EE Application Servers</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_and_Java_EE_Application_Servers">What You May Need to Know About Weaving and Java EE Application Servers</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Configuring_Dynamic_Weaving_Using_the_EclipseLink_Agent"/>Configuring Dynamic Weaving Using the EclipseLink Agent</title></sect1><sect1><title>Use this option to weave applicable class files one at a time, as they are loaded at run time. For more information, see <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">How to Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">How to Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="To_Configure_Dynamic_Weaving_Using_the_EclipseLink_Agent"/>To Configure Dynamic Weaving Using the EclipseLink Agent</title></sect1><sect1><title>For information, see the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#To_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">To Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#To_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">To Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#To_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">To Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink></sect1><sect1><title>
      <anchor id="Configuring_Static_Weaving"/>Configuring Static Weaving</title></sect1><sect1><title>Consider this option to weave all applicable class files at build time so that you can deliver prewoven class files. For more information, see <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Static_Weaving_for_JPA_Entities">How to Configure Static Weaving for JPA Entities</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Static_Weaving_for_JPA_Entities">How to Configure Static Weaving for JPA Entities</ulink></sect1><sect1><title>Alternatively, you can weave classes at run time. For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Dynamic_Weaving_Using_the_EclipseLink_Agent">Configuring Dynamic Weaving Using the EclipseLink Agent</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Dynamic_Weaving_Using_the_EclipseLink_Agent">Configuring Dynamic Weaving Using the EclipseLink Agent</ulink></sect1><sect1><title>Note that for weaving, you use a persistence.xml file in both JPA and POJO applications. </title>persistence.xml</sect1><sect1><title>For information on packaging and deployment of POJO applications, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Disabling_Weaving_Using_EclipseLink_Persistence_Unit_Properties"/>Disabling Weaving Using EclipseLink Persistence Unit Properties</title></sect1><sect1><title>To disable weaving, you use persistence unit properties in both JPA and POJO applications. For more information, see <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Disable_Weaving_Using_EclipseLink_Persistence_Unit_Properties">How to Disable Weaving Using EclipseLink Persistence Unit Properties</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Disable_Weaving_Using_EclipseLink_Persistence_Unit_Properties">How to Disable Weaving Using EclipseLink Persistence Unit Properties</ulink></sect1><sect1><title>For information on packaging and deployment of POJO application, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Packaging_a_POJO_Application_for_Weaving"/>Packaging a POJO Application for Weaving</title></sect1><sect1><title>To package a POJO application for weaving, you create a JAR that contains a sessions.xml file and a persistence.xml file. </title>sessions.xmlpersistence.xml</sect1><sect1><title/></sect1><sect1><title>
      <anchor id="To_Package_a_POJO_Application_for_Weaving"/>To Package a POJO Application for Weaving</title>
   <orderedlist>
      <listitem>
         <title>Create a sessions.xml file for your application.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29">Introduction to EclipseLink Sessions</ulink>. </title>
      </listitem>
      <listitem>
         <title>Create a persistence.xml file for your application and reference your sessions.xml file, as the following example shows.<anchor id="Example_2-8"/>persistence.xml File for an EclipseLink JPA Application </title>
         <title>&lt;persistence&gt;</title>
         <title>    &lt;persistence-unit name="appname"&gt;</title>
         <title>        &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;</title>
         <title>        &lt;properties&gt;</title>
         <title/>
         <title>            &lt;property</title>
         <title>                name="eclipselink.session-name"</title>
         <title>                value="appname-session"</title>
         <title>            &gt;</title>
         <title>            &lt;property</title>
         <title>                name="eclipselink.sessions-xml"</title>
         <title>                value="sessions.xml"</title>
         <title>            &gt;</title>
         <title>        &lt;/properties&gt;</title>
         <title>    &lt;/persistence-unit&gt;</title>
         <title>&lt;/persistence&gt;</title>
      </listitem>
      <listitem>
         <title>Create a JAR file that contains your POJO classes, sessions.xml file, and persistence.xml file, as the following example shows.Put both the persistence.xml and sessions.xml file in a META-INF directory.<anchor id="Example_2-9"/>JAR File for a POJO Application </title>
         <title>appname.jar</title>
         <title>    META-INF</title>
         <title>        persistence.xml</title>
         <title>        sessions.xml</title>
         <title>    *.java</title>
      </listitem>
      <listitem>
         <title>Weave the JAR.For more information, see the following: </title>
      </listitem>
   </orderedlist></sect1><sect1><title>Create a sessions.xml file for your application.For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29">Introduction to EclipseLink Sessions</ulink>. </title>sessions.xml<ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29">Introduction to EclipseLink Sessions</ulink>
   <listitem>
      <title>Create a persistence.xml file for your application and reference your sessions.xml file, as the following example shows.<anchor id="Example_2-8"/>persistence.xml File for an EclipseLink JPA Application </title>
      <title>&lt;persistence&gt;</title>
      <title>    &lt;persistence-unit name="appname"&gt;</title>
      <title>        &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;</title>
      <title>        &lt;properties&gt;</title>
      <title/>
      <title>            &lt;property</title>
      <title>                name="eclipselink.session-name"</title>
      <title>                value="appname-session"</title>
      <title>            &gt;</title>
      <title>            &lt;property</title>
      <title>                name="eclipselink.sessions-xml"</title>
      <title>                value="sessions.xml"</title>
      <title>            &gt;</title>
      <title>        &lt;/properties&gt;</title>
      <title>    &lt;/persistence-unit&gt;</title>
      <title>&lt;/persistence&gt;</title>
   </listitem></sect1><sect1><title>Create a persistence.xml file for your application and reference your sessions.xml file, as the following example shows.<anchor id="Example_2-8"/>persistence.xml File for an EclipseLink JPA Application </title>persistence.sessions.xmlpersistence.xml File for an EclipseLink JPA Application</sect1><sect1><title>&lt;persistence&gt;</title></sect1><sect1><title>    &lt;persistence-unit name="appname"&gt;</title></sect1><sect1><title>        &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;</title></sect1><sect1><title>        &lt;properties&gt;</title></sect1><sect1><title/></sect1><sect1><title>            &lt;property</title></sect1><sect1><title>                name="eclipselink.session-name"</title></sect1><sect1><title>                value="appname-session"</title></sect1><sect1><title>            &gt;</title></sect1><sect1><title>            &lt;property</title></sect1><sect1><title>                name="eclipselink.sessions-xml"</title></sect1><sect1><title>                value="sessions.xml"</title></sect1><sect1><title>            &gt;</title></sect1><sect1><title>        &lt;/properties&gt;</title></sect1><sect1><title>    &lt;/persistence-unit&gt;</title></sect1><sect1><title>&lt;/persistence&gt;</title>
   <listitem>
      <title>Create a JAR file that contains your POJO classes, sessions.xml file, and persistence.xml file, as the following example shows.Put both the persistence.xml and sessions.xml file in a META-INF directory.<anchor id="Example_2-9"/>JAR File for a POJO Application </title>
      <title>appname.jar</title>
      <title>    META-INF</title>
      <title>        persistence.xml</title>
      <title>        sessions.xml</title>
      <title>    *.java</title>
   </listitem></sect1><sect1><title>Create a JAR file that contains your POJO classes, sessions.xml file, and persistence.xml file, as the following example shows.Put both the persistence.xml and sessions.xml file in a META-INF directory.<anchor id="Example_2-9"/>JAR File for a POJO Application </title>sessions.xmlpersistence.xmlpersistence.xmlsessions.xmlMETA-INFJAR File for a POJO Application</sect1><sect1><title>appname.jar</title></sect1><sect1><title>    META-INF</title></sect1><sect1><title>        persistence.xml</title></sect1><sect1><title>        sessions.xml</title></sect1><sect1><title>    *.java</title>
   <listitem>
      <title>Weave the JAR.For more information, see the following: </title>
   </listitem></sect1><sect1><title>Weave the JAR.For more information, see the following: </title></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Dynamic_Weaving_Using_the_EclipseLink_Agent">Configuring Dynamic Weaving Using the EclipseLink Agent</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Dynamic_Weaving_Using_the_EclipseLink_Agent">Configuring Dynamic Weaving Using the EclipseLink Agent</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Static_Weaving">Configuring Static Weaving</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Static_Weaving">Configuring Static Weaving</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Configuring_Static_Weaving">Configuring Static Weaving</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="What_You_May_Need_to_Know_About_Weaving_and_POJO_Classes"/>What You May Need to Know About Weaving and POJO Classes</title></sect1><sect1><title>EclipseLink uses weaving to enable the following for POJO classes: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Configuring_a_Mapping_%28ELUG%29#Configuring_Indirection_.28Lazy_Loading.29">lazy loading (indirection)</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Change_Policy">change tracking</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Fetch_Groups">fetch groups</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>internal optimizations. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Configuring_a_Mapping_%28ELUG%29#Configuring_Indirection_.28Lazy_Loading.29">lazy loading (indirection)</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Mapping_%28ELUG%29#Configuring_Indirection_.28Lazy_Loading.29">lazy loading (indirection)</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Change_Policy">change tracking</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Change_Policy">change tracking</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Change_Policy">change tracking</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Fetch_Groups">fetch groups</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Fetch_Groups">fetch groups</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Fetch_Groups">fetch groups</ulink>
   <listitem>
      <title>internal optimizations. </title>
   </listitem></sect1><sect1><title>internal optimizations. </title></sect1><sect1><title>EclipseLink weaves all the POJO classes in the JAR you create when you package a POJO application for weaving. For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Packaging_a_POJO_Application_for_Weaving">Packaging a POJO Application for Weaving</ulink></sect1><sect1><title>EclipseLink weaves all the classes defined in the persistence.xml file. That is the following: </title>persistence.xml<orderedlist>
      <listitem>
         <title>all the classes you list in the persistence.xml file; </title>
      </listitem>
      <listitem>
         <title>all classes relative to the JAR containing the persistence.xml file if element &lt;exclude-unlisted-classes&gt; is false. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>all the classes you list in the persistence.xml file; </title>
   <listitem>
      <title>all classes relative to the JAR containing the persistence.xml file if element &lt;exclude-unlisted-classes&gt; is false. </title>
   </listitem></sect1><sect1><title>all classes relative to the JAR containing the persistence.xml file if element &lt;exclude-unlisted-classes&gt; is false. </title>persistence.xml&lt;exclude-unlisted-classes&gt;false</sect1><sect1><title/></sect1><sect1><title>
      <anchor id="What_You_May_Need_to_Know_About_Weaving_and_Java_EE_Application_Servers"/>What You May Need to Know About Weaving and Java EE Application Servers</title></sect1><sect1><title>The default EclipseLink weaving behavior applies in any Java EE JPA-compliant application server using the EclipseLink JPA persistence provider.To change this behavior, modify your persistence.xml (for your JPA entities or POJO classes) to use EclipseLink JPA properties, EclipseLink JPA annotations, or both. </title>persistence.xml</sect1><sect1><title>For lazy loading (indirection) differences between Java EE and Java SE applications, see <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#EclipseLink_JPA_Support_for_Lazy_Loading_by_Mapping_Type">EclipseLink JPA Support for Lazy Loading by Mapping Type</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#EclipseLink_JPA_Support_for_Lazy_Loading_by_Mapping_Type">EclipseLink JPA Support for Lazy Loading by Mapping Type</ulink></sect1><sect1><title/></sect1><sect1><title>Using Weaving</title></sect1><sect1><title>Using EclipseLink JPA Weaving</title></sect1><sect1><title>Weaving is a technique of manipulating the byte-code of compiled Java classes. The EclipseLink JPA persistence provider uses weaving to enhance JPA entities for such things as lazy loading, change tracking, fetch groups, and internal optimizations. </title></sect1><sect1><title>Weaving can be performed either dynamically at runtime, when Entities are loaded, or statically at compile time by post-processing the Entity .class files. By default, EclipseLink uses dynamic weaving whenever possible. This includes inside an Java EE 5 application server and in Java SE when the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">EclipseLink agent</ulink> is configured. Dynamics weaving is recommended as it is easy to configure does not require any changes to a project's build process. </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">EclipseLink agent</ulink></sect1><sect1><title>This section describes the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">How to Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Static_Weaving_for_JPA_Entities">How to Configure Static Weaving for JPA Entities</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Disable_Weaving_Using_EclipseLink_Persistence_Unit_Propertie">How to Disable Weaving Using EclipseLink Persistence Unit Properties</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_JPA_Entities">What You May Need to Know About Weaving JPA Entities</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">How to Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">How to Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Static_Weaving_for_JPA_Entities">How to Configure Static Weaving for JPA Entities</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Static_Weaving_for_JPA_Entities">How to Configure Static Weaving for JPA Entities</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Static_Weaving_for_JPA_Entities">How to Configure Static Weaving for JPA Entities</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Disable_Weaving_Using_EclipseLink_Persistence_Unit_Propertie">How to Disable Weaving Using EclipseLink Persistence Unit Properties</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Disable_Weaving_Using_EclipseLink_Persistence_Unit_Propertie">How to Disable Weaving Using EclipseLink Persistence Unit Properties</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Disable_Weaving_Using_EclipseLink_Persistence_Unit_Propertie">How to Disable Weaving Using EclipseLink Persistence Unit Properties</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_JPA_Entities">What You May Need to Know About Weaving JPA Entities</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_JPA_Entities">What You May Need to Know About Weaving JPA Entities</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_JPA_Entities">What You May Need to Know About Weaving JPA Entities</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent"/>How to Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</title></sect1><sect1><title>Use this option to weave applicable class files one at a time, as they are loaded at run time. Consider this option when the number of classes to weave is few or the time taken to weave the classes is short. </title></sect1><sect1><title>If the number of classes to weave is large or the time required to weave the classes is long, consider using static weaving. For more information, see <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Static_Weaving_for_JPA_Entities">How to Configure Static Weaving for JPA Entities</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Static_Weaving_for_JPA_Entities">How to Configure Static Weaving for JPA Entities</ulink></sect1><sect1><title>To Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent </title>To Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent<orderedlist>
      <listitem>
         <title>Modify your application JVM command line to include the following: </title>
         <title>-javaagent:eclipselink.jar </title>
      </listitem>
      <listitem>
         <title>Ensure that the eclipselink.jar is in your application classpath. </title>
      </listitem>
      <listitem>
         <title>Package and deploy your application.For more information, see <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_an_EclipseLink_JPA_Application">Packaging an EclipseLink JPA Application</ulink>. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>Modify your application JVM command line to include the following: </title></sect1><sect1><title>-javaagent:eclipselink.jar </title>
   <listitem>
      <title>Ensure that the eclipselink.jar is in your application classpath. </title>
   </listitem></sect1><sect1><title>Ensure that the eclipselink.jar is in your application classpath. </title>eclipselink.jar<listitem>
      <title>Package and deploy your application.For more information, see <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_an_EclipseLink_JPA_Application">Packaging an EclipseLink JPA Application</ulink>. </title>
   </listitem></sect1><sect1><title>Package and deploy your application.For more information, see <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_an_EclipseLink_JPA_Application">Packaging an EclipseLink JPA Application</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_an_EclipseLink_JPA_Application">Packaging an EclipseLink JPA Application</ulink></sect1><sect1><title>EclipseLink weaves applicable class files one at a time, as they are loaded at run time. </title></sect1><sect1><title>
      <anchor id="How_to_Configure_Static_Weaving_for_JPA_Entities"/>How to Configure Static Weaving for JPA Entities</title></sect1><sect1><title>Use this option to weave all applicable class files at build time so that you can deliver pre-woven class files. Consider this option to weave all applicable class files at build time so that you can deliver prewoven class files. By doing so, you can improve application performance by eliminating the runtime weaving step required by dynamic weaving (see <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">How to Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</ulink>). </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#How_to_Configure_Dynamic_Weaving_for_JPA_Entities_Using_the_EclipseLink_Agent">How to Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent</ulink></sect1><sect1><title>In addition, consider using this option to weave in Java environments where you cannot configure an agent. </title></sect1><sect1><title>Prior to weaving, your persistence unit should be set-up in a way that is understood by eclipselink. There are two basic configurations: </title></sect1><sect1><title>1. A jar file - setup as specified in the JPA specification </title>1. A jar file - setup as specified in the JPA specification<orderedlist>
      <listitem>
         <title>classes stored at the base in directories based on their package structure </title>
      </listitem>
      <listitem>
         <title>a META-INF directory containing your persistence.xml. Note: Using the persistenceunitinfo setting below, you can avoid this requirement </title>
      </listitem>
   </orderedlist></sect1><sect1><title>classes stored at the base in directories based on their package structure </title>
   <listitem>
      <title>a META-INF directory containing your persistence.xml. Note: Using the persistenceunitinfo setting below, you can avoid this requirement </title>
   </listitem></sect1><sect1><title>a META-INF directory containing your persistence.xml. Note: Using the persistenceunitinfo setting below, you can avoid this requirement </title></sect1><sect1><title>e.g. mypersistenceunit.jar could contain </title>
   <orderedlist>
      <listitem>
         <title>mypackage/MyEntity1.class </title>
      </listitem>
      <listitem>
         <title>mypackage/MyEntity2.class </title>
      </listitem>
      <listitem>
         <title>mypackage2/MyEntity3.class </title>
      </listitem>
      <listitem>
         <title>META-INF/persistence.xml </title>
      </listitem>
   </orderedlist></sect1><sect1><title>mypackage/MyEntity1.class </title>mypackage/MyEntity1.class<listitem>
      <title>mypackage/MyEntity2.class </title>
   </listitem></sect1><sect1><title>mypackage/MyEntity2.class </title>mypackage/MyEntity2.class<listitem>
      <title>mypackage2/MyEntity3.class </title>
   </listitem></sect1><sect1><title>mypackage2/MyEntity3.class </title>mypackage2/MyEntity3.class<listitem>
      <title>META-INF/persistence.xml </title>
   </listitem></sect1><sect1><title>META-INF/persistence.xml </title>META-INF/persistence.xml</sect1><sect1><title>2. An exploded directory structure </title>2. An exploded directory structure<orderedlist>
      <listitem>
         <title>classes stored at the base in directories based on their package structure </title>
      </listitem>
      <listitem>
         <title>a META-INF directory containing your persistence.xml. Note: Using the persistenceunitinfo setting below, you can avoid this requirement </title>
      </listitem>
   </orderedlist></sect1><sect1><title>classes stored at the base in directories based on their package structure </title>
   <listitem>
      <title>a META-INF directory containing your persistence.xml. Note: Using the persistenceunitinfo setting below, you can avoid this requirement </title>
   </listitem></sect1><sect1><title>a META-INF directory containing your persistence.xml. Note: Using the persistenceunitinfo setting below, you can avoid this requirement </title></sect1><sect1><title>e.g. If your base directory was c:/classes, the exploded directory structure would look as follows: </title>
   <orderedlist>
      <listitem>
         <title>c:/classes/mypackage/MyEntity1.class </title>
      </listitem>
      <listitem>
         <title>c:/classes/mypackage/MyEntity2.class </title>
      </listitem>
      <listitem>
         <title>c:/classes/mypackage2/MyEntity3.class </title>
      </listitem>
      <listitem>
         <title>c:/classes/META-INF/persistence.xml </title>
      </listitem>
   </orderedlist></sect1><sect1><title>c:/classes/mypackage/MyEntity1.class </title>c:/classes/mypackage/MyEntity1.class<listitem>
      <title>c:/classes/mypackage/MyEntity2.class </title>
   </listitem></sect1><sect1><title>c:/classes/mypackage/MyEntity2.class </title>c:/classes/mypackage/MyEntity2.class<listitem>
      <title>c:/classes/mypackage2/MyEntity3.class </title>
   </listitem></sect1><sect1><title>c:/classes/mypackage2/MyEntity3.class </title>c:/classes/mypackage2/MyEntity3.class<listitem>
      <title>c:/classes/META-INF/persistence.xml </title>
   </listitem></sect1><sect1><title>c:/classes/META-INF/persistence.xml </title>c:/classes/META-INF/persistence.xml</sect1><sect1><title>
      <anchor id="To_Configure_Static_Weaving_for_JPA_Entities"/>To Configure Static Weaving for JPA Entities</title>
   <orderedlist>
      <listitem>
         <title>Execute the static static weaver in one of the following ways: </title>
      </listitem>
   </orderedlist></sect1><sect1><title>Execute the static static weaver in one of the following ways: </title></sect1><sect1><title>Use the weave Ant task as follows: </title>weave</sect1><sect1><title>Configure the weave Ant task in your build script, as this example shows. The <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-31">EclipseLink weave Ant Task Attributes</ulink> table lists the attributes of this task.<anchor id="Example_19-37"/>EclipseLink weave Ant Task </title>weave<ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-31">EclipseLink weave Ant Task Attributes</ulink>EclipseLink weave Ant Task</sect1><sect1><title>&lt;target name="define.task" description="New task definition for EclipseLink static weaving"/&gt;</title></sect1><sect1><title/></sect1><sect1><title>    &lt;taskdef name="weave" classname="org.eclipse.persistence.tools.weaving.jpa.StaticWeaveAntTask"/&gt;</title></sect1><sect1><title>&lt;/target&gt;</title></sect1><sect1><title>&lt;target name="weaving" description="perform weaving" depends="define.task"&gt;</title></sect1><sect1><title>    &lt;weave  source="c:\myjar.jar"</title></sect1><sect1><title>            target="c:\wovenmyjar.jar"</title></sect1><sect1><title>            persistenceinfo="c:\myjar-containing-persistenceinfo.jar"&gt;</title></sect1><sect1><title>        &lt;classpath&gt;</title></sect1><sect1><title>            &lt;pathelement path="c:\myjar-dependent.jar"/&gt;</title></sect1><sect1><title>        &lt;/classpath&gt;</title></sect1><sect1><title/></sect1><sect1><title>    &lt;/weave&gt;</title></sect1><sect1><title>&lt;/target&gt;</title></sect1><sect1><title>
      <anchor id="Table_19-31"/>EclipseLink weave Ant Task Attributes </title>EclipseLink weave Ant Task Attributes<informaltable frame="all">
      <tgroup cols="4"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t47"/>Attribute <anchor id="r1c2-t47"/>
               </para>
            </entry>
            <entry>
               <para>Description <anchor id="r1c3-t47"/>
               </para>
            </entry>
            <entry>
               <para>Default <anchor id="r1c4-t47"/>
               </para>
            </entry>
            <entry>
               <para>Required or Optional <anchor id="r2c1-t47"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>source </para>
            </entry>
            <entry>
               <para>Specifies the location of the Java source files to weave: either a directory or a JAR file. </para>
               <para>If the persistence.xml file is not in a META-INF directory at this location, you must specify the location of the persistence.xml using the persistenceinfo attribute. </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Required <anchor id="r3c1-t47"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>target </para>
            </entry>
            <entry>
               <para>Specifies the output location: either a directory or a JAR file. </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Required <anchor id="r4c1-t47"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>persistenceinfo </para>
            </entry>
            <entry>
               <para>Specifies the location of the persistence.xml file if it is not in the same location as the source. Note: persistence.xml should be put in a directory called META-INF at this location </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Optional <anchor id="r5c1-t47"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>log </para>
            </entry>
            <entry>
               <para>Specifies a logging file. </para>
            </entry>
            <entry>
               <para>See <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#Logging">Logging</ulink>. </para>
            </entry>
            <entry>
               <para>Optional <anchor id="r6c1-t47"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>loglevel </para>
            </entry>
            <entry>
               <para>Specifies the amount and detail of log output. </para>
               <para>Valid java.util.logging.Level values are the following: </para>
               <orderedlist>
                  <listitem>
                     <para>OFF </para>
                  </listitem>
                  <listitem>
                     <para>SEVERE </para>
                  </listitem>
                  <listitem>
                     <para>WARNING </para>
                  </listitem>
                  <listitem>
                     <para>INFO </para>
                  </listitem>
                  <listitem>
                     <para>CONFIG </para>
                  </listitem>
                  <listitem>
                     <para>FINE </para>
                  </listitem>
                  <listitem>
                     <para>FINER </para>
                  </listitem>
                  <listitem>
                     <para>FINEST </para>
                  </listitem>
               </orderedlist>
               <para>For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#Logging">Logging</ulink>. </para>
            </entry>
            <entry>
               <para>Level.OFF </para>
            </entry>
            <entry>
               <para>Optional </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable>
   <orderedlist>
      <listitem/>
   </orderedlist></sect1><sect1><title/>
   <informaltable frame="all">
      <tgroup cols="1"><tbody><row>
            <entry>
               <para>Note: If source and target point to the same location and, if the source is a directory (not a JAR file), EclipseLink will weave in place. If source and target point to different locations, or if the source is a JAR file (as the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Example_19-37">EclipseLink weave Ant Task</ulink> example shows), EclipseLink cannot weave in place. </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable>
   <orderedlist>
      <listitem/>
   </orderedlist></sect1><sect1><title/>
   <listitem>
      <title>Configure the weave task with an appropriate &lt;classpath&gt; element, as the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Example_19-37">EclipseLink weave Ant Task</ulink> example shows, so that EclipseLink can load all required source classes. </title>
   </listitem></sect1><sect1><title>Configure the weave task with an appropriate &lt;classpath&gt; element, as the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Example_19-37">EclipseLink weave Ant Task</ulink> example shows, so that EclipseLink can load all required source classes. </title>weave&lt;classpath&gt;<ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Example_19-37">EclipseLink weave Ant Task</ulink>
   <listitem>
      <title>Execute the Ant task using the command line that this example shows.In this example, the weave Ant task is in the build.xml file:<anchor id="Example_19-38"/>EclipseLink weave Ant Task Command Line </title>
      <title>ant -lib C:\eclipselink.jar -f build.xml weave</title>
   </listitem></sect1><sect1><title>Execute the Ant task using the command line that this example shows.In this example, the weave Ant task is in the build.xml file:<anchor id="Example_19-38"/>EclipseLink weave Ant Task Command Line </title>weavebuild.xmlEclipseLink weave Ant Task Command Line</sect1><sect1><title>ant -lib C:\eclipselink.jar -f build.xml weave</title>
   <informaltable frame="all">
      <tgroup cols="1"><tbody><row>
            <entry>
               <para>Note: You must specify the eclipselink.jar file (the JAR that contains the EclipseLink weave Ant task) using the Ant command line -lib option instead of using the taskdef attribute classpath. </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable>
   <orderedlist>
      <listitem/>
   </orderedlist></sect1><sect1><title/>
   <listitem>
      <title>Use the command line as follows: </title>
      <title>java org.eclipse.persistence.tools.weaving.jpa.StaticWeave [arguments] &lt;source&gt; &lt;target&gt; </title>
      <title>The following example shows how to use the StaticWeave class on Windows systems. The <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-32">EclipseLink StaticWeave Class Command Line Arguments</ulink> table lists the arguments of this class.<anchor id="Example_19-39"/>Executing StaticWeave on the Command Line </title>
      <title>java org.eclipse.persistence.tools.weaving.jpa.StaticWeave  -persistenceinfo c:\myjar-containing-persistencexml.jar </title>
      <title>-classpath c:\classpath1;c:\classpath2 c:\myjar-source.jar c:\myjar-target.jar</title>
      <title/>
      <title>
         <anchor id="Table_19-32"/>EclipseLink StaticWeave Class Command Line Arguments </title>
   </listitem></sect1><sect1><title>Use the command line as follows: </title></sect1><sect1><title>java org.eclipse.persistence.tools.weaving.jpa.StaticWeave [arguments] &lt;source&gt; &lt;target&gt; </title>java org.eclipse.persistence.tools.weaving.jpa.StaticWeave [arguments] &lt;source&gt; &lt;target&gt;</sect1><sect1><title>The following example shows how to use the StaticWeave class on Windows systems. The <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-32">EclipseLink StaticWeave Class Command Line Arguments</ulink> table lists the arguments of this class.<anchor id="Example_19-39"/>Executing StaticWeave on the Command Line </title>StaticWeave<ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-32">EclipseLink StaticWeave Class Command Line Arguments</ulink>Executing StaticWeave on the Command Line</sect1><sect1><title>java org.eclipse.persistence.tools.weaving.jpa.StaticWeave  -persistenceinfo c:\myjar-containing-persistencexml.jar </title></sect1><sect1><title>-classpath c:\classpath1;c:\classpath2 c:\myjar-source.jar c:\myjar-target.jar</title></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="Table_19-32"/>EclipseLink StaticWeave Class Command Line Arguments </title>EclipseLink StaticWeave Class Command Line Arguments<informaltable frame="all">
      <tgroup cols="4"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t50"/>Argument <anchor id="r1c2-t50"/>
               </para>
            </entry>
            <entry>
               <para>Description <anchor id="r1c3-t50"/>
               </para>
            </entry>
            <entry>
               <para>Default <anchor id="r1c4-t50"/>
               </para>
            </entry>
            <entry>
               <para>Required or Optional <anchor id="r2c1-t50"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>-persistenceinfo </para>
            </entry>
            <entry>
               <para>Specifies the location of the persistence.xml file if it is not at the same location as the source (see -classpath) Note: EclipseLink will look in a META-INF directory at that location for persistence.xml. </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Optional <anchor id="r3c1-t50"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>-classpath </para>
            </entry>
            <entry>
               <para>Specifies the location of the Java source files to weave: either a directory or a JAR file. For Windows systems, use delimiter " ; ", and for Unix, use delimiter " : ". </para>
               <para>If the persistence.xml file is not in this location, you must specify the location of the persistence.xml using the -persistenceinfo attribute. </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Required <anchor id="r4c1-t50"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>-log </para>
            </entry>
            <entry>
               <para>Specifies a logging file. </para>
            </entry>
            <entry>
               <para>See <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#Logging">Logging</ulink>. </para>
            </entry>
            <entry>
               <para>Optional <anchor id="r5c1-t50"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>-loglevel </para>
            </entry>
            <entry>
               <para>Specifies the amount and detail of log output. </para>
               <para>Valid java.util.logging.Level values are as follows: </para>
               <orderedlist>
                  <listitem>
                     <para>OFF </para>
                  </listitem>
                  <listitem>
                     <para>SEVERE </para>
                  </listitem>
                  <listitem>
                     <para>WARNING </para>
                  </listitem>
                  <listitem>
                     <para>INFO </para>
                  </listitem>
                  <listitem>
                     <para>CONFIG </para>
                  </listitem>
                  <listitem>
                     <para>FINE </para>
                  </listitem>
                  <listitem>
                     <para>FINER </para>
                  </listitem>
                  <listitem>
                     <para>FINEST </para>
                  </listitem>
               </orderedlist>
               <para>For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Sessions_%28ELUG%29#Logging">Logging</ulink>. </para>
            </entry>
            <entry>
               <para>Level.OFF </para>
            </entry>
            <entry>
               <para>Optional <anchor id="r6c1-t50"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>&lt;source&gt; </para>
            </entry>
            <entry>
               <para>Specifies the location of the Java source files to weave: either a directory or a JAR file. </para>
               <para>If the persistence.xml file is not in this location, you must specify the location of the persistence.xml using the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#-persistenceinfo">-persistenceinfo</ulink> attribute. </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Required <anchor id="r7c1-t50"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>&lt;target&gt; </para>
            </entry>
            <entry>
               <para>Specifies the output location: either a directory or a JAR file. </para>
            </entry>
            <entry>
               <para/>
            </entry>
            <entry>
               <para>Required </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable>
   <orderedlist>
      <listitem/>
   </orderedlist></sect1><sect1><title/>
   <informaltable frame="all">
      <tgroup cols="1"><tbody><row>
            <entry>
               <para>Note: If &lt;source&gt; and &lt;target&gt; point to the same location and if the &lt;source&gt; is a directory (not a JAR file), EclipseLink will weave in place. If &lt;source&gt; and &lt;target&gt; point to different locations, or if the source is a JAR file (as the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Example_19-39">Executing StaticWeave on the Command Line</ulink> example shows), EclipseLink cannot weave in place. </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable>
   <orderedlist>
      <listitem/>
      <listitem>
         <title>Configure your persistence.xml file with a <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving">eclipselink.weaving</ulink> extension set to static, as this example shows:<anchor id="Example_19-40"/>Setting eclipselink.weaving in the persistence.xml File </title>
         <title>&lt;persistence&gt;</title>
         <title>    &lt;persistence-unit name="HumanResources"&gt;</title>
         <title>        &lt;class&gt;com.acme.Employee&lt;/class&gt;</title>
         <title>        ...</title>
         <title>        &lt;properties&gt;</title>
         <title/>
         <title>            &lt;property</title>
         <title>                name="eclipselink.weaving"</title>
         <title>                value="static"</title>
         <title>            &gt;</title>
         <title>        &lt;/properties&gt;</title>
         <title>    &lt;/persistence-unit&gt;</title>
         <title>&lt;/persistence&gt;</title>
         <title>For more information, see the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-16">EclipseLink JPA Persistence Unit Properties for Customization and Validation</ulink> table. </title>
      </listitem>
      <listitem>
         <title>Package and deploy your application.For more information, see <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_and_Deploying_EclipseLink_JPA_Applications">Packaging and Deploying EclipseLink JPA Applications</ulink>. </title>
      </listitem>
   </orderedlist></sect1><sect1><title/>
   <listitem>
      <title>Configure your persistence.xml file with a <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving">eclipselink.weaving</ulink> extension set to static, as this example shows:<anchor id="Example_19-40"/>Setting eclipselink.weaving in the persistence.xml File </title>
      <title>&lt;persistence&gt;</title>
      <title>    &lt;persistence-unit name="HumanResources"&gt;</title>
      <title>        &lt;class&gt;com.acme.Employee&lt;/class&gt;</title>
      <title>        ...</title>
      <title>        &lt;properties&gt;</title>
      <title/>
      <title>            &lt;property</title>
      <title>                name="eclipselink.weaving"</title>
      <title>                value="static"</title>
      <title>            &gt;</title>
      <title>        &lt;/properties&gt;</title>
      <title>    &lt;/persistence-unit&gt;</title>
      <title>&lt;/persistence&gt;</title>
      <title>For more information, see the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-16">EclipseLink JPA Persistence Unit Properties for Customization and Validation</ulink> table. </title>
   </listitem></sect1><sect1><title>Configure your persistence.xml file with a <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving">eclipselink.weaving</ulink> extension set to static, as this example shows:<anchor id="Example_19-40"/>Setting eclipselink.weaving in the persistence.xml File </title>persistence.xml<ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving">eclipselink.weaving</ulink>staticSetting eclipselink.weaving in the persistence.xml File</sect1><sect1><title>&lt;persistence&gt;</title></sect1><sect1><title>    &lt;persistence-unit name="HumanResources"&gt;</title></sect1><sect1><title>        &lt;class&gt;com.acme.Employee&lt;/class&gt;</title></sect1><sect1><title>        ...</title></sect1><sect1><title>        &lt;properties&gt;</title></sect1><sect1><title/></sect1><sect1><title>            &lt;property</title></sect1><sect1><title>                name="eclipselink.weaving"</title></sect1><sect1><title>                value="static"</title></sect1><sect1><title>            &gt;</title></sect1><sect1><title>        &lt;/properties&gt;</title></sect1><sect1><title>    &lt;/persistence-unit&gt;</title></sect1><sect1><title>&lt;/persistence&gt;</title></sect1><sect1><title>For more information, see the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-16">EclipseLink JPA Persistence Unit Properties for Customization and Validation</ulink> table. </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-16">EclipseLink JPA Persistence Unit Properties for Customization and Validation</ulink>
   <listitem>
      <title>Package and deploy your application.For more information, see <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_and_Deploying_EclipseLink_JPA_Applications">Packaging and Deploying EclipseLink JPA Applications</ulink>. </title>
   </listitem></sect1><sect1><title>Package and deploy your application.For more information, see <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_and_Deploying_EclipseLink_JPA_Applications">Packaging and Deploying EclipseLink JPA Applications</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_and_Deploying_EclipseLink_JPA_Applications">Packaging and Deploying EclipseLink JPA Applications</ulink></sect1><sect1><title>
      <anchor id="How_to_Disable_Weaving_Using_EclipseLink_Persistence_Unit_Properties"/>How to Disable Weaving Using EclipseLink Persistence Unit Properties</title></sect1><sect1><title>To disable weaving, you use persistence unit properties. </title></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="To_Disable_Weaving_Using_EclipseLink_Persistence_Unit_Properties"/>To Disable Weaving Using EclipseLink Persistence Unit Properties</title>
   <orderedlist>
      <listitem>
         <title>Configure your persistence.xml file with one or more of the following properties set to false: </title>
         <title>This example shows how to disable weaving for change tracking only. <anchor id="Example_19-41"/>Disabling Weaving for Change Tracking in the persistence.xml File </title>
         <title>&lt;persistence&gt;</title>
         <title>    &lt;persistence-unit name="HumanResources"&gt;</title>
         <title>        &lt;class&gt;com.acme.Employee&lt;/class&gt;</title>
         <title/>
         <title>        ...</title>
         <title>        &lt;properties&gt;</title>
         <title>            &lt;property</title>
         <title>                name="eclipselink.weaving.changetracking"</title>
         <title>                value="false"</title>
         <title>            /&gt;</title>
         <title>        &lt;/properties&gt;</title>
         <title>    &lt;/persistence-unit&gt;</title>
         <title>&lt;/persistence&gt;</title>
         <title>The following example shows how to disable all weaving: in this example, EclipseLink does not weave for lazy loading (indirection), change tracking, or internal optimization. </title>
         <title>
            <anchor id="Example_19-42"/>Disabling All Weaving in the persistence.xml File </title>
         <title>&lt;persistence&gt;</title>
         <title>    &lt;persistence-unit name="HumanResources"&gt;</title>
         <title>        &lt;class&gt;com.acme.Employee&lt;/class&gt;</title>
         <title/>
         <title>        ...</title>
         <title>        &lt;properties&gt;</title>
         <title>            &lt;property</title>
         <title>                name="eclipselink.weaving"</title>
         <title>                value="false"</title>
         <title>            /&gt;</title>
         <title>        &lt;/properties&gt;</title>
         <title>    &lt;/persistence-unit&gt;</title>
         <title>&lt;/persistence&gt;</title>
         <title>For more information, see the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-16">EclipseLink JPA Persistence Unit Properties for Customization and Validation</ulink> table. </title>
      </listitem>
      <listitem>
         <title>Package and and deploy your application. For more information, see <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_and_Deploying_EclipseLink_JPA_Applications">Packaging and Deploying EclipseLink JPA Applications</ulink>. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>Configure your persistence.xml file with one or more of the following properties set to false: </title>persistence.xmlfalse</sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving">eclipselink.weaving</ulink> – disables all weaving; </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving">eclipselink.weaving</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.lazy">eclipselink.weaving.lazy</ulink> – disables weaving for lazy loading (indirection); </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.lazy">eclipselink.weaving.lazy</ulink> – disables weaving for lazy loading (indirection); </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.lazy">eclipselink.weaving.lazy</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.changetracking">eclipselink.weaving.changetracking</ulink> – disables weaving for change tracking; </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.changetracking">eclipselink.weaving.changetracking</ulink> – disables weaving for change tracking; </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.changetracking">eclipselink.weaving.changetracking</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.fetchgroups">eclipselink.weaving.fetchgroups</ulink> – disables weaving for fetch groups. </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.fetchgroups">eclipselink.weaving.fetchgroups</ulink> – disables weaving for fetch groups. </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.fetchgroups">eclipselink.weaving.fetchgroups</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.internal">eclipselink.weaving.internal</ulink> – disables weaving for internal optimization. </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.internal">eclipselink.weaving.internal</ulink> – disables weaving for internal optimization. </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.internal">eclipselink.weaving.internal</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.eager">eclipselink.weaving.eager</ulink> – disables weaving for indirection on eager relationships.</title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.eager">eclipselink.weaving.eager</ulink> – disables weaving for indirection on eager relationships.</title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#eclipselink.weaving.eager">eclipselink.weaving.eager</ulink></sect1><sect1><title>This example shows how to disable weaving for change tracking only. <anchor id="Example_19-41"/>Disabling Weaving for Change Tracking in the persistence.xml File </title>Disabling Weaving for Change Tracking in the persistence.xml File</sect1><sect1><title>&lt;persistence&gt;</title></sect1><sect1><title>    &lt;persistence-unit name="HumanResources"&gt;</title></sect1><sect1><title>        &lt;class&gt;com.acme.Employee&lt;/class&gt;</title></sect1><sect1><title/></sect1><sect1><title>        ...</title></sect1><sect1><title>        &lt;properties&gt;</title></sect1><sect1><title>            &lt;property</title></sect1><sect1><title>                name="eclipselink.weaving.changetracking"</title></sect1><sect1><title>                value="false"</title></sect1><sect1><title>            /&gt;</title></sect1><sect1><title>        &lt;/properties&gt;</title></sect1><sect1><title>    &lt;/persistence-unit&gt;</title></sect1><sect1><title>&lt;/persistence&gt;</title></sect1><sect1><title>The following example shows how to disable all weaving: in this example, EclipseLink does not weave for lazy loading (indirection), change tracking, or internal optimization. </title></sect1><sect1><title>
      <anchor id="Example_19-42"/>Disabling All Weaving in the persistence.xml File </title>Disabling All Weaving in the persistence.xml File</sect1><sect1><title>&lt;persistence&gt;</title></sect1><sect1><title>    &lt;persistence-unit name="HumanResources"&gt;</title></sect1><sect1><title>        &lt;class&gt;com.acme.Employee&lt;/class&gt;</title></sect1><sect1><title/></sect1><sect1><title>        ...</title></sect1><sect1><title>        &lt;properties&gt;</title></sect1><sect1><title>            &lt;property</title></sect1><sect1><title>                name="eclipselink.weaving"</title></sect1><sect1><title>                value="false"</title></sect1><sect1><title>            /&gt;</title></sect1><sect1><title>        &lt;/properties&gt;</title></sect1><sect1><title>    &lt;/persistence-unit&gt;</title></sect1><sect1><title>&lt;/persistence&gt;</title></sect1><sect1><title>For more information, see the <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-16">EclipseLink JPA Persistence Unit Properties for Customization and Validation</ulink> table. </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Table_19-16">EclipseLink JPA Persistence Unit Properties for Customization and Validation</ulink>
   <listitem>
      <title>Package and and deploy your application. For more information, see <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_and_Deploying_EclipseLink_JPA_Applications">Packaging and Deploying EclipseLink JPA Applications</ulink>. </title>
   </listitem></sect1><sect1><title>Package and and deploy your application. For more information, see <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_and_Deploying_EclipseLink_JPA_Applications">Packaging and Deploying EclipseLink JPA Applications</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Packaging_and_Deploying_EclipseLink_JPA_Applications_%28ELUG%29#Packaging_and_Deploying_EclipseLink_JPA_Applications">Packaging and Deploying EclipseLink JPA Applications</ulink></sect1><sect1><title>
      <anchor id="What_You_May_Need_to_Know_About_Weaving_JPA_Entities"/>What You May Need to Know About Weaving JPA Entities</title></sect1><sect1><title>The EclipseLink JPA persistence provider uses weaving to enable the following features for JPA entities: </title>
   <orderedlist>
      <listitem>
         <title>lazy loading (indirection): see <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Lazy_Loading">How to Configure Lazy Loading</ulink>; </title>
      </listitem>
      <listitem>
         <title>change tracking: see <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Change_Tracking">How to Configure Change Tracking</ulink>; </title>
      </listitem>
      <listitem>
         <title>fetch groups: see <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Fetch_Groups">How to Configure Fetch Groups</ulink>; </title>
      </listitem>
      <listitem>
         <title>internal optimizations: see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29">Optimizing the EclipseLink Application</ulink>. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>lazy loading (indirection): see <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Lazy_Loading">How to Configure Lazy Loading</ulink>; </title>
   <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Lazy_Loading">How to Configure Lazy Loading</ulink>
   <listitem>
      <title>change tracking: see <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Change_Tracking">How to Configure Change Tracking</ulink>; </title>
   </listitem></sect1><sect1><title>change tracking: see <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Change_Tracking">How to Configure Change Tracking</ulink>; </title>
   <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Change_Tracking">How to Configure Change Tracking</ulink>
   <listitem>
      <title>fetch groups: see <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Fetch_Groups">How to Configure Fetch Groups</ulink>; </title>
   </listitem></sect1><sect1><title>fetch groups: see <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Fetch_Groups">How to Configure Fetch Groups</ulink>; </title>
   <ulink url="http://wiki.eclipse.org/Developing_Applications_Using_EclipseLink_JPA_%28ELUG%29#How_to_Configure_Fetch_Groups">How to Configure Fetch Groups</ulink>
   <listitem>
      <title>internal optimizations: see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29">Optimizing the EclipseLink Application</ulink>. </title>
   </listitem></sect1><sect1><title>internal optimizations: see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29">Optimizing the EclipseLink Application</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29">Optimizing the EclipseLink Application</ulink></sect1><sect1><title>EclipseLink weaves all the JPA entities in a given persistence unit. That is the following: </title>
   <orderedlist>
      <listitem>
         <title>all classes you list in persistence.xml file; </title>
      </listitem>
      <listitem>
         <title>if element &lt;exclude-unlisted-classes&gt; is false, or deployed in Java EE, all classes in the JAR file containing the persistence.xml file; </title>
      </listitem>
      <listitem>
         <title>all classes you list in the orm.xml file. </title>
      </listitem>
   </orderedlist></sect1><sect1><title>all classes you list in persistence.xml file; </title>persistence.xml<listitem>
      <title>if element &lt;exclude-unlisted-classes&gt; is false, or deployed in Java EE, all classes in the JAR file containing the persistence.xml file; </title>
   </listitem></sect1><sect1><title>if element &lt;exclude-unlisted-classes&gt; is false, or deployed in Java EE, all classes in the JAR file containing the persistence.xml file; </title>&lt;exclude-unlisted-classes&gt;falsepersistence.xml<listitem>
      <title>all classes you list in the orm.xml file. </title>
   </listitem></sect1><sect1><title>all classes you list in the orm.xml file. </title>orm.xml</sect1><sect1><title>For more information, see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_and_Java_EE_Application_Servers">What You May Need to Know About Weaving and Java EE Application Servers</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#What_You_May_Need_to_Know_About_Weaving_and_Java_EE_Application_Servers">What You May Need to Know About Weaving and Java EE Application Servers</ulink></sect1><sect1><title/></sect1><sect1><title/></sect1><sect1><title>Fetch Groups</title></sect1><sect1><title>Configuring Fetch Groups</title></sect1><sect1><title>By default, when you execute an object-level read query for a particular object class, EclipseLink returns all the persistent attributes mapped in the object's descriptor. With this single query, all the object's persistent attributes are defined, and calling their get methods returns the value directly from the object. </title>get</sect1><sect1><title>When you are interested in only some of the attributes of an object, it may be more efficient to return only a subset of the object's attributes using a fetch group. </title></sect1><sect1><title>Using a fetch group, you can define a subset of an object's attributes and associate the fetch group with either a ReadObjectQuery or ReadAllQuery query. When you execute the query, EclipseLink retrieves only the attributes in the fetch group. EclipseLink automatically executes a query to fetch all the attributes excluded from this subset when and if you call a get method on any one of the excluded attributes. </title>ReadObjectQueryReadAllQueryget</sect1><sect1><title>You can define more than one fetch group for a class. You can optionally designate at most one such fetch group as the default fetch group. If you execute either a ReadObjectQuery or ReadAllQuery query without specifying a fetch group, EclipseLink will use the default fetch group, unless you configure the query otherwise (see <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#How_to_Configure_Default_Fetch_Group_Behavior">How to Configure Default Fetch Group Behavior</ulink>). </title>ReadObjectQueryReadAllQuery<ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#How_to_Configure_Default_Fetch_Group_Behavior">How to Configure Default Fetch Group Behavior</ulink></sect1><sect1><title>You can use fetch groups in JPA projects for EJB objects, as well as for POJO classes. For POJO classes, use partial object querying (see <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Partial_Object_Queries">Partial Object Queries</ulink>). </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Partial_Object_Queries">Partial Object Queries</ulink></sect1><sect1><title>Before using fetch groups, we recommend that you perform a careful analysis of system use. In many cases, the extra queries required to load attributes not in the fetch group could well offset the gain from the partial attribute loading. For more information about optimizing read performance, see <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Read_Optimization_Examples">Read Optimization Examples</ulink>. </title>
   <ulink url="http://wiki.eclipse.org/Optimizing_the_EclipseLink_Application_%28ELUG%29#Read_Optimization_Examples">Read Optimization Examples</ulink></sect1><sect1><title>This table summarizes which descriptors support fetch group configuration. </title></sect1><sect1><title>
      <anchor id="Table_115-38"/>
   </title>
   <informaltable frame="all">
      <tgroup cols="3"><tbody><row>
            <entry>
               <para>
                  <anchor id="r1c1-t75"/>Descriptor <anchor id="r1c2-t75"/>
               </para>
            </entry>
            <entry>
               <para>Using Workbench <anchor id="r1c3-t75"/>
               </para>
            </entry>
            <entry>
               <para>
                  <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#How_to_Configure_Fetch_Groups_Using_Java">Using Java</ulink>
                  <anchor id="r2c1-t75"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Relational Descriptors </para>
            </entry>
            <entry>
               <para>
                  <inlinegraphic fileref="http://wiki.eclipse.org/images/9/9b/Unsupport.gif" width="0.1665inch"
                                 depth="0.1665inch"/>
               </para>
            </entry>
            <entry>
               <para>
                  <inlinegraphic fileref="http://wiki.eclipse.org/images/d/d4/Support.gif" width="0.1665inch"
                                 depth="0.1665inch"/>
                  <anchor id="r3c1-t75"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>Object-Relational Data Type Descriptors </para>
            </entry>
            <entry>
               <para>
                  <inlinegraphic fileref="http://wiki.eclipse.org/images/9/9b/Unsupport.gif" width="0.1665inch"
                                 depth="0.1665inch"/>
               </para>
            </entry>
            <entry>
               <para>
                  <inlinegraphic fileref="http://wiki.eclipse.org/images/d/d4/Support.gif" width="0.1665inch"
                                 depth="0.1665inch"/>
                  <anchor id="r4c1-t75"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>EIS Descriptors </para>
            </entry>
            <entry>
               <para>
                  <inlinegraphic fileref="http://wiki.eclipse.org/images/9/9b/Unsupport.gif" width="0.1665inch"
                                 depth="0.1665inch"/>
               </para>
            </entry>
            <entry>
               <para>
                  <inlinegraphic fileref="http://wiki.eclipse.org/images/9/9b/Unsupport.gif" width="0.1665inch"
                                 depth="0.1665inch"/>
                  <anchor id="r5c1-t75"/>
               </para>
            </entry>
         </row>
         <row>
            <entry>
               <para>XML Descriptors </para>
            </entry>
            <entry>
               <para>
                  <inlinegraphic fileref="http://wiki.eclipse.org/images/9/9b/Unsupport.gif" width="0.1665inch"
                                 depth="0.1665inch"/>
               </para>
            </entry>
            <entry>
               <para>
                  <inlinegraphic fileref="http://wiki.eclipse.org/images/9/9b/Unsupport.gif" width="0.1665inch"
                                 depth="0.1665inch"/>
               </para>
            </entry>
         </row></tbody></tgroup>
   </informaltable></sect1><sect1><title/></sect1><sect1><title>For JPA entities or POJO classes that you configure for weaving, EclipseLink uses fetch groups to improve performance. </title></sect1><sect1><title>This section describes how to create a fetch group, store it in a descriptor, and optionally designate a fetch group as the default fetch group for its descriptor reference class. </title></sect1><sect1><title>For more information, see the following: </title>
   <orderedlist>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_Descriptors_%28ELUG%29#Fetch_Groups">Fetch Groups</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Fetch_Groups_and_Object-Level_Read_Queries">Fetch Groups and Object-Level Read Queries</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#How_to_Configure_Default_Fetch_Group_Behavior">How to Configure Default Fetch Group Behavior</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Using_Weaving">Using Weaving</ulink> 
         </title>
      </listitem>
      <listitem>
         <title>
            <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Using_EclipseLink_JPA_Weaving">Using EclipseLink JPA Weaving</ulink> 
         </title>
      </listitem>
   </orderedlist></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_Descriptors_%28ELUG%29#Fetch_Groups">Fetch Groups</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_Descriptors_%28ELUG%29#Fetch_Groups">Fetch Groups</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Fetch_Groups_and_Object-Level_Read_Queries">Fetch Groups and Object-Level Read Queries</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Fetch_Groups_and_Object-Level_Read_Queries">Fetch Groups and Object-Level Read Queries</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Queries_%28ELUG%29#Fetch_Groups_and_Object-Level_Read_Queries">Fetch Groups and Object-Level Read Queries</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#How_to_Configure_Default_Fetch_Group_Behavior">How to Configure Default Fetch Group Behavior</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#How_to_Configure_Default_Fetch_Group_Behavior">How to Configure Default Fetch Group Behavior</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#How_to_Configure_Default_Fetch_Group_Behavior">How to Configure Default Fetch Group Behavior</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Using_Weaving">Using Weaving</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Using_Weaving">Using Weaving</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Introduction_to_EclipseLink_Application_Development_%28ELUG%29#Using_Weaving">Using Weaving</ulink>
   <listitem>
      <title>
         <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Using_EclipseLink_JPA_Weaving">Using EclipseLink JPA Weaving</ulink> 
      </title>
   </listitem></sect1><sect1><title>
      <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Using_EclipseLink_JPA_Weaving">Using EclipseLink JPA Weaving</ulink> 
   </title>
   <ulink url="http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29#Using_EclipseLink_JPA_Weaving">Using EclipseLink JPA Weaving</ulink></sect1><sect1><title/></sect1><sect1><title>
      <anchor id="How_to_Configure_Fetch_Groups_Using_Java"/>How to Configure Fetch Groups Using Java</title></sect1><sect1><title>To configure a fetch group, Use a <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Amendment_Methods">descriptor amendment method</ulink> as this example shows. </title>
   <ulink url="http://wiki.eclipse.org/Configuring_a_Descriptor_%28ELUG%29#Configuring_Amendment_Methods">descriptor amendment method</ulink></sect1><sect1><title>
      <anchor id="Example_115-27"/>Configuring a Fetch Group </title>Configuring a Fetch Group</sect1><sect1><title>//Create a FetchGroupManager for the descriptor</title></sect1><sect1><title/></sect1><sect1><title>descriptor.setFetchGroupManager(new FetchGroupManager());</title></sect1><sect1><title>// Create a FetchGroup</title></sect1><sect1><title>FetchGroup group = new FetchGroup("nameOnly");</title></sect1><sect1><title>// Add attributes to FetchGroup. Alternatively, use</title></sect1><sect1><title>// FetchGroup method addAttributes, passing in a Set of String attribute names</title></sect1><sect1><title>group.addAttribute("firstName");</title></sect1><sect1><title>group.addAttribute("lastName");</title></sect1><sect1><title>// Add the FetchGroup to the FetchGroupManager</title></sect1><sect1><title>descriptor.getFetchGroupManager().addFetchGroup(group);</title></sect1><sect1><title>//Set the default fetch group</title></sect1><sect1><title>descriptor.getFetchGroupManager().setDefaultFetchGroup(group);</title></sect1><sect1><title/></sect1><sect1><title>Each instance of FetchGroup that you store in a descriptor must be configured with a fetch group name that is unique for that descriptor (that is, each descriptor owns a set of named fetch groups). </title>FetchGroup</sect1><sect1><title>When configuring fetch groups, note that the primary key fields and other required fields (such as inheritance type and optimistic lock version) are always included in all fetch groups.Fetch groups can include direct and relationship attributes. Including a relationship attribute in a fetch group does not cause the relationship to be joined or instantiated: joining and indirection are set independently of fetch groups. </title></sect1><sect1><title>After you add a fetch group to a descriptor, you can configure a ReadObjectQuery or ReadAllQuery query with this fetch group by name (nameOnly) or rely on EclipseLink to use this fetch group by default. For more information, see <ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#Using_Queries_with_Fetch_Groups">Using Queries with Fetch Groups</ulink>. </title>ReadObjectQueryReadAllQuerynameOnly<ulink url="http://wiki.eclipse.org/Using_Advanced_Query_API_%28ELUG%29#Using_Queries_with_Fetch_Groups">Using Queries with Fetch Groups</ulink></sect1><sect1><title/></sect1></article>