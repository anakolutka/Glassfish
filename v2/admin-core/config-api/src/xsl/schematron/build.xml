<?xml version="1.0"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<project name="" default="compile-schematron" basedir=".">

  
  <!-- need to use this version of xalan (2.6) because the one in the jaxp-ri doesn't work properly -->
  <property name="xalan.jar" location="./xalan.jar"/>
  <property name="root.dir" location="../../../../.."/>
  <property file="${root.dir}/bootstrap/glassfish.properties"/>
  <property name="schematron.tests.dir" location="${root.dir}/appserv-tests/devtests/admin-core/config-api/src/xsl/schematron"/>
  <property name="publish.home.dir" location="${root.dir}/publish/${java.obj.dir}"/>
  <property name="jaxp" value="${publish.home.dir}/jaxp-ri"/>
  <property name="xalan.jar" location="${jaxp}/lib/xalan.jar"/>
  <property name="validation-package" location="${publish.home.dir}/admin/validator/lib/validator.jar"/>
  <property name="config-beans" location="${publish.home.dir}/appserv-commons/lib/appserv-commons.jar"/>
  <property name="schema2beans" location="${publish.home.dir}/netbeans/modules/schema2beans.jar"/>
  <property name="serverbeans" location="${publish.home.dir}/admin-core/config-api/lib/config-api.jar"/>

  <property name="sch.dir" value="../../../sch"/>
  <!-- various files used to convert domain schematron into a message catalog -->
  <property name="message.catalog.xsl" location="message-catalog.xsl"/>

  <!-- these will be used when/if I figure out jarv validation - see MakeCatalog for the implementation -->
  <property name="msv-jarv" location="${publish.home.dir}/jaxb/lib/jaxb-libs.jar"/>
  <property name="relaxngDatatype.jar" location="${publish.home.dir}/relaxngDatatype/lib/relaxngDatatype.jar"/>
  <property name="xsdlib.jar" location="${publish.home.dir}/xsdlib/lib/xsdlib.jar"/>

  <property name="junit.jar" location="${publish.home.dir}/junit/junit.jar"/>

  <path id="run.classpath">
    <pathelement location="tmp"/>
    <pathelement location="${relaxngDatatype.jar}"/>
    <pathelement location="${xsdlib.jar}"/>
    <pathelement location="${config-beans}"/>
    <pathelement location="${schema2beans}"/>
    <pathelement location="${serverbeans}"/>
    <path refid="compile.classpath"/>
  </path>
  

  <!-- Schematron stylesheets -->
  <property name="test2.xsl" location="schematron-test2.xsl"/>
  <property name='test.report.xsl' location="schematron-test-report.xsl"/>
  <property name="synch.xsl" location="schematron-synch.xsl"/>
  <property name="skeleton" location="skeleton1-5.xsl"/>
  <property name="meta-stylesheet" location="schematron-message-catalog.xsl"/>
  <property name="schematron.basic" location="schematron-basic.xsl"/>


  <!-- meta stylesheets -->
  <property name="domain.sch" location="${sch.dir}/domain.sch"/>
  <property name="result.sch" value="test-result.sch"/>

  <!-- The test splitting stylesheet -->
  <property name="extractor.xsl" value="test-extractor.xsl"/>

  <property name="schematron.cleaner" location="schematron-cleaner.xsl"/>

  <!-- Directories for intermediate results -->
  <property name="tmp.dir" value="tmp"/>
  <property name="tests.dir" location="tests"/>

  <!-- temporary files -->
  <property name="test.result" value="${tmp.dir}/test-result.xml"/>
  <property name="test.report" value="${tmp.dir}/test-report.txt"/>
  <property name="clean.schematron" value="${tmp.dir}/clean-schematron.sch"/>
  <property name="message.catalog.xml" value="${tmp.dir}/message-catalog.xml"/>
  <property name="properties.resource.bundle" value="${tmp.dir}/LocalStrings.properties"/>

  <property name="compiled.schematron" location="build/domain.xsl"/>

  <!--
    compile the schematron into a single file with no test data.
  -->
  <target name="compile-schematron" 
	  description="compile the schematron into a single file with
	  no test data, and construct a PropertiesResourceBundle for the messages">

    <xslt in="${domain.sch}"
	  style="${schematron.cleaner}"
	  out="${clean.schematron}"/>

    <xslt in="${clean.schematron}"
	  style="${meta-stylesheet}"
	  out="${compiled.schematron}"/>

    <antcall target="make.properties.resource.bundle"
	     inheritAll="false"/>
  </target>

  <target name="make.properties.resource.bundle"
	     description="construct a PropertiesResourceBundle from
	     the messages in ${domain.sch}">
    <antcall target="make.message.catalog" inheritAll="false"/>
    <antcall target="convert.catalog.to.properties.resource.bundle" inheritAll="false"/>
  </target>

  <target name="make.message.catalog"
	  description="convert ${domain.sch} into an xml message catalog">
    <xslt in="${domain.sch}"
	  style="${message.catalog.xsl}"
	  out="${message.catalog.xml}"/>
  </target>

  <target name="convert.catalog.to.properties.resource.bundle" depends="compile.java.srcs">
    <java classname="MakeCatalog"
	  classpathref="run.classpath"
	  fork="yes"
	  failonerror="yes">
      <arg value="com.sun.enterprise.config.serverbeans.validation.DomainXmlVerifier"/>
      <arg value="${message.catalog.xml}"/>
      <arg value="${properties.resource.bundle}"/>
    </java>
  </target>
  
  <target name="test" description="Main target - test
	  domain.sch. Deletes all temporary files afterwards">
    <antcall target="testSchema">
      <param name="schema-under-test" value="${domain.sch}"/>
    </antcall>
    <antcall target="clean"/>
  </target>

  <target name="testNoClean"
	  description="Main target - test domain.sch, but don't delete
	  any temporary files. Useful for debugging!">
    <antcall target="testSchema">
      <param name="schema-under-test" value="${domain.sch}"/>
    </antcall>
  </target>


  <target name="init">
    <mkdir dir="${tmp.dir}"/>
    <mkdir dir="${tests.dir}"/>
  </target>
  
  <target name="testSchema" depends="clean, init"
	  description="utility target that tests the
	  ${schema-under-test}, reporting results on stdout">

    <antcall target="check-valid-test-src" inheritAll="false">
      <param name="test-src" value="${schema-under-test}"/>
      <param name="test-out" value="tmp/test-out.xml"/>
    </antcall>
    <concat>
      <filelist dir="." files="tmp/test-out.xml"/>
    </concat>

    <!--
    Extract the tests into the default directory "tests"
    -->
    <antcall target="extract-tests" inheritAll="false">
      <param name="test-src" value="${schema-under-test}"/>
    </antcall>

    <!-- Clean the schematron -->
    <antcall target='clean-schematron' inheritAll="false"> 
      <param name="in" value="${schema-under-test}"/>
      <param name="out" value="${clean.schematron}"/>
    </antcall>

    <!-- test the schematron, using the cleaned schematron, by
	 analyzing each and every test case from the test directory -->
    <antcall target="schematron.with.param" inheritAll="false">
      <param name="schema" value="${clean.schematron}"/>
      <param name="meta" value="${test2.xsl}"/>
      <param name="in" value="${schema-under-test}"/>
      <param name="out" value="${test.result}"/>
      <param name="param.name" value="test.dir"/>
      <param name="param.expr" value="${tests.dir}"/>
    </antcall>

    <!-- analyze the results -->
    <antcall target="schematron" inheritAll="false">
      <param name="schema" value="${result.sch}"/>
      <param name="meta" value="${test.report.xsl}"/>
      <param name="in" value="${test.result}"/>
      <param name="out" value="${test.report}"/>
    </antcall>

    <!-- print the results to stdout -->
    <concat>
      <filelist dir="." files="${test.report}"/>
    </concat>
    
  </target>

  <!--
    Check that the input schematron obeys the rules for a schematron
    with embedded tests, placing the results (if any) on stdout
  -->
  <target name="check-valid-test-src"
	  description="check that ${test-src} is a schematron with
	  well-formed embedded tests, producing results in ${test-out}">
    <property name="test.sch" value="${sch.dir}/test.sch"/>
    <condition property="src">
      <available file="${test-src}"/>
    </condition>
    <fail unless="src">No test-src parameter</fail>
    <antcall target="schematron">
      <param name="schema" value="${test.sch}"/>
      <param name="meta" value="${schematron.basic}"/>
      <param name="in" value="${test-src}"/>
      <param name="out" value="${test-out}"/>
    </antcall>
  </target>
  <!--
  Extract the tests to the default directory
  -->
  <target name="extract-tests">
  <!-- Need to use xalan to get xalan extensions (redirect) -->
    <java fork="yes" jar="${xalan.jar}" failonerror="true">
      <arg value="-in"/><arg value="${test-src}"/>
      <arg value="-xsl"/><arg value="${extractor.xsl}"/>
      <arg value='-param'/><arg value="test.dir"/><arg value="${tests.dir}"/>
    </java>
  </target>

  <!-- clean the schematron by extracting all non-schematron stuff -->
  <target name="clean-schematron">
    <xslt in="${in}"
          style="${schematron.cleaner}"
          out="${out}"/>
  </target>

  <!--
  process the schematron (schema) with the meta-stylesheet (meta), and
  apply the result to the input (in) to give output stylesheet (out) 
  -->
  <target name="schematron">
    <tempfile property="sch" prefix="temp" suffix=".xsl"/>
    <xslt in="${schema}" style="${meta}" out="${sch}"/>
    <xslt in="${in}" style="${sch}" out="${out}"/>
    <!-- <delete file="${sch}"/> -->
  </target>

  <!--
  process the schematron (schema) with the meta-stylesheet (meta), and
  apply the result to the input (in) to give output stylesheet (out),
  with the additional param (param)
  -->
  <target name="schematron.with.param">
    <tempfile property="sch" prefix="temp" suffix=".xsl"/>
    <xslt in="${schema}" style="${meta}" out="${sch}"/>
    <xslt in="${in}" style="${sch}" out="${out}">
      <param name="${param.name}" expression="${param.expr}"/>
    </xslt>
  </target>

  <!--
    Validate that domain.sch is in synch with the contents of the rng
    directory
  -->

  <target name="validate" depends="validate.domain.sch.against.top.rng, validate.top.rng.against.domain.sch, validate.unique.message.ids, schematron.validation"
	  description="validate domain.sch and top.rng against one another"/>

  <target name="schematron.validation"
	  description="validate domain.sch against schematron 1.5 schematron">
    <antcall target="schematron.report" inheritAll="false">
      <param name="schema" value="../../../sch/schematron1-5.sch"/>
      <param name="meta" value="${synch.xsl}"/>
      <param name="in" value="${domain.sch}"/>
    </antcall>
    
  </target>

  <target name="validate.unique.message.ids"
	  description="validate that message ids are unique in domain.sch">
    <antcall target="schematron.report" inheritAll="false">
      <param name="schema" value="../../../sch/messageIdsAreUnique.sch"/>
      <param name="meta" value="${synch.xsl}"/>
      <param name="in" value="${domain.sch}"/>
    </antcall>
  </target>
  
  <target name="validate.domain.sch.against.top.rng"
          description="validate that elements in domain.sch are in TOP.rng">
    <property name="elementsInDomainAreInTop.sch" value="../../../sch/elementsInDomainAreInTop.sch"/>
    <antcall target="schematron.report" inheritAll="false">
      <param name="schema" value="${elementsInDomainAreInTop.sch}"/>
      <param name="meta" value="${synch.xsl}"/>
      <param name="in" value="${domain.sch}"/>
    </antcall>
  </target>

  <!-- run a schematron and print the results to stdout -->

  <target name="schematron.report">
    <property name="synch.test.report" value="${tmp.dir}/synch_test_report.txt"/>
    <antcall target="schematron">
      <param name="schema" value="${schema}"/>
      <param name="meta" value="${meta}"/>
      <param name="in" value="${in}"/>
      <param name="out" value="${synch.test.report}"/>
    </antcall>
    <concat>
      <filelist dir="." files="${synch.test.report}"/>
    </concat>
    <delete file="${synch.test.report}"/>
  </target>

    <target name="validate.top.rng.against.domain.sch"
	    description="validate that each element in TOP.rng is in domain.sch">
      <property name="elementsInTopAreInDomain.sch" location="../../../sch/elementsInTopAreInDomain.sch"/>
      <property name="top.rng" location="../../../rng/TOP.rng"/>
      <antcall target="schematron.report" inheritAll="false">
	<param name="schema" value="${elementsInTopAreInDomain.sch}"/>
	<param name="meta" value="${schematron.basic}"/>
	<param name="in" value="${top.rng}"/>
      </antcall>
    </target>
  
  <!-- make docs - incomplete -->
  <target name="validation.docs"
	  description="Make documentation about the schematron validation system">
    <mkdir dir="${docs.dir}"/>
    <xslt in="${domain.schematron}"
	  style="${document.xsl}"
	  out="${domain.html}"/>
  </target>

  <target name="unitTests" depends="compile.java.tests"
	  description="run all the unit tests">
    <java classname="MakeCatalogTest"
	  classpathref="run.classpath"
	  fork="true"/>
  </target>
  
  <path id="compile.classpath">
    <pathelement location="${msv-jarv}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${validation-package}"/>
  </path>

  <target name="compile.java.tests" depends="compile.java.srcs"
	  description="compile the tests into the tmp directory">
        <javac srcdir="${schematron.tests.dir}" 
            destdir="${tmp.dir}"
            debug="true" 
            optimize="false"
            source="1.4" 
            deprecation="${javac.deprecation}"
            failonerror="true">
            <classpath refid="compile.classpath"/>
            <include name="**/*.java"/>
        </javac>
    
  </target>
  <target name="compile.java.srcs" depends="init"
	  description="compile any and all java sources into the tmp directory">
        <javac srcdir="." 
            destdir="${tmp.dir}"
            debug="${javac.debug}" 
            optimize="${javac.optimize}"
            source="${javac.source}" 
            deprecation="${javac.deprecation}"
            failonerror="true">
            <classpath refid="compile.classpath"/>
            <include name="**/*.java"/>
        </javac>
  </target>

  <!-- Kill off everything -->
  <target name="clobber" depends='clean'>
    <delete file="build/domain.xsl"/>
  </target>
  
  <target name="clean">
    <delete dir="${tmp.dir}"/>
    <delete dir="${tests.dir}"/>
    <delete>
      <fileset dir="." includes="temp*"/>
      <fileset dir="." includes="#.*#"/>
      <fileset dir="." includes=".*~"/>
    </delete>
  </target>

  <target name="devtests" depends="message.catalog.test, message.use.test, schematron.generation.test, schematron.test"
	  description="Execute all developer tests - must have appserv-tests/devtests/admin-core checked out!">
  </target>

  <target name="message.catalog.test"
	  description="test message-catalog.xsl to see if there are errors in generating a catalog">
    <ant inheritAll="false" dir="${schematron.tests.dir}" target="message.catalog.test">
      <property name="uut" value="${message.catalog.xsl}"/>
    </ant>
  </target>
  <target name="message.use.test"
	  description="test message-catalog.xsl to see if there are errors in generating calls to use a catalog">
    <ant inheritAll="false" dir="${schematron.tests.dir}" target="message.use.test">
      <property name="uut" value="${message.catalog.xsl}"/>
    </ant>
  </target>

  <target name="schematron.generation.test"
	  description="test schematron generation to see if there are errors">
    <ant inheritAll="false" dir="${schematron.tests.dir}" target="schematron.generation.test">
      <property name="uut" value="${meta-stylesheet}"/>
    </ant>
  </target>

  <target name="schematron.test"
	  description="test generated schematron to see if it doesn't detect errors or detects the wrong ones">
    <ant inheritAll="false" dir="${schematron.tests.dir}" target="schematron.test">
      <property name="uut" value="${meta-stylesheet}"/>
    </ant>
  </target>
</project>
