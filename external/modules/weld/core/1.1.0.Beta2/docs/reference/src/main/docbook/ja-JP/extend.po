# Language ja-JP translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-05-01T13:53:42\n"
"PO-Revision-Date: 2009-04-27 12:26+0900\n"
"Last-Translator: wadahiro <wadahiro@gmail.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Portable extensions"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"CDI is intended to be a foundation for frameworks, extensions and "
"integration with other technologies. Therefore, CDI exposes a set of SPIs "
"for the use of developers of portable extensions to CDI. For example, the "
"following kinds of extensions were envisaged by the designers of CDI:"
msgstr ""
"Web Beansはフレームワーク、拡張、他の技術との統合のためのプラットフォームとな"
"ることを目的としています。従って、Web Beansに移植可能な拡張を行う開発者向け"
"に、SPIのセットを公開しています。たとえば、以下の種類の拡張はWeb Beansの設計"
"者によって構想されました。"

#. Tag: para
#, no-c-format
msgid "integration with Business Process Management engines,"
msgstr "ビジネスプロセス管理エンジンとの統合、"

#. Tag: para
#, no-c-format
msgid ""
"integration with third-party frameworks such as Spring, Seam, GWT or Wicket, "
"and"
msgstr ""
"Spring、Seam、GWTまたはWicketなどのサードパーティのフレームワークとの統合、そ"
"して"

#. Tag: para
#, fuzzy, no-c-format
msgid "new technology based upon the CDI programming model."
msgstr "Web Beansのプログラミングモデルに基づく新技術です。"

#. Tag: para
#, no-c-format
msgid "More formally, according to the spec:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "A portable extension may integrate with the container by:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Providing its own beans, interceptors and decorators to the container"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Injecting dependencies into its own objects using the dependency injection "
"service"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Providing a context implementation for a custom scope"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Augmenting or overriding the annotation-based metadata with metadata from "
"some other source"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Creating an <literal>Extension</literal>"
msgstr "<literal>Bean</literal>クラス"

#. Tag: para
#, no-c-format
msgid ""
"The first step in creating a portable extension is to write a class that "
"implements <literal>Extension</literal>. This marker interface does not "
"define any methods, but it&#39;s needed to satisfy the requirements of Java "
"SE&#39;s service provider architecture."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Next, we need to register our extension as a service provider by creating a "
"file named <literal>META-INF/services/javax.enterprise.inject.spi.Extension</"
"literal>, which contains the name of our extension class:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"An extension is not a bean, exactly, since it is instantiated by the "
"container during the initialization process, before any beans or contexts "
"exist. However, it can be injected into other beans once the initialization "
"process is complete."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"And, like beans, extensions can have observer methods. Usually, the observer "
"methods observe <emphasis>container lifecycle events</emphasis>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Container lifecycle events"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"During the initialization process, the container fires a series of events, "
"including:"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>BeforeBeanDiscovery</literal>"
msgstr "<literal>Manager</literal>オブジェクト"

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>ProcessAnnotatedType</literal>"
msgstr "<literal>Manager</literal>オブジェクト"

#. Tag: para
#, no-c-format
msgid ""
"<literal>ProcessInjectionTarget</literal> and <literal>ProcessProducer</"
"literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<literal>ProcessBean</literal> and <literal>ProcessObserverMethod</literal>"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>AfterBeanDiscovery</literal>"
msgstr "<literal>Manager</literal>オブジェクト"

#. Tag: para
#, no-c-format
msgid "<literal>AfterDeploymentValidation</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Extensions may observe these events:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In fact, the extension can do a lot more than just observe. The extension is "
"permitted to modify the container&#39;s metamodel and more. Here&#39;s a "
"very simple example:"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "The observer method may inject a <literal>BeanManager</literal>"
msgstr ""
"Web Beansを拡張するための中枢部は<literal>Manager</literal>オブジェクトです。"

#. Tag: title
#, fuzzy, no-c-format
msgid "The <literal>BeanManager</literal> object"
msgstr "<literal>Manager</literal>オブジェクト"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The nerve center for extending CDI is the <literal>BeanManager</literal> "
"object. The <literal>BeanManager</literal> interface lets us obtain beans, "
"interceptors, decorators, observers and contexts programmatically."
msgstr ""
"<literal>Manager</literal>インタフェースで、プログラミングによりWeb Beans、イ"
"ンタセプタ、デコレータ、オブザーバ、およびコンテキストを登録、取得できます。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Any bean or other Java EE component which supports injection can obtain an "
"instance of <literal>BeanManager</literal> via injection:"
msgstr ""
"<literal>Manager</literal>インスタンスをインジェクションで取得することができ"
"ます。"

#. Tag: para
#, no-c-format
msgid ""
"Java EE components may obtain an instance of <literal>BeanManager</literal> "
"from JNDI by looking up the name <literal>java:comp/BeanManager</literal>. "
"Any operation of <literal>BeanManager</literal> may be called at any time "
"during the execution of the application."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Let&#39;s study some of the interfaces exposed by the <literal>BeanManager</"
"literal>."
msgstr ""
"Web Beansを拡張するための中枢部は<literal>Manager</literal>オブジェクトです。"

#. Tag: title
#, fuzzy, no-c-format
msgid "The <literal>InjectionTarget</literal> interface"
msgstr "<literal>Context</literal>インタフェース"

#. Tag: para
#, no-c-format
msgid ""
"The first thing that a framework developer is going to look for in the "
"portable extension SPI is a way to inject CDI beans into objects which are "
"not under the control of CDI. The <literal>InjectionTarget</literal> "
"interface makes this very easy."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"We recommend that frameworks let CDI take over the job of actually "
"instantiating the framework-controlled objects. That way, the framework-"
"controlled objects can take advantage of constructor injection. However, if "
"the framework requires use of a constructor with a special signature, the "
"framework will need to instatiate the object itself, and so only method and "
"field injection will be supported."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "The <literal>Bean</literal> interface"
msgstr "<literal>Context</literal>インタフェース"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Instances of the interface <literal>Bean</literal> represent beans. There is "
"an instance of <literal>Bean</literal> registered with the "
"<literal>BeanManager</literal> object for every bean in the application. "
"There are even <literal>Bean</literal> objects representing interceptors, "
"decorators and producer methods."
msgstr ""
"抽象クラスである<literal>Bean</literal>のインスタンスはWeb Beansを表します。"
"アプリケーションにはあらゆるWeb Beanのために、<literal>Manager</literal>オブ"
"ジェクトに登録された<literal>Bean</literal>のインスタンスがあります。"

#. Tag: para
#, no-c-format
msgid ""
"The <literal>Bean</literal> interface exposes all the interesting things we "
"dicussed in <xref linkend=\"bean-anatomy\" />."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There&#39;s an easy way to find out what beans exist in the application:"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>Bean</literal> interface makes it possible for a portable "
"extension to provide support for new kinds of beans, beyond those defined by "
"the CDI specification. For example, we could use the <literal>Bean</literal> "
"interface to allow objects managed by another framework to be injected into "
"beans."
msgstr ""
"新しい種類のWeb Beansのサポートを提供するために、<literal>Bean</literal>クラ"
"スを拡張し、<literal>Manager.addBean()</literal>を呼びインスタンスを登録する"
"ことが可能です。Web Beansの仕様(シンプル、エンタープライズWeb Beans、プロ"
"デューサメソッド、およびJMSエンドポイント)で定義されたものを超えてです。たと"
"えば、別のフレームワークによって管理されたオブジェクトをWeb Beansにインジェク"
"ト可能にするために、<literal>Bean</literal>クラスを使用できます。"

#. Tag: title
#, fuzzy, no-c-format
msgid "Registering a <literal>Bean</literal>"
msgstr "<literal>Bean</literal>クラス"

#. Tag: para
#, no-c-format
msgid ""
"The most common kind of CDI portable extension registers a bean (or beans) "
"with the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In this example, we make a framework class, <literal>SecurityManager</"
"literal> available for injection. To make things a bit more interesting, "
"we&#39;re going to delegate back to the container&#39;s "
"<literal>InjectionTarget</literal> to perform instantiation and injection "
"upon the <literal>SecurityManager</literal> instance."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"But a portable extension can also mess with beans that are discovered "
"automatically by the container."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Wrapping an <literal>AnnotatedType</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"One of the most interesting things that an extension class can do is process "
"the annotations of a bean class <emphasis>before</emphasis> the container "
"builds its metamodel."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Let&#39;s start with an example of an extension that provides support for "
"the use of <literal>@Named</literal> at the package level. The package-level "
"name is used to qualify the EL names of all beans defined in that package. "
"The portable extension uses the <literal>ProcessAnnotatedType</literal> "
"event to wrap the <literal>AnnotatedType</literal> object and override the "
"<literal>value()</literal> of the <literal>@Named</literal> annotation."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here&#39;s a second example, which adds the <literal>@Alternative</literal> "
"annotation to any class which implements a certain <literal>Service</"
"literal> interface."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <literal>AnnotatedType</literal> is not the only thing that can be "
"wrapped by an extension."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Wrapping an <literal>InjectionTarget</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <literal>InjectionTarget</literal> interface exposes operations for "
"producing and disposing an instance of a component, injecting its "
"dependencies and invoking its lifecycle callbacks. A portable extension may "
"wrap the <literal>InjectionTarget</literal> for any Java EE component that "
"supports injection, allowing it to intercept any of these operations when "
"they are invoked by the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here&#39;s a CDI portable extension that reads values from properties files "
"and configures fields of Java EE components, including servlets, EJBs, "
"managed beans, interceptors and more. In this example, properties for a "
"class such as <literal>org.mydomain.blog.Blogger</literal> go in a resource "
"named <literal>org/mydomain/blog/Blogger.properties</literal>, and the name "
"of a property must match the name of the field to be configured. So "
"<literal>Blogger.properties</literal> could contain:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The portable extension works by wrapping the containers "
"<literal>InjectionTarget</literal> and setting field values from the "
"<literal>inject()</literal> method."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There&#39;s a lot more to the portable extension SPI than what we&#39;ve "
"discussed here. Check out the CDI spec or Javadoc for more information. For "
"now, we&#39;ll just mention one more extension point."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The <literal>Context</literal> interface"
msgstr "<literal>Context</literal>インタフェース"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>Context</literal> interface supports addition of new scopes to "
"CDI, or extension of the built-in scopes to new environments."
msgstr ""
"<literal>Context</literal>インタフェースはWeb Beansへの新しいスコープの追加、"
"または新しい環境での組み込みスコープの拡張をサポートします。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For example, we might implement <literal>Context</literal> to add a business "
"process scope to CDI, or to add support for the conversation scope to an "
"application that uses Wicket."
msgstr ""
"たとえば、私たちは、Web Beansにビジネスプロセススコープを追加、またはWicketを"
"使用するアプリケーションに対話スコープのサポートを追加するために、"
"<literal>Context</literal>を実装するかもしれません。"

#, fuzzy
#~ msgid "@Inject BeanManager beanManager;"
#~ msgstr "@Current Manager manager"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[public interface Context {\n"
#~ "   public Class<? extends Annotation> getScope();\n"
#~ "   public <T> T get(Contextual<T> contextual, CreationalContext<T> "
#~ "creationalContext);\n"
#~ "   public <T> T get(Contextual<T> contextual);\n"
#~ "   boolean isActive();\n"
#~ "}]]>"
#~ msgstr ""
#~ "public interface Context {\n"
#~ "    \n"
#~ "    public Class&lt;? extends Annotation&gt; getScopeType();\n"
#~ "    \n"
#~ "    public &lt;T&gt; T get(Bean&lt;T&gt; bean, boolean create);\n"
#~ "    \n"
#~ "    boolean isActive();\n"
#~ "    \n"
#~ "}"

#, fuzzy
#~ msgid ""
#~ "There are two subinterfaces of <literal>Bean</literal> defined by the CDI "
#~ "specification: <literal>Interceptor</literal> and <literal>Decorator</"
#~ "literal>."
#~ msgstr ""
#~ "Web Beansの仕様で定義された二つの<literal>Bean</literal>のサブクラスがあり"
#~ "ます。<literal>Interceptor</literal>と<literal>Decorator</literal>です。"

#~ msgid "Extending Web Beans"
#~ msgstr "Web Beansを拡張する"

#~ msgid ""
#~ "<![CDATA[public interface Manager\n"
#~ "{\n"
#~ "\n"
#~ "   public <T> Set<Bean<T>> resolveByType(Class<T> type, Annotation... "
#~ "bindings);\n"
#~ "\n"
#~ "   public <T> Set<Bean<T>> resolveByType(TypeLiteral<T> apiType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> T getInstanceByType(Class<T> type, Annotation... "
#~ "bindings);\n"
#~ "\n"
#~ "   public <T> T getInstanceByType(TypeLiteral<T> type,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public Set<Bean<?>> resolveByName(String name);\n"
#~ "\n"
#~ "   public Object getInstanceByName(String name);\n"
#~ "\n"
#~ "   public <T> T getInstance(Bean<T> bean);\n"
#~ "\n"
#~ "   public void fireEvent(Object event, Annotation... bindings);\n"
#~ "\n"
#~ "   public Context getContext(Class<? extends Annotation> scopeType);\n"
#~ "\n"
#~ "   public Manager addContext(Context context);\n"
#~ "\n"
#~ "   public Manager addBean(Bean<?> bean);\n"
#~ "\n"
#~ "   public Manager addInterceptor(Interceptor interceptor);\n"
#~ "\n"
#~ "   public Manager addDecorator(Decorator decorator);\n"
#~ "\n"
#~ "   public <T> Manager addObserver(Observer<T> observer, Class<T> "
#~ "eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager addObserver(Observer<T> observer, TypeLiteral<T> "
#~ "eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager removeObserver(Observer<T> observer, Class<T> "
#~ "eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager removeObserver(Observer<T> observer,\n"
#~ "         TypeLiteral<T> eventType, Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Set<Observer<T>> resolveObservers(T event, Annotation... "
#~ "bindings);\n"
#~ "\n"
#~ "   public List<Interceptor> resolveInterceptors(InterceptionType type,\n"
#~ "         Annotation... interceptorBindings);\n"
#~ "\n"
#~ "   public List<Decorator> resolveDecorators(Set<Class<?>> types,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[public interface Manager\n"
#~ "{\n"
#~ "\n"
#~ "   public <T> Set<Bean<T>> resolveByType(Class<T> type, Annotation... "
#~ "bindings);\n"
#~ "\n"
#~ "   public <T> Set<Bean<T>> resolveByType(TypeLiteral<T> apiType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> T getInstanceByType(Class<T> type, Annotation... "
#~ "bindings);\n"
#~ "\n"
#~ "   public <T> T getInstanceByType(TypeLiteral<T> type,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public Set<Bean<?>> resolveByName(String name);\n"
#~ "\n"
#~ "   public Object getInstanceByName(String name);\n"
#~ "\n"
#~ "   public <T> T getInstance(Bean<T> bean);\n"
#~ "\n"
#~ "   public void fireEvent(Object event, Annotation... bindings);\n"
#~ "\n"
#~ "   public Context getContext(Class<? extends Annotation> scopeType);\n"
#~ "\n"
#~ "   public Manager addContext(Context context);\n"
#~ "\n"
#~ "   public Manager addBean(Bean<?> bean);\n"
#~ "\n"
#~ "   public Manager addInterceptor(Interceptor interceptor);\n"
#~ "\n"
#~ "   public Manager addDecorator(Decorator decorator);\n"
#~ "\n"
#~ "   public <T> Manager addObserver(Observer<T> observer, Class<T> "
#~ "eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager addObserver(Observer<T> observer, TypeLiteral<T> "
#~ "eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager removeObserver(Observer<T> observer, Class<T> "
#~ "eventType,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Manager removeObserver(Observer<T> observer,\n"
#~ "         TypeLiteral<T> eventType, Annotation... bindings);\n"
#~ "\n"
#~ "   public <T> Set<Observer<T>> resolveObservers(T event, Annotation... "
#~ "bindings);\n"
#~ "\n"
#~ "   public List<Interceptor> resolveInterceptors(InterceptionType type,\n"
#~ "         Annotation... interceptorBindings);\n"
#~ "\n"
#~ "   public List<Decorator> resolveDecorators(Set<Class<?>> types,\n"
#~ "         Annotation... bindings);\n"
#~ "\n"
#~ "}]]>"

#~ msgid ""
#~ "public abstract class Bean&lt;T&gt; {\n"
#~ "    \n"
#~ "    private final Manager manager;\n"
#~ "    \n"
#~ "    protected Bean(Manager manager) {\n"
#~ "        this.manager=manager;\n"
#~ "    }\n"
#~ "    \n"
#~ "    protected Manager getManager() {\n"
#~ "        return manager;\n"
#~ "    }\n"
#~ "    \n"
#~ "    public abstract Set&lt;Class&gt; getTypes();\n"
#~ "    public abstract Set&lt;Annotation&gt; getBindingTypes();\n"
#~ "    public abstract Class&lt;? extends Annotation&gt; getScopeType();\n"
#~ "    public abstract Class&lt;? extends Annotation&gt; getDeploymentType"
#~ "(); \n"
#~ "    public abstract String getName();\n"
#~ "    \n"
#~ "    public abstract boolean isSerializable();\n"
#~ "    public abstract boolean isNullable();\n"
#~ "\n"
#~ "    public abstract T create();\n"
#~ "    public abstract void destroy(T instance);\n"
#~ "    \n"
#~ "}"
#~ msgstr ""
#~ "public abstract class Bean&lt;T&gt; {\n"
#~ "    \n"
#~ "    private final Manager manager;\n"
#~ "    \n"
#~ "    protected Bean(Manager manager) {\n"
#~ "        this.manager=manager;\n"
#~ "    }\n"
#~ "    \n"
#~ "    protected Manager getManager() {\n"
#~ "        return manager;\n"
#~ "    }\n"
#~ "    \n"
#~ "    public abstract Set&lt;Class&gt; getTypes();\n"
#~ "    public abstract Set&lt;Annotation&gt; getBindingTypes();\n"
#~ "    public abstract Class&lt;? extends Annotation&gt; getScopeType();\n"
#~ "    public abstract Class&lt;? extends Annotation&gt; getDeploymentType"
#~ "(); \n"
#~ "    public abstract String getName();\n"
#~ "    \n"
#~ "    public abstract boolean isSerializable();\n"
#~ "    public abstract boolean isNullable();\n"
#~ "\n"
#~ "    public abstract T create();\n"
#~ "    public abstract void destroy(T instance);\n"
#~ "    \n"
#~ "}"
