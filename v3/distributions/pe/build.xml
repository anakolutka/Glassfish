<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the "License").  You may not use this file except
 in compliance with the License.

 You can obtain a copy of the license at
 glassfish/bootstrap/legal/CDDLv1.0.txt or
 https://glassfish.dev.java.net/public/CDDLv1.0.html.
 See the License for the specific language governing
 permissions and limitations under the License.

 When distributing Covered Code, include this CDDL
 HEADER in each file and include the License file at
 glassfish/bootstrap/legal/CDDLv1.0.txt.  If applicable,
 add the following below this CDDL HEADER, with the
 fields enclosed by brackets "[]" replaced with your
 own identifying information: Portions Copyright [yyyy]
 [name of copyright owner]
-->
<project name="nucleus-base bundle creation" default="create.bundle" basedir=".">
    <target name="create.bundle">
        <mkdir dir="target/stage"/>
        <resolveArtifact artifactId="javadb" property="javadb.jar"/>
        <unjar src="${javadb.jar}" dest="target"/>
        <!-- Note: the current version of the javadb jar file contains a single zip file.
             As a result, we currently hard code the <unzip/> task to handle this file. -->
        <unzip dest="target/stage/glassfish">
            <fileset dir="target">
                <include name="*javadb*.zip"/>
            </fileset>
            <patternset>
                <exclude name="javadb/demo/**"/>
                <exclude name="javadb/bin/**"/>
                <exclude name="javadb/3RDPARTY.zip"/>
            </patternset>
        </unzip>
        <resolveArtifact artifactId="nucleus-base" property="nucleus-base.zip"/>

        <resolveAll todir="target/stage/glassfish/modules">
            <excludeArtifactsTransitively>
                <scope level="runtime"/>
                <artifact artifactId="gf-web-connector" />
            </excludeArtifactsTransitively>
        </resolveAll>
        <delete dir="target/stage/glassfish/modules" includes="*.zip" />
        
        <!--
          This filtering definition obtains a set of HK2 modules that are retained by gf-web-connector
          (that is, set of modules that won't be in the dependency list if gf-web-connector is not a part of the dependency;
          IOW, a dependency only reachable through gf-web-connector) and all its non-module dependencies
          (that is, normal jars.)
          
          The formula to compute this is non-trivial. We first compute a subgraph X which represents
          nodes that we *don't* want. That is, all HK2 modules that are reachable without going through
          gf-web-connector. I use <packaging not="..."/> so that it includes transitive dependencies
          through distribution zips. Also note that all non-module normal jars need to be excluded from
          X because if a module that ends up in /web depends on normal jars, those jars also need to be
          in /web.
          
          We then finally compute the set of modules and jars that are not in X by one more subtraction.
        -->
        <resolveAll todir="target/stage/glassfish/web">
            <scope level="runtime">
                <subtract>
                    <subGraph artifactId="gf-web-connector" />
                    <packaging not="jar"><!-- = subgraph X -->
                        <excludeArtifactsTransitively>
                            <artifact artifactId="gf-web-connector" />
                        </excludeArtifactsTransitively>
                    </packaging>
                </subtract>
            </scope>
        </resolveAll>

        <zip file="target/pe.zip" basedir="target/stage">
            <zipgroupfileset file="${nucleus-base.zip}"/>
        </zip>
        <attachArtifact file="target/pe.zip"/>
    </target>
</project>
