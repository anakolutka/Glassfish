#
# The contents of this file are subject to the terms 
# of the Common Development and Distribution License 
# (the "License").  You may not use this file except 
# in compliance with the License.
# 
# You can obtain a copy of the license at 
# glassfish/bootstrap/legal/CDDLv1.0.txt or 
# https://glassfish.dev.java.net/public/CDDLv1.0.html. 
# See the License for the specific language governing 
# permissions and limitations under the License.
# 
# When distributing Covered Code, include this CDDL 
# HEADER in each file and include the License file at 
# glassfish/bootstrap/legal/CDDLv1.0.txt.  If applicable, 
# add the following below this CDDL HEADER, with the 
# fields enclosed by brackets "[]" replaced with your 
# own identifying information: Portions Copyright [yyyy] 
# [name of copyright owner]
#

# Note: several tests were taken from already-existing tests for CMP 2.x, and
# are changed here.  Where this is the case, there should be a comment starting
# with "EJB3" that explains the difference.


Select001.queryString=select object(d) from Department d where d.deptid = ?1
Select002.queryString=select object(e) from Employee e, Department d where d=?1 and e.department <> d
Select003.queryString=select object(e) from Employee e where ?1 member of e.department.employees
Select004.queryString=select object(e) from Employee e where e.firstname = ?1 or e.lastname = ?1

# Invalid use of literal on LHS
SyntaxError001.queryString=SELECT OBJECT(p) FROM Player p WHERE 4500.0 > p.salary
SyntaxError001.errorMessage=column(49): JDO75314: 'salary' does not denote a cmp-field or cmr-field of the entity bean for abstract schema type ''.

# Missing SELECT clause
SyntaxError002.queryString=FROM Player p
SyntaxError002.errorMessage=column(1): JDO75201: Syntax error at 'FROM'.

# Missing OBJECT in select clause
SyntaxError003.queryString=select e from Employee e where e.firstname = ?1
SyntaxError003.errorMessage=column(8): JDO75201: Syntax error at 'e'.

#
# These are taken from ejbqlc/testcases/DateEJBModule_Testcases.properties
# in old persistence.
#


### 2xDate positive testcases

# SELECT java.sql.Date and WHERE clause with java.util.Date
2xDateBasic001.queryString=SELECT e.birthdate FROM Employee e WHERE e.hiredate = ?1

# SELECT java.sql.Time and WHERE clause with java.sql.Date
# Current test model doesn't have fields of type java.sql.Time
#2xDateBasic002.queryString=SELECT distinct d.sTime FROM DateEJB d WHERE d.sDate = ?1

# WHERE clause with java.sql.Timestamp
# Current test model doesn't have fields of type java.sql.Timestamp
#2xDateBasic003.queryString=SELECT OBJECT(d) FROM DateEJB d WHERE d.sTimestamp = ?1

# SELECT java.sql.Timestamp and WHERE clause with java.sql.Time
# Current test model doesn't have fields of type java.sql.Timestamp
#2xDateBasic004.queryString=SELECT d.sTimestamp FROM DateEJB d WHERE d.sTime = ?1


### 2xDate negative testcases

# Invalid arguments of = comparing Date with String.
#SemanticError001.queryString=SELECT distinct d.sTime FROM DateEJB d WHERE d.sDate = 'Michael'
2xDateSemanticError201.queryString=SELECT distinct e.birthdate FROM Employee e WHERE e.birthdate = 'Michael'
2xDateSemanticError201.errorMessage=column(63): JDO75311: Invalid argument(s) for '='.

#
# These are taken from ejbqlc/testcases/TeamJAR_Testcases.properties
# in old persistence.
#


### 2xTeam positive testcases

# omit WHERE clause
2xTeamBasic001.queryString=SELECT object (e) FROM Employee e

# true WHERE clause
2xTeamBasic002.queryString=SELECT object (e) FROM Employee e WHERE true

# false WHERE clause
2xTeamBasic003.queryString=SELECT object (e) FROM Employee e WHERE false

# simple string field access in WHERE clause
2xTeamBasic004.queryString=SELECT e.firstname FROM Employee e WHERE e.firstname = 'Fred'

# string parameter query
2xTeamParameter001.queryString=SELECT object (e) FROM Employee e WHERE e.firstname = ?1 

# local parameter query with distinct
2xTeamParameter002.queryString=SELECT DISTINCT e.firstname FROM Employee e WHERE e.lastname = ?1

# two parameters
2xTeamParameter003.queryString=SELECT object (e) FROM Employee e, IN(e.projects) AS p WHERE p = ?1 AND e.firstname = ?2

# query with double and java.lang.Double comparison
2xTeamParameter004.queryString=SELECT fte.firstname FROM FullTimeEmployee fte WHERE fte.salary = ?1

# query with double and java.math.BigDecimal comparison
# EJB3: query with BigDecimal
2xTeamParameter005.queryString=SELECT p.name FROM Project p WHERE p.budget = ?1

# query with case insensitive identification variable (aplayer vs APLAYER
# vs aPlayer)
# This is a positive test, since EJBQL is case-insensitive with respect to
# identification variables. 
2xTeamParameter006.queryString=SELECT anEmp.firstname FROM Employee ANEMP WHERE anemp.lastname = ?1

# collection member declaration
2xTeamVariable001.queryString=SELECT DISTINCT OBJECT(e) FROM Department d, IN(d.employees) AS e WHERE e.firstname = 'Fred'

# two collection member declarations
2xTeamVariable002.queryString=SELECT OBJECT(p) FROM Department d, IN(d.employees) AS e, IN(e.projects) p WHERE d.name = 'abc'

# query using CONCAT
2xTeamFunction001.queryString=SELECT e.firstname FROM Employee e WHERE e.lastname = CONCAT(?1, ?2) 

# query using SUBSTRING
2xTeamFunction002.queryString=SELECT e.firstname FROM Employee e WHERE SUBSTRING(e.lastname, 1, 3) = 'xyz' 

# query using LENGTH
2xTeamFunction003.queryString=SELECT Object(e) FROM Employee e WHERE LENGTH(e.firstname) = 5 

# query using LOCATE
2xTeamFunction004.queryString=SELECT e.firstname FROM Employee e WHERE LOCATE('Fr', e.firstname) = 1 

# query using ABS
2xTeamFunction005.queryString=SELECT fte.firstname FROM FullTimeEmployee fte WHERE ABS(fte.salary) > 20000.0

# query using SQRT
2xTeamFunction006.queryString=SELECT fte.firstname FROM FullTimeEmployee fte WHERE SQRT(fte.salary) = 2.0 

# query using MOD
2xTeamFunction007.queryString=SELECT e.firstname FROM Employee e WHERE MOD(?1, 2) = 1

# query using parameter and sqrt
2xTeamFunction008.queryString=SELECT fte.firstname FROM FullTimeEmployee fte WHERE SQRT(?1) = 2.0 

# query using BETWEEN
2xTeamOperator001.queryString=SELECT fte.firstname FROM FullTimeEmployee fte WHERE fte.salary BETWEEN 10000.0 AND 20000.0

# query using NOT BETWEEN
2xTeamOperator002.queryString=SELECT fte.firstname FROM FullTimeEmployee fte WHERE fte.salary NOT BETWEEN 10000.0 AND 20000.0

# query using LIKE
2xTeamOperator003.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.firstname LIKE '%on'

# query using LIKE ESCAPE
2xTeamOperator004.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.firstname LIKE '\_on_' ESCAPE '\\'

# query using NOT LIKE
2xTeamOperator005.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.firstname NOT LIKE '%on'

# query using IN
2xTeamOperator006.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.lastname IN ('Flintstone', 'Rubble')

# query using NOT IN
2xTeamOperator007.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.firstname NOT IN ('Adams', 'Munster')

# query using IS NULL
2xTeamOperator008.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.firstname IS NULL

# query using IS NOT NULL
2xTeamOperator009.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.firstname IS NOT NULL

# query using IS EMPTY
2xTeamOperator010.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.projects IS EMPTY

# query using IS NOT EMPTY
2xTeamOperator011.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.projects IS NOT EMPTY

# query using MEMBER OF
2xTeamOperator012.queryString=SELECT OBJECT(e) FROM Employee e WHERE ?1 MEMBER e.projects

# query using NOT MEMBER OF
2xTeamOperator013.queryString=SELECT OBJECT(e) FROM Employee e WHERE ?1 NOT MEMBER OF e.projects

# query using IS NULL with parameter
2xTeamOperator014.queryString=SELECT OBJECT(e) FROM Employee e WHERE ?1 IS NULL and e.firstname is NOT NULL

# query using IN with double and parameter
2xTeamOperator015.queryString=SELECT OBJECT(fte) FROM FullTimeEmployee fte WHERE fte.salary IN ( 1000.0, ?1)

# query using NOT IN with double and parameter
2xTeamOperator016.queryString=SELECT OBJECT(fte) FROM FullTimeEmployee fte WHERE fte.salary NOT IN ( 1000.0, ?1)

# query using NOT LIKE with parameter
2xTeamOperator017.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.firstname NOT LIKE ?1

# query using LIKE ESCAPE with parameter
2xTeamOperator018.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.firstname LIKE ?1 ESCAPE '\\'

# query using LIKE ESCAPE with parameters
2xTeamOperator019.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.firstname LIKE ?1 ESCAPE ?2

# query using NOT LIKE ESCAPE with parameters
2xTeamOperator020.queryString=SELECT OBJECT(e) FROM Employee e WHERE e.firstname NOT LIKE ?1 ESCAPE ?2

# query using string literal with escaped single quote
2xTeamAdvanced001.queryString=SELECT OBJECT(e) FROM Employee e WHERE NOT e.firstname = 'Stephen S. D''Milla'

# query having multiple collection member variable (bug 4714834)
2xTeamAdvanced002.queryString=SELECT Object(d) FROM Department d, IN(d.employees) AS e1, IN(d.employees) AS e2  WHERE e1.firstname = 'ABC' AND e2.weeklyhours = 40 AND e1 <> e2

# query having multiple MEMBER OF expressions
2xTeamAdvanced003.queryString=SELECT Object(d) FROM Department d, Employee e1, Employee e2 WHERE e1 MEMBER OF d.employees AND e1.lastname = 'Clampett' AND e2 MEMBER OF d.employees AND e2.firstname = 'Fred' AND e1 <> e2

# order by default
2xTeamOrderby001.queryString=SELECT OBJECT(e) FROM Employee e ORDER BY e.firstname

# order by two orderby item with DISTINCT in select clause
2xTeamOrderby002.queryString=SELECT DISTINCT OBJECT(d) FROM Department d, IN(d.employees) AS e WHERE e.firstname = 'Fred' ORDER BY d.name ASC, d.deptid DESC

# order by with select clause CMP field
2xTeamOrderby003.queryString=SELECT DISTINCT e.firstname FROM Department d, IN(d.employees) AS e WHERE d.name = 'HR' ORDER BY e.firstname

# order by with select clause CMR field
2xTeamOrderby004.queryString=SELECT e.manager FROM Department d, IN(d.employees) AS e WHERE d.name = 'HR' ORDER BY e.manager.firstname

# query with max
2xTeamAggregate001.queryString=SELECT max(fte.salary) FROM FullTimeEmployee fte

# query with min
2xTeamAggregate002.queryString=SELECT min(p.budget) FROM Department d, IN(d.employees) AS e2, IN(e2.projects) p WHERE d.name = 'HR'

# query with avg
2xTeamAggregate003.queryString=SELECT avg(fte.salary) FROM FullTimeEmployee fte

# query with sum
2xTeamAggregate004.queryString=SELECT sum(p.budget) FROM Department d, IN(d.employees) AS e2, IN(e2.projects) p WHERE d.name = 'HR'

# query with count ident
2xTeamAggregate005.queryString=SELECT count(e) FROM Employee e

# query with count cmp
2xTeamAggregate006.queryString=SELECT count(distinct p.name) FROM Department d, IN(d.employees) AS e2, IN(e2.projects) p WHERE d.name = 'HR'


### 2xTeam negative testcases

# invalid operator ==
2xTeamSyntaxError201.queryString=SELECT p.name FROM Player p WHERE p.name == p.name
2xTeamSyntaxError201.errorMessage=column(43): JDO75202: Syntax error unexpected token '='.

# Missing FROM clause
2xTeamSyntaxError202.queryString=SELECT p.name
2xTeamSyntaxError202.errorMessage=column(14): JDO75205: Syntax error unexpected end of EJBQL query.

# Missing SELECT clause
2xTeamSyntaxError203.queryString=FROM Player p
2xTeamSyntaxError203.errorMessage=column(1): JDO75201: Syntax error at 'FROM'.

# Invalid use of identification variable w/o OBJECT
2xTeamSyntaxError204.queryString=SELECT p FROM Player p
2xTeamSyntaxError204.errorMessage=column(8): JDO75201: Syntax error at 'p'.

# Missing operator in WHERE clause
2xTeamSyntaxError205.queryString=SELECT p.name FROM Player p WHERE p.name 'Michael'
2xTeamSyntaxError205.errorMessage=column(42): JDO75202: Syntax error unexpected token ''Michael''.

# Invalid character ! (bug 4714776)
2xTeamSyntaxError206.queryString=SELECT p.name FROM Player p WHERE p.name != 'Michael'
2xTeamSyntaxError206.errorMessage=column(42): JDO75203: Syntax error unexpected char '!'.

# Invalid use of literal on LHS
2xTeamSemanticError201.queryString=SELECT OBJECT(e) FROM FullTimeEmployee e WHERE 4500.0 > e.salary
2xTeamSemanticError201.errorMessage=column(48): JDO75324: Invalid use of literal '4500.0' on left hand side of an '>' operation.

# Invalid use of literal on LHS
2xTeamSemanticError202.queryString=SELECT OBJECT(e) FROM Employee e WHERE 'Michael' = e.firstname
2xTeamSemanticError202.errorMessage=column(40): JDO75324: Invalid use of literal 'Michael' on left hand side of an '=' operation.

# Invalid orderby item for Object select clause
2xTeamSemanticError203.queryString=SELECT DISTINCT OBJECT(e) FROM Department d, IN(d.employees) AS e ORDER BY e.firstname ASC, d.name DESC
2xTeamSemanticError203.errorMessage=JDO75336: The orderby item 'd.name' is not compatible with the select clause.

# Invalid orderby item for cmp field select clause
2xTeamSemanticError204.queryString=SELECT d.deptid FROM Department d, IN(d.employees) AS e ORDER BY e.firstname DESC
2xTeamSemanticError204.errorMessage=JDO75337: The orderby item 'e.firstname' and the cmp field in select clause must be the same.

# Invalid orderby item for cmr select clause
2xTeamSemanticError205.queryString=SELECT e.department FROM Department d, IN(d.employees) AS e WHERE d.name = 'Samuel' ORDER BY e.firstname
2xTeamSemanticError205.errorMessage=JDO75336: The orderby item 'e.firstname' is not compatible with the select clause.

# Invalid orderby item for different abstract schema
2xTeamSemanticError206.queryString=SELECT Object(e) FROM Department d, IN(d.employees) AS e WHERE d.name = 'Samuel' ORDER BY e.department.name
2xTeamSemanticError206.errorMessage=JDO75336: The orderby item 'e.department.name' is not compatible with the select clause.

# Invalid select aggregate function with order by clause
2xTeamSemanticError207.queryString=SELECT avg(e.weeklyhours) FROM Department d, IN(d.employees) AS e WHERE d.name = 'Samuel' ORDER BY e.department.name
2xTeamSemanticError207.errorMessage=JDO75338: An aggregate select clause must not be used with an order by clause.

# Invalid argument type for MOD
2xTeamSemanticError208.queryString=SELECT e.firstname FROM Employee e WHERE MOD(?1, 3.14) = 1
2xTeamSemanticError208.errorMessage=column(50): JDO75308: Int expression expected, expression has type 'double'.

#
# Queries from CTS
# The original query, as supplied by CTS, is commented out: our current test
# model has a different domain, so the queries cannot be used as given.  The
# actual query tested (hopefully) reflects the intent of the CTS query, but
# uses our test model.
#
# Unfortunately, we have not actually used most of these tests.  They remain
# here if we need them in the future.
#

# SELECT OBJECT(c) FROM CreditCardBean AS c WHERE c.id = ?1
2xCTS001.queryString=SELECT OBJECT(c) FROM Company AS c WHERE c.companyid = ?1

# SELECT ObJeCt(c) from CustomerBean c WHERE c.home.city = ?2 AND c.home.state = ?3
2xCTS002.queryString=SELECT ObJeCt(c) from Company c WHERE c.address.city = ?2 AND c.address.state = ?3

# Select DISTINCT Object(c) FROM CustomerBean c, IN(c.orders) o where o.totalPrice < 1250
2xCTS003.queryString=Select DISTINCT Object(d) FROM Department d, IN(d.employees) e where e.weeklyhours < 40

# Select Object(c) FROM CustomerBean c where c.home.zip = c.work.zip

# SELECT Distinct ObJeCt(c) from CustomerBean c WHERE c.home.city = ?1
2xCTS004.queryString=SELECT Distinct ObJeCt(e) from Employee e WHERE e.address.city = ?1

# Select Distinct Object(c) FROM CustomerBean c where c.work.city = ?1

# Select DISTINCT c.work.street FROM CustomerBean c WHERE c.work.state = ?1
2xCTS005.queryString=Select DISTINCT c.address.street FROM Company c WHERE c.address.state = ?1

# SELECT OBJECT(c) From CustomerBean c, in(c.aliases) a WHERE a.alias = ?1
2xCTS006.queryString=SELECT OBJECT(c) From Company c, in(c.departments) d WHERE d.name = ?1

# SELECT OBJECT(c) From CustomerBean c, in(c.aliases) a WHERE a.alias = ?1 or a.id = ?2
2xCTS007.queryString=SELECT OBJECT(c) From Company c, in(c.departments) d WHERE d.name = ?1 or d.deptid = ?2

# SELECT Distinct c.work From CustomerBean AS c, AddressBean AS a where a.street = '1 Network Drive'
# XXX Is this a reasonable translation of that the query is intending to test?
2xCTS008.queryString=SELECT Distinct c.address From Company AS c, Department AS d where d.name = 'Marketing'

# Select Distinct Object(c) FROM CustomerBean c, in(c.aliases) a WHERE a.customerNoop IS NULL
2xCTS009.queryString=Select Distinct Object(c) FROM Company c, in(c.departments) d WHERE d.employeeOfTheMonth IS NULL

# sElEcT Distinct oBJeCt(c) FROM CustomerBean c, IN(c.aliases) a WHERE a.customerNoop IS NOT NULL
2xCTS010.queryString=sElEcT Distinct oBJeCt(c) FROM Company c, IN(c.departments) d WHERE d.employeeOfTheMonth IS NOT NULL

# Select Distinct OBJECT(c) FrOm CustomerBean c, In(c.aliases) a WHERE a.alias = ?1
2xCTS011.queryString=Select Distinct OBJECT(c) FrOm Company c, In(c.departments) d WHERE d.name = ?1

# Select Distinct OBJECT(c) fRoM CustomerBean c, IN(c.creditCards) a where a.type = ?1
# XXX What's the difference between this and the previous query?
2xCTS012.queryString=Select Distinct OBJECT(c) fRoM Company c, IN(c.departments) d where d.name = ?1

# select distinct object(c) FROM CustomerBean c WHERE c.home.zip LIKE '%77'
2xCTS013.queryString=select distinct object(c) FROM Company c WHERE c.address.zipcode LIKE '%77'

# Select Distinct Object(c) FROM CustomerBean c WHERE c.home.zip not like '%44_'
2xCTS014.queryString=Select Distinct Object(c) FROM Company c WHERE c.address.zipcode not like '%44_'

# Select Distinct Object(c) FROM CustomerBean c WHERE c.aliases IS EMPTY
2xCTS015.queryString=Select Distinct Object(c) FROM Company c WHERE c.departments IS EMPTY

# Select Object(c) FROM CustomerBean c where c.name = ?1
2xCTS016.queryString=Select Object(c) FROM Company c where c.name = ?1

# Select Distinct Object(c) FROM CustomerBean c WHERE c.aliases IS NOT EMPTY
2xCTS017.queryString=Select Distinct Object(c) FROM Company c WHERE c.departments IS NOT EMPTY

# Select Distinct OBJECT(c) FROM CustomerBean AS c
2xCTS018.queryString=Select Distinct OBJECT(c) FROM Company AS c

# SELECT c.home.zip FROM CustomerBean c WHERE c.home.city = ?1
2xCTS019.queryString=SELECT c.address.zipcode FROM Company c WHERE c.address.city = ?1

# SELECT c.home FROM CustomerBean c WHERE c.name = 'Alan E. Frechette'
2xCTS020.queryString=SELECT c.address FROM Company c WHERE c.name = 'Slate Rock and Gravel Company'

# SELECT DISTINCT OBJECT(c) FROM CustomerBean c WHERE c.home.city Not iN ('Swansea', 'Brookline')
2xCTS021.queryString=SELECT DISTINCT OBJECT(c) FROM Company c WHERE c.address.city Not iN ('Shelbyville', 'Springfield')

# sELEct dIsTiNcT oBjEcT(c) FROM CustomerBean c WHERE c.work.zip IS NULL
2xCTS022.queryString=sELEct dIsTiNcT oBjEcT(c) FROM Company c WHERE c.address.zipcode IS NULL

# Select Distinct Object(c) FROM CustomerBean c WHERE c.work.zip IS NOT NULL
2xCTS023.queryString=Select Distinct Object(c) FROM Company c WHERE c.address.zipcode IS NOT NULL

# Select Distinct Object(c) From CustomerBean c where c.name = c.name
2xCTS024.queryString=Select Distinct Object(c) From Company c where c.name = c.name

# sElEcT oBjEcT(c) FROM CustomerBean c Where c.name = ?1

# select distinct object(c) FROM CustomerBean c, in(c.aliases) a WHERE a.alias LIKE 'sh\_ll' EsCaPe '\'

# select distinct object(c) FROM CustomerBean c WHERE c.home.city IN ('Lexington')

# Select DISTINCT c.work.street FROM CustomerBean c WHERE c.work.state = ?1

# Select Distinct Object(c) from CustomerBean c, in(c.aliases) a where c.name = ?1 AND a.customerNoop IS NULL

# select distinct object(c) fRoM CustomerBean c, IN(c.aliases) a where c.name = ?1 OR a.customerNoop IS NULL

# SELECT DISTINCT OBJECT(c) from CustomerBean c, in(c.aliases) a where NOT a.customerNoop IS NULL

# Select OBJECT(c) FROM CustomerBean c, in(c.home.phones) p where p.number = ?1

# Select c.home.zip FROM CustomerBean c where c.home.city = ?1

# SELECT ObJeCt(c) from CustomerBean c WHERE c.home.street = ?1 AND c.home.city = ?2 AND c.home.state = ?3 and c.home.zip = ?4

# SELECT OBJECT(c) From CustomerBean c, IN(c.home.phones) p where p.area = ?1

# SELECT DISTINCT OBJECT(c) from CustomerBean c where c.home.state IN('NH', 'RI')

# SELECT DISTINCT OBJECT(c) from CustomerBean c WHERE (c.home.state = 'NH') OR (c.home.state = 'RI')

# SELECT DISTINCT OBJECT(c) from CustomerBean c wHeRe c.home.state NOT IN('NH', 'RI')

# SELECT DISTINCT OBJECT(c) from CustomerBean c where NOT ((c.home.state = 'NH') OR (c.home.state = 'RI'))

# SELECT OBJECT(c) From CustomerBean c where c.home.city IN(?1)

# SELECT Distinct OBJECT(c) From CustomerBean c, IN(c.home.phones) p where p.area LIKE ?1

# Select Distinct Object(c) from CustomerBean c where c.name is null

# Select s.customer from SpouseBean s where s.id = '6'

# Select Distinct s.customer from SpouseBean s

# Select Object(c) from CustomerBean c where c.aliasesNoop IS NOT EMPTY or c.id <> '1'

# select distinct object(c) FROM CustomerBean c, in(c.aliases) a WHERE a.alias LIKE '%\_%' escape '\'

# Select Distinct c.home from CustomerBean AS c, SpouseBean AS s where c.name LIKE '%ette%'

# Select Distinct Object(c) from CustomerBean c, IN(c.creditCards) b where SQRT(b.balance) = ?1

# Select Count(c.home.city) from CustomerBean c

# Select Count(Distinct c.home.city) from CustomerBean c

# Select c.work.zip from CustomerBean c

# Select c.work.zip from CustomerBean c where c.work.zip IS NOT NULL ORDER BY c.work.zip ASC

# Select c.name from CustomerBean c where c.home.street = '212 Edgewood Drive'

# SELECT ObJeCt(c) from CustomerBean c WHERE c.home.street = ?1 OR c.home.city = ?2 OR c.home.state = ?3 or c.home.zip = ?4

# Select OBJECT(p) From ProductBean p where p.name LIKE 'ZZZ'

# SELECT DISTINCT OBJECT(p) FROM ProductBean p

# Select DISTINCT OBJECT(p) FROM ProductBean p WHERE p.quantity = 100.0

# Select DISTINCT OBJECT(p) From ProductBean p where p.quantity IS NULL

# Select OBJECT(p) From ProductBean p where p.name LIKE '%PC'

# Select OBJECT(p) From ProductBean p where p.name LIKE ?1

# Select Object(p) From ProductBean p where p.name = ?1

# Select p.partNumber from ProductBean p ORDER BY p.partNumber

# Select DISTINCT OBJECT(p) From ProductBean p ORDER BY p.quantity DESC

# SELECT Count(p.id) FROM ProductBean p 

# SELECT Sum(p.price) FROM ProductBean p 

# Select DISTINCT OBJECT(P) From ProductBean p

# Select DISTINCT OBJECT(p) From ProductBean p where p.quantity BETWEEN 10 AND 20

# Select DISTINCT OBJECT(p) From ProductBean p where p.quantity >= 10 AND p.quantity <= 20

# Select DISTINCT OBJECT(p) From ProductBean p where p.quantity NOT BETWEEN 10 AND 20

# Select DISTINCT OBJECT(p) From ProductBean p where p.quantity < 10 OR p.quantity > 20

# Select DISTINCT OBJECT(p) From ProductBean p where MOD(550, 100) = p.quantity

# Select Distinct Object(p) from ProductBean p where p.quantity > (500 + ?1) AND p.partNumber IS NULL

# Select Distinct Object(p) from ProductBean p where p.name = ?1

# Select Distinct Object(a) from AliasBean a where LOCATE('ev', a.alias) = 3

# Select Distinct Object(a) From AliasBean a WHERE a.alias = CONCAT('ste', 'vie')

# Select Distinct Object(a) FROM AliasBean a WHERE a.customerNoop MEMBER OF a.customersNoop

# Select Distinct Object(a) From AliasBean a WHERE a.alias = SUBSTRING(?1, ?2, ?3)

# Select Distinct Object(a) FROM AliasBean a

# Select Distinct Object(a) FROM AliasBean a WHERE a.customerNoop NOT MEMBER a.customersNoop

# Select Distinct Object(a) From AliasBean a WHERE LENGTH(a.alias) > 4

# Select Distinct Object(a) from CustomerBean c, IN(c.aliases) a WHERE a.alias IS NOT NULL ORDER BY a.alias, a.id

# SELECT Distinct Object(a) FROM AliasBean AS a Where (a.alias IS NOT NULL AND ?1 IS NOT NULL) OR a.alias = ?1

# Select Distinct Object(a) From AliasBean a where a.customerNoop Is Not Null OR a.id = ?1

# Select Distinct Object(a) From AliasBean a, in(a.customers) c where NOT c.name Is Null

# Select Distinct Object(a) From AliasBean a where a.customerNoop Is Null OR a.customerNoop <> a.customerNoop

# Select Distinct Object(a) From AliasBean a where a.customerNoop Is Null AND a.customerNoop <> a.customerNoop

# SELECT a.alias FROM AliasBean AS a WHERE (a.alias IS NULL AND ?1 IS NULL) OR a.alias = ?1

# SELECT OBJECT(l) FROM LineItemBean AS l WHERE l.id = ?1

# Select Distinct Object(o) from OrderBean AS o WHERE o.creditCard.approved <> TRUE

# SELECT OBJECT(l) From OrderBean o, in(o.lineItems) l

# Select Distinct Object(o) FROM OrderBean o Where o.totalPrice < 100

# Select Distinct Object(o) FROM OrderBean o Where o.totalPrice > 553.95

# Select DISTINCT OBJECT(o) From OrderBean o WHERE o.totalPrice > ABS(?1)

# Select Distinct Object(o) FROM OrderBean o, LineItemBean l WHERE l MEMBER o.lineItems

# Select Distinct Object(o) FROM OrderBean o WHERE o.sampleLineItem MEMBER o.lineItems

# Select DISTINCT OBJECT(o) from OrderBean o WHERE o.customer.name = ?1 ORDER BY o.totalPrice

# SELECT DISTINCT OBJECT(o1) FROM OrderBean o1, OrderBean o2 WHERE o1.totalPrice > o2.totalPrice AND o2.customer.name = 'Karen R. Tegan'

# SELECT OBJECT(o) FROM OrderBean o WHERE o.creditCard.expires = '03/05'

# SELECT DISTINCT OBJECT(o) From OrderBean o where o.totalPrice BETWEEN 1000 AND 1200

# SELECT DISTINCT OBJECT(o) From OrderBean o where o.totalPrice NOT bETwEeN 1000 AND 1200

# Select Distinct Object(o) FROM OrderBean o WHERE NOT o.totalPrice < 4500

# Select Distinct Object(o) FROM OrderBean o, LineItemBean l WHERE ?1 NOT MEMBER o.lineItems

# select distinct object(o) From OrderBean o WHERE o.creditCard.approved = FALSE

# sElEcT dIsTiNcT ObJeCt(o) FROM OrderBean AS o,in(o.lineItems) l WHERE l.quantity < 2 AND o.customer.name = 'Robert E. Bissett'

# Select Distinct Object(o) from OrderBean AS o WHERE o.customer.name = ?1

# SeLeCt DiStInCt oBjEcT(o) FROM OrderBean AS o WHERE o.customer.name = 'Karen R. Tegan' OR o.totalPrice < 100

# select distinct object(o) FROM OrderBean AS o, in(o.lineItems) l WHERE (l.quantity < 2) AND ((o.totalPrice < (3 + 54 * 2 + -8)) OR (o.customer.name = 'Robert E. Bissett'))

# Select Distinct Object(o) FROM OrderBean AS o

# SELECT DISTINCT OBJECT(o) FROM OrderBean o, in(o.lineItems) l WHERE l.quantity < 2 AND o.customer.name = ?1

# Select Distinct o.creditCard.balance from OrderBean o ORDER BY o.creditCard.balance ASC

# Select Distinct o.creditCard.balance from OrderBean o

# SELECT MIN(o.id) FROM OrderBean o where o.customer.name = 'Robert E. Bissett'

# SELECT MAX(l.quantity) FROM LineItemBean l 

# SELECT AVG(o.totalPrice) FROM OrderBean o 

# Select Distinct Object(o) from OrderBean o, in(o.lineItems) l where l.quantity NOT IN (1, 5) 

# Select Distinct Object(o) from OrderBean o where o.customer.name IS NOT NULL 

# Select Distinct Object(o) from OrderBean o where o.creditCard.type = ?1

# Select Distinct Object(o) from OrderBean o where o.creditCard.type = ?1 AND o.creditCard.balance = ?2

# Select Distinct Object(o) from OrderBean o where o.creditCard.balance < ?1

# Select s.info.street from SpouseBean s where s.lastName = 'Mullen'
