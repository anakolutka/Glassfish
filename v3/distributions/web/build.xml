<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the "License").  You may not use this file except
 in compliance with the License.

 You can obtain a copy of the license at
 glassfish/bootstrap/legal/CDDLv1.0.txt or
 https://glassfish.dev.java.net/public/CDDLv1.0.html.
 See the License for the specific language governing
 permissions and limitations under the License.

 When distributing Covered Code, include this CDDL
 HEADER in each file and include the License file at
 glassfish/bootstrap/legal/CDDLv1.0.txt.  If applicable,
 add the following below this CDDL HEADER, with the
 fields enclosed by brackets "[]" replaced with your
 own identifying information: Portions Copyright [yyyy]
 [name of copyright owner]
-->
<project name="web bundle creation" default="create.bundle" basedir=".">
    <!--
        Perform the part of bundle creation that doesn't involve in module jar staging.
        This part will be reused by other bundles that build on the web bundle.
    -->
    <target name="web.prepare">
        <mkdir dir="target/stage"/>

        <resolveArtifact artifactId="nucleus-base" property="nucleus-base.zip"/>
    </target>

    <!--
        build the final zip file and attach that to Maven
    -->
    <macrodef name="build-zip">
        <attribute name="zipfile" />
        <attribute name="base" />
        <sequential>
            <!-- find all fragments -->
            <resolveAll todir="target/fragments" tolerateBrokenPOMs="true" stripVersion="true">
                <fullGraph/>
                <!-- now treat the full graph as the list and then do simple list filtering -->
                <packaging value="distribution-fragment"/>
            </resolveAll>
            <unzip dest="target/stage">
                <patternset>
                    <exclude name="META-INF/**"/>
                </patternset>
                <fileset dir="target/fragments" includes="*.zip"/>
            </unzip>

            <zip file="@{zipfile}" basedir="target/stage">
                <zipgroupfileset file="@{base}"/>
            </zip>
            <attachArtifact file="@{zipfile}"/>
        </sequential>
    </macrodef>

    <target name="create.bundle" depends="web.prepare">
	
         <resolveAll todir="target/stage/glassfish/modules" tolerateBrokenPOMs="true" stripVersion="true">
	    <scope level="compile,runtime" />
         </resolveAll>
      

	<!-- cleanup -->

	<delete dir="target/stage/glassfish/modules" includes="*.zip"/>
	<delete dir="target/stage/glassfish/modules" includes="*.pom"/>
	<delete dir="target/stage/glassfish/modules" includes="*.war"/>
	<delete dir="target/stage/glassfish/modules" includes="*.xml" />

        <graphDef id="generate-picture" tolerateBrokenPOMs="true">
            <visualize file="modules.png">
                <scope level="compile,runtime">
                            <excludeArtifactsTransitively>
                                <artifact groupId="com.sun.enterprise" artifactId="hk2" />
                            </excludeArtifactsTransitively>
                </scope>
            </visualize>
        </graphDef>

        <build-zip zipfile="target/web.zip" base="${nucleus-base.zip}"/>

        <!-- this build script will be reused elsewhere -->
        <attachArtifact file="build.xml" classifier="build"/>
    </target>

    <!-- default value to conduct the test (start, stop) the server. This value
	 vaires based on your hardware and network bandwidth. So, by default, 
	 we assume it takes 9 seconds to finish the test. In case, you are 
	 using a low end configuration, then use 
	 -Dtimeout="myTimeoutValueInInteger" from command line            -->
    <property name="timeout"  value="9000"/>

    <!--  added new: will test the sanity of the server    -->
    <target name="test.server">
            <echo message="------------------------------------------"/>
            <echo message="TESTING GFv3 SERVER FOR SANITY "/>
            <echo message="------------------------------------------"/>
            <echo message="unzip the file ../target/web.zip to ../target/sanitywork/ "/>
            <unzip src="target/web.zip" dest="target/sanitywork">
            </unzip>
            <chmod dir="target/sanitywork/glassfish/bin" perm="ugo+rx" includes="**/*"/>
            <echo message="Now execute the jar file....please wait for timeout ${timeout} msecs"/>
            <java jar="target/sanitywork/glassfish/modules/glassfish-10.0-SNAPSHOT.jar"
                fork="true"
                maxmemory="128m"
                timeout="${timeout}"
                failonerror="false"
                outputproperty="myout"
                logError="false"
                >
                <arg value="-h"/>
             </java>

             <echo message="DISPLAY output=${myout}"
                file="target/sanitywork/server.output"
             />

             <!-- now check for Start string in the server output  -->
             <loadfile srcfile="target/sanitywork/server.output" property="sanity.test.result">
                 <filterchain>
                      <filterreader classname="org.apache.tools.ant.filters.LineContains">
                          <param type="contains" value="startup time"/>
                      </filterreader>
                      <tokenfilter>
                          <containsstring contains="startup time"/>
                      </tokenfilter>
                 </filterchain>
             </loadfile>
             <echo message="The server output:  ${sanity.test.result}"/>
             <antcall target="testResult">
             </antcall>
    </target>

    <target name="checkString"   >
          <condition property="isPassed">
          <contains string="${sanity.test.result}"
                                substring="startup time"/>
          </condition>
    </target>

    <target name="testResult"  if="isPassed" depends="didTestFail">
            <echo message="Sanity Test PASSED"/>
    </target>

    <target name="didTestFail"  unless="isPassed" depends="checkString" >
            <echo message="Sanity Test FAILED"/>
             <echo message="The server output:  ${sanity.test.result}"/>
    </target>

    <!--
      Target for building all in one jar. This takes long time,
      so separated out to its own target to avoid running this on developer's machine.
     -->
    <target name="all.jar">
        <taskdef name="rejar" classname="org.jvnet.maven.plugin.antrun.RejarTask" />
        <rejar destfile="target/all.jar">
          <zipgroupfileset dir="target/stage/glassfish/modules" includes="**/*.jar" />
        </rejar>
        <attachArtifact file="target/all.jar" classifier="all"/>
    </target>
</project>
