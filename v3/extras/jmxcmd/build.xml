<?xml version="1.0" encoding="iso-8859-1"?>

<!--
 Copyright 2004-2005 Sun Microsystems, Inc.  All rights reserved.
 Use is subject to license terms.
-->

<project name="jmxcmd" default="all" basedir=".">
    <property file="./build.properties"/>
    
    <path id="compile.classpath">
        <pathelement location="${required-jars.dir}/jmxtools.jar"/>
        <pathelement location="${required-jars.dir}/jmxremote_optional.jar"/>
        <pathelement location="${required-jars.dir}/javax77.jar"/>
        <pathelement location="${required-jars.dir}/appserv-ext.jar"/>
        <pathelement location="${required-jars.dir}/junit.jar"/>
    </path>

    <target name="docs" description="generate javadoc">
        <property name="srcpath" value="${src.dir}"/>
        <delete dir="${docs.dir}"/>
        <mkdir dir="${docs.dir}"/>
        <javadoc packagenames="*" sourcepath="${srcpath}"
            destdir="${docs.dir}" source="1.5" additionalparam="-linksource">
            <classpath refid="compile.classpath"/>
            <link href="http://java.sun.com/j2ee/1.5/docs/api/"/>
        </javadoc>
    </target>

    <target name="init" description="${component.name} initialization">
        <mkdir dir="${component.classes.dir}"/>
    </target>
    
    <target name="init-assemble" description="${component.name} initialization">
        <mkdir dir="${component.classes.dir}"/>
        <mkdir dir="${jars.dir}"/>
    </target>

    <!-- all -->
    <target name="all" depends="compile, assemble"
        description="Build all jmxcmd components" />

    <!-- build -->
    <target name="build" depends="compile, assemble"
        description="Build entire component" />
        
    <!-- compile-jcmd -->
    <target name="compile-jcmd" depends="init">
        <javac  srcdir="${src.dir}"
                destdir="${component.classes.dir}"
                debug="${javac.debug}"
                debuglevel="${javac.debuglevel}"
                optimize="${javac.optimize}"
                source="${javac.source}"
                deprecation="${javac.deprecation}"
                failonerror="true"
                verbose="${javac.verbose}"
                fork="no">
            <classpath refid="compile.classpath"/>
            <exclude name="tests/**"/>
            <exclude name="com/sun/cli/jcmd/framework/BSFCmd.java"/>
            <exclude name="com/sun/cli/jmxcmd/**/*.java"/>
            <include name="**/*.java"/>
            <compilerarg value="${javac.lint}"/>
        </javac>
    </target>
    
    
    <!-- assemble-jcmd -->
    <target name="assemble-jcmd" depends="init-assemble, compile-jcmd"
        description="create jcmd.jar">
        <copy todir="${component.classes.dir}">
            <fileset dir="${jcmd.dir}" includes="**/*.properties"/>
        </copy>
        <jar jarfile="${jcmd.jar}" update="yes">
            <fileset dir="${jcmd.classes.dir}">
                <include name="com/sun/cli/jcmd/**/*.class"/>
                <include name="com/sun/cli/jcmd/**/*.properties"/>
                <exclude name="com/sun/cli/jcmd/framework/BSFCmd.java"/>
            </fileset>
        </jar>
    </target>


    <!-- build-jcmd -->
    <target name="build-jcmd" depends="compile-jcmd, assemble-jcmd"
        description="build jcmd framework" />
        
        
    <!-- compile -->
    <target name="compile" depends="init, compile-jcmd">
        <javac  srcdir="${src.dir}"
                destdir="${component.classes.dir}"
                debug="${javac.debug}"
                optimize="${javac.optimize}"
                source="${javac.source}"
                deprecation="${javac.deprecation}"
                failonerror="true">
            <classpath refid="compile.classpath"/>
            <exclude name="tests/**"/>
            <exclude name="com/sun/cli/jcmd/framework/BSFCmd.java"/>
            <include name="**/*.java"/>
        </javac>
    </target>
    
    <target name="init-optional" description="${component.name} initialization">
        <mkdir dir="${optional.classes.dir}"/>
    </target>
    
    <!-- compile-optional -->
    <target name="compile-optional" depends="build, init-optional">
        <javac  srcdir="${optional.dir}/mbeans:${optional.dir}/providers:${optional.dir}/cmd"
                destdir="${optional.classes.dir}"
                debug="${javac.debug}"
                optimize="${javac.optimize}"
                source="${javac.source}"
                deprecation="${javac.deprecation}"
                failonerror="true">
            <classpath refid="compile.classpath"/>
            <classpath>
                <pathelement location="${component.classes.dir}"/>
                <pathelement location="${required-jars.dir}/appserv-ext.jar"/>
            </classpath>
            <exclude name="tests/**"/>
            <include name="**/*.java"/>
        </javac>
    </target>
    
    <!-- assemble-optional -->
    <target name="assemble-optional" depends="init-assemble, compile-optional"
        description="Create optional jar files">
        <copy todir="${optional.classes.dir}">
            <fileset dir="${optional.dir}" includes="**/*.properties"/>
        </copy>
        <jar jarfile="${jmxcmd-optional.jar}" update="yes">
            <fileset dir="${optional.classes.dir}">
                <include name="**/*.class"/>
                <include name="**/*.properties"/>
            </fileset>
        </jar>
    </target>
    
    <!-- build-optional -->
    <target name="build-optional" depends="compile, compile-optional, assemble-optional"
        description="Build entire component" />

    <!-- assemble -->
    <target name="assemble" depends="init"
        description="Create ${component} jar files">
        <copy todir="${component.classes.dir}">
            <fileset dir="${src.dir}" includes="**/*.properties"/>
        </copy>
        <copy todir="${jars.dir}">
            <fileset dir="${required-jars.dir}" includes="**/*.jar"/>
        </copy>
        <jar jarfile="${jmxcmd.jar}" update="yes">
            <fileset dir="${component.classes.dir}">
                <include name="**/*.class"/>
                <include name="**/*.properties"/>
                <exclude name="tests/*"/>
            </fileset>
        </jar>
    </target>

    <!-- compile tests -->
    <target name="compile-tests" depends="compile, compile-optional"
        description="Compiles ${component} tests">
        <delete dir="${test.classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac  srcdir="tests"
                destdir="${test.classes.dir}"
                debug="${javac.debug}"
                optimize="${javac.optimize}"
                source="${javac.source}"
                deprecation="${javac.deprecation}"
                failonerror="true">
            <classpath refid="compile.classpath"/>
            <classpath>
                <pathelement location="${component.classes.dir}"/>
                <pathelement location="${optional.classes.dir}"/>
                <pathelement location="${required-jars.dir}/junit.jar"/>
            </classpath>
            <include name="**/*.java"/>
        </javac>
    </target>

    <!-- assemble tests -->
    <target name="assemble-tests" depends="compile-tests"
        description="Create unit test jar">
        <jar jarfile="${tests.jar}">
            <fileset dir="${test.classes.dir}">
                <include name="**/*.class"/>
                <include name="**/*.properties"/>
            </fileset>
        </jar>
    </target>
    
    
    <!-- build-tests -->
    <target name="build-tests" depends="compile-tests, assemble-tests"
        description="Build entire component" />

    <path id="test.execution.classpath">
      <pathelement location="${required-jars.dir}/javax77.jar"/>
      <pathelement location="${required-jars.dir}/appserv-ext.jar"/>
      <pathelement location="${required-jars.dir}/jmxtools.jar"/>
      <pathelement location="${required-jars.dir}/junit.jar"/>
      <pathelement location="${component.classes.dir}"/>
      <pathelement location="${optional.classes.dir}"/>
      <pathelement location="./tests/build"/>
    </path>

    
    <target name="run-tests" depends="compile-tests"
	    description="run the jmxcmd unit tests. Uses
	    jmxcmd-test.properties and jmxcmd-test.classes to configure the
	    tests.!">
      <java classpathref="test.execution.classpath"
	    classname="com.sun.cli.jmxcmd.test.main.TestsMain">
	    <arg value="${jxmcmd-test.properties}"/>
      </java>
    </target>
    
    
    <!-- compile-all -->
    <target name="compile-all" description="compile jcmd, jmxcmd, optional, tests"
        depends="compile-jcmd, compile, compile-optional, compile-tests">
    </target>
    
    <!-- build-all -->
    <target name="build-all" description="build everything"
        depends="clean, build-jcmd, build, build-optional, build-tests">
    </target>


    <!-- clean -->
    <target name="clean" description="clean">
        <delete dir="${component.classes.dir}"/>
        <delete dir="${optional.classes.dir}"/>
        <delete dir="${test.classes.dir}"/>
        <delete file="${jars.dir}/jmxcmd.jar"/>
        <delete file="${jars.dir}/jcmd.jar"/>
        <delete file="${jars.dir}/jmxcmd-optional.jar"/>
        <delete file="${jars.dir}/jmxcmd-tests.jar"/>
    </target>

</project>
