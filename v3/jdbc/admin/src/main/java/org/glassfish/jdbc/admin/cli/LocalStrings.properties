add.resources=The add-resources command creates the resources named in the specified XML file. The xml_file_path is the path to the XML file containing the resources to  be  created.  The  DOCTYPE must be specified as in the resources.xml file.
add.resources.target=Specifies the target  for  which you  are creating the resources.
add.resources.xml_file_name=The path to the XML file containing the resource(s) to be created. The XML file must reside in the <install-dir>/domains/domain1/config directory. If you specify a relative path or simply provide the name of the XML file, this command will prepend <install-dir>/domains/domain1/config  to this operand.
add.resources.noJdbcConnectionPoolId=No pool name defined for JDBC Connection pool.
create.jdbc.resource=creates a JDBC resource with the specified JNDI name
create.jdbc.resource.connectionpoolid=The name of the JDBC connection pool. If two or more JDBC resource elements point to the same connection pool element, they use the same pool connection at runtime.
create.jdbc.resource.description=Text providing descriptive details about the JDBC resource.
create.jdbc.resource.jndi_name=The JNDI name of this JDBC resource.
create.jdbc.resource.enabled=Determines whether the JDBC resource is enabled at runtime. The default value is true.
create.jdbc.resource.success=JDBC resource {0} created successfully.
create.jdbc.resource.duplicate=A JDBC resource named {0} already exists.
create.jdbc.resource.fail=Command create-jdbc-resource failed.
create.jdbc.resource.connPoolNotFound=Attribute value (pool-name = {0}) is not found in list of jdbc connection pools.
delete.jdbc.resource=removes a JDBC resource with the specified JNDI name
delete.jdbc.resource.jdbc_resource_name=The JNDI name of this JDBC resource to be removed.
delete.jdbc.resource.success=Command delete-jdbc-resource executed successfully.
delete.jdbc.resource.fail=Command create-jdbc-resource failed.
delete.jdbc.resource.notfound=A JDBC resource named {0} does not exist.
list.jdbc.resources=gets all JDBC resources
list.jdbc.resources.success=Command list-jdbc-resources executed successfully.
list.jdbc.resources.fail=Command list-jdbc-resources failed.
create.jdbc.connection.pool=registers the JDBC connection pool
create.jdbc.connection.pool.datasourceclassname=The name of the vendor\u2014supplied JDBC datasource resource manager.
create.jdbc.connection.pool.restype=The interface that the datasource class implements. Must be one of javax.sql.DataSource, javax.sql.ConnectionPoolDataSource or javax.sql.XADataSource. It leads to an error when this option has a legal value and the indicated interface is not implemented by the datasource class. This option has no default value.
create.jdbc.connection.pool.steadypoolsize=The minimum and initial number of connections maintained in the pool. The default value is 8.
create.jdbc.connection.pool.maxpoolsize=The maximum number of connections that can be created. The default value is 32.
create.jdbc.connection.pool.maxwait=The amount of time a caller will wait before a connection timeout is sent. The default is 60 seconds. A value of 0 forces the caller to wait indefinitely.
create.jdbc.connection.pool.poolresize=Quantity by which the pool will scale-up or scale-down the number of connections. Scale-up: When the pool has no free connections, pool will scale-up by this quantity. Scale-down: All the invalid and idle connections are removed, sometimes resulting in removing connections of quantity greater than this value. Steadypoolsize will be ensured. Possible values are from 0 to MAX_INTEGER. The default value is 2.
create.jdbc.connection.pool.idletimeout=The maximum time, in seconds, that a connection can remain idle in the pool. After this time, the implementation can close this connection. This timeout value must be kept shorter than the server side timeout value to prevent the accumulation of unusable connections in the application. The default value is 300.
create.jdbc.connection.pool.isolationlevel=The transaction-isolation-level on the pooled database connections. This option does not have a default value. If not specified, the pool operates with the default isolation level that the JDBC driver provides. You can set a desired isolation level using one of the standard transaction isolation levels: read-uncommitted, read-committed, repeatable-read, serializable. Applications that change the isolation level on a pooled connection programmatically risk polluting the pool. This could lead to program errors.
create.jdbc.connection.pool.isisolationguaranteed=This is applicable only when a particular isolation level is specified for transaction-isolation-level. The default value is true. This option assures that every time a connection is obtained from the pool, isolation level is set to the desired value. This could have some performance impact on some JDBC drivers. Administrators can set this to false when the application does not change --isolationlevel before returning the connection.
create.jdbc.connection.pool.isconnectvalidatereq=If set to true, connections are validated or checked to see if they are usable before giving out to the application. The default value is false.
create.jdbc.connection.pool.validationmethod=The name of the validation table used to perform a query to validate a connection. Valid settings are: auto-commit, meta-data, or table. The default value is auto-commit.
create.jdbc.connection.pool.validationtable=The name of the validation table used to perform a query to validate a connection.
create.jdbc.connection.pool.failconnection=If set to true, all connections in the pool must be closed when a single validation check fails. The default value is false. One attempt is made to re-establish failed connections.
create.jdbc.connection.pool.allownoncomponentcallers=A pool with this property set to true, can be used by non-J2EE components, that is, components other than EJBs or Servlets. The returned connection is enlisted automatically with the transaction context obtained from the transaction manager. 
create.jdbc.connection.pool.nontransactionalconnections=A pool with this property set to true returns non-transactional connections. This connection does not get automatically enlisted with the transaction manager.
create.jdbc.connection.pool.validateatmostonceperiod=
create.jdbc.connection.pool.leaktimeout=
create.jdbc.connection.pool.leakreclaim=
create.jdbc.connection.pool.creationretryattempts=
create.jdbc.connection.pool.creationretryinterval=
create.jdbc.connection.pool.statementtimeout=
create.jdbc.connection.pool.lazyconnectionenlistment=
create.jdbc.connection.pool.lazyconnectionassociation=
create.jdbc.connection.pool.associatewiththread=
create.jdbc.connection.pool.matchconnections=
create.jdbc.connection.pool.maxconnectionusagecount=
create.jdbc.connection.pool.wrapjdbcobjects=
create.jdbc.connection.pool.description=Text providing details about the specified JDBC connection pool.
create.jdbc.connection.pool.property=Optional attribute name/value pairs for configuring the connection pool.
create.jdbc.connection.pool.jdbc_connection_pool_id=The name of the JDBC connection pool to be created.
create.jdbc.connection.pool.success=JDBC connection pool {0} created successfully.
create.jdbc.connection.pool.fail=JDBC connection pool {0} creation failed. {1}
create.jdbc.connection.pool.duplicate=A JDBC connection pool named {0} already exists.
delete.jdbc.connection.pool=removes the specified JDBC connection pool
delete.jdbc.connection.pool.cascade=If the option is set to true, all the JDBC resources associated with the pool, apart from the pool itself, are deleted. When set to false, the deletion of pool fails if any resources are associated with the pool. Resources must be deleted explicitly or the option must be set to true. By default, the option is false.
delete.jdbc.connection.pool.jdbc_connection_pool_id=The name of the JDBC resource to be removed.
delete.jdbc.connection.pool.success=Command delete-jdbc-connection pool executed successfully.
delete.jdbc.connection.pool.fail=Command delete-jdbc-connection-pool failed.
delete.jdbc.connection.pool.notfound=A JDBC connection pool named {0} does not exist.
delete.jdbc.connection.pool.noJndiName=No id defined for JDBC Connection pool.
delete.jdbc.connection.pool.pool_in_use=Some jdbc resources or persistence manager factory resources are referencing this connection pool. Use 'cascade' option to delete them as well.
list.jdbc.connection.pools=lists all JDBC connection pools
list.jdbc.connection.pools.success=Command list-jdbc-connection-pools executed successfully.
list.jdbc.connection.pools.fail=Command list-jdbc-connection-pools failed
