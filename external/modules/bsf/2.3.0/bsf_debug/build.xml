<?xml version="1.0"?>

<!-- ===================================================================

   Build file for BSF-DEBUG

Notes:

   This is a build file for use with the Jakarta Ant build tool.

Prerequisites:

    None

Build Instructions:

   To build, run

     java org.apache.tools.ant.Main <target>

   on the directory where this file is located with the target you want.

Most useful targets:

 - compile  -> creates the "bsf_debug.jar" package in "./build/lib" (default target)
 - javadocs -> creates the javadocs in "./build/javadocs"
 - bindist  -> creates the complete binary distribution in "./dist/"
 - srcdist  -> creates the complete src distribution in "./dist/"
 - dist     -> creates both the binary and the src distributions in "./dist/"
 - clean    -> removes all the generated files and directories

==================================================================== -->

<project name="BSF-DEBUG" default="compile" basedir=".">

  <target name="init">
    <tstamp/>

    <property name="name" value="bsf_debug"/>
    <property name="Name" value="Bean Scripting Framework Debug Layer"/>
    <property name="version" value="2.2"/>
    <property name="version.underscore" value="2_2"/>
    <property name="debug" value="off"/>

    <property name="docs.dir" value="docs"/>
    <property name="src.dir" value="src"/>
    <property name="lib.dir" value="lib"/>

    <property name="packages" value="org.apache.*"/>

    <property name="build.file" value="build.xml"/>

    <property name="build.dir" value="build"/>
    <property name="build.dest" value="build/classes"/>
    <property name="build.lib" value="build/lib"/>
    <property name="build.javadocs" value="build/javadocs"/>

    <property name="dist.dir" value="dist"/>
    <property name="dist.dir.root"
              value="${dist.dir}/${name}-${version.underscore}"/>
    <property name="dist.bin.file"
              value="${dist.dir}/${name}-bin-${version}"/>
    <property name="dist.src.file"
              value="${dist.dir}/${name}-src-${version}"/>

    <!-- ================================================================= -->
    <!-- Sets version and time/date specific values                        -->
    <!-- ================================================================= -->
    <filter token="RELEASE_DATE_TIME" value="${TODAY} / ${TSTAMP}"/>
    <filter token="VERSION" value="${version}"/>
    <filter token="VERSION_UNDERSCORE" value="${version.underscore}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.lib}"/>

    <uptodate property="javadoc.required"
              targetfile="${build.lib}/${name}.jar">
      <srcfiles dir="${build.dir}" includes="**/*.html"/>
    </uptodate>

  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile"
          description="Compiles the *.java files."
          depends="prepare">
    <copy todir="${build.dest}">
      <fileset dir="${src.dir}">
        <include name="**/*.properties"/>
      </fileset>
    </copy>

    <javac srcdir="${src.dir}" destdir="${build.dest}" debug="${debug}"/>

    <!-- ================================================================= -->
    <!-- Produces the jar file                                             -->
    <!-- ================================================================= -->
    <mkdir dir="${build.lib}"/>
    <jar jarfile="${build.lib}/${name}.jar" basedir="${build.dest}"/>

    <uptodate property="javadoc.required"
              targetfile="${build.lib}/${name}.jar">
      <srcfiles dir="${build.dir}" includes="**/*.html"/>
    </uptodate>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs"
          description="Generates the API documentation."
          depends="prepare">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             destdir="${build.javadocs}"
             author="true"
             version="false"
             use="true"
             windowtitle="${Name} API"
             doctitle="${Name}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation if necessary                          -->
  <!-- =================================================================== -->
  <target name="javadocsIfRequired" if="javadoc.required" depends="prepare">
    <antcall target="javadocs"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the binary distribution                                     -->
  <!-- =================================================================== -->
  <target name="bindist"
          description="Creates the binary distribution(s)."
          depends="compile, javadocsIfRequired">
    <delete dir="${dist.dir.root}"/>
    <delete file="${dist.bin.file}.tar"/>
    <delete file="${dist.bin.file}.tar.gz"/>
    <delete file="${dist.bin.file}.zip"/>

    <copy todir="${dist.dir.root}/docs/api">
      <fileset dir="${build.javadocs}"/>
    </copy>
    <copy todir="${dist.dir.root}/lib">
      <fileset dir="${build.lib}"/>
    </copy>

    <!-- ================================================================= -->
    <!-- Produces the tar/gzip file                                        -->
    <!-- ================================================================= -->
    <tar tarfile="${dist.bin.file}.tar" basedir="${dist.dir}"
         excludes="*.zip,*.tar,*.gz"/>
    <gzip src="${dist.bin.file}.tar" zipfile="${dist.bin.file}.tar.gz"/>
    <delete file="${dist.bin.file}.tar"/>

    <!-- ================================================================= -->
    <!-- Produces the zip file                                             -->
    <!-- ================================================================= -->
    <zip zipfile="${dist.bin.file}.zip" basedir="${dist.dir}"
         excludes="*.zip,*.tar,*.gz"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                     -->
  <!-- =================================================================== -->
  <target name="srcdist"
          description="Creates the source distribution(s)."
          depends="init">
    <delete dir="${dist.dir.root}"/>
    <delete file="${dist.src.file}.tar"/>
    <delete file="${dist.src.file}.tar.gz"/>
    <delete file="${dist.src.file}.zip"/>

    <copy todir="${dist.dir.root}/src">
      <fileset dir="${src.dir}"/>
    </copy>
    <copy todir="${dist.dir.root}/lib/win32">
      <fileset dir="${lib.dir}/win32">
        <patternset includes="*.dll"/>
      </fileset>
    </copy>

    <copy file="license.html" tofile="${dist.dir.root}/license.html"/>
    <copy file="${build.file}" tofile="${dist.dir.root}/${build.file}"/>

    <!-- ================================================================= -->
    <!-- Produces the tar/gzip file                                        -->
    <!-- ================================================================= -->
    <tar tarfile="${dist.src.file}.tar" basedir="${dist.dir}"
         excludes="*.zip,*.tar,*.gz"/>
    <gzip src="${dist.src.file}.tar" zipfile="${dist.src.file}.tar.gz"/>
    <delete file="${dist.src.file}.tar"/>

    <!-- ================================================================= -->
    <!-- Produces the zip file                                             -->
    <!-- ================================================================= -->
    <zip zipfile="${dist.src.file}.zip" basedir="${dist.dir}/"
         excludes="*.zip,*.tar,*.gz"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates both distributions                                          -->
  <!-- =================================================================== -->
  <target name="dist"
          description="Executes both bindist and srcdist."
          depends="bindist, srcdist"/>

  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target name="clean"
          description="Removes build and dist directories."
          depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

</project>
