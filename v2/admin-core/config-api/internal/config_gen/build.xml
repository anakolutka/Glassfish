<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<!--
The (simplified) process is this (I've omitted the validation steps):

construct a flattened rng file from the rng source files
Use the flattened rng file to construct the dtd
Use the dtd to make a modified dtd (stripping out bits schema2beans can't handle)
use the modified dtd and a couple of other files to generate the classes

-->

<project name="Generating configuration for application server" default="all" basedir=".">
  
  <property file="./build.properties"/>

  
  <!-- targets are in alphabetical order -->
  
  <target name="all" depends="config.gen, sun-resources-dtd"
          description="generate classes for the schema"/>

  <!-- check whether the dtd is uptodate wrt the rng file -->
  <target name="check.dtd.dates">
    <uptodate property="dtd.is.uptodate" targetfile="${domain.dtd}" srcfile="${domain.rng}"/>
  </target>

  <!-- check whether the generated classes are uptodate wrt the modified dtd -->
  <target name="check.generated.classes.dates">
    <uptodate property="generated.classes.are.uptdodate" targetfile="${domain.java}">
      <srcfiles dir=".">
        <include name="${modified.dtd}"/>
        <include name="${primary.keys}"/>
        <include name="${extratags}"/>
        <include name="${s2b.jar}"/>
      </srcfiles> 
    </uptodate>
  </target>

  <!-- check whether the modified dtd is uptodate wrt the generated dtd -->
  <target name="check.modified.dtd.dates">
    <uptodate property="modified.dtd.is.uptodate" srcfile="${domain.dtd}" targetfile="${modified.dtd}"/>
  </target>

  <!-- check whether the domain.rng file is uptodate wrt the source rng files -->
  <target name="check.rng.dates">
    <uptodate property="rng.is.uptodate" targetfile="${domain.rng}">
      <srcfiles dir="${rng.dir}">
		<include name="*.rng"/>
	<!-- This doesn't seem to work!! -->
<!--         <include name="src/xsl/rnginclude.xsl"/> -->
      </srcfiles>
    </uptodate>
  </target>

  <!-- check whether list of primary keys is out of date wrt domain.sch -->
  <target name="check.pk.dates">
    <uptodate property="pk.is.uptodate" targetfile="${primary.keys}" srcfile="${domain.sch}"/>
  </target>
  
  <!-- check whether target dtd file is uptodate wrt to local rng file -->
  <target name="check.sun-resources-dtd.dates">
    <condition property="sun-resources-dtd.is.uptodate">
      <and>
	<available file="${local.resources.rng}"/>
	<uptodate targetfile="${resources.dtd}" srcfile="${local.resources.rng}"/>	
      </and>
    </condition>

  </target>

  <!-- check whether local rng file is uptodate wrt to source files -->
  <target name="check.sun-resources-rng.dates">
    <uptodate property="sun-resources-rng.is.uptodate" targetfile="${local.resources.rng}">
      <srcfiles dir="${rng.dir}">
	<include name="sun-resources_1_1.rng"/>
	<include name="data-types.rng"/>
	<include name="resources.rng"/>
	<include name="description.rng"/>
	<include name="custom-resource.rng"/>
	<include name="external-jndi-resource.rng"/>
	<include name="jdbc-resource.rng"/>
	<include name="mail-resource.rng"/>
	<include name="persistence-manager-factory-resource.rng"/>
	<include name="admin-object-resource.rng"/>
	<include name="connector-resource.rng"/>
	<include name="resource-adapter-config.rng"/>
	<include name="jdbc-connection-pool.rng"/>
	<include name="connector-connection-pool.rng"/>
	<include name="property.rng"/>
      </srcfiles>
    </uptodate>
  </target>

  <!-- Check that the validation stuff has been checked out -->
  <target name="check.validation">
    <condition property="validation.enabled">
      <and>
	<available file="${trang.jar}"/>
	<available file="${jing.jar}"/>
      </and>
    </condition>
  </target>
  
  <!-- generate the modified dtd from the generated dtd -->
  <target name="config.dtd.gen" depends="generate.dtd"
	  description="generate the modified dtd from the generated dtd">
    <xslt in="${domain.rng}"
          style="${xsl.src.dir}/dtdformatter.xsl"
          out="modified-domain.rng"/>

    <xslt in="modified-domain.rng"
          style="${rng2dtd.xsl}"
          out="${modified.dtd}"/>
    <antcall target="validate.dtd.file">
      <param name="dtd.file" value="${modified.dtd}"/>
    </antcall>
  </target>
  
  <!-- generate the classes from the modified dtd -->
  <target name="config.gen" depends="config.dtd.gen, pk.gen"
          description="generate the classes from the modified dtd">
    <mkdir dir="build_libs"/>
    <unzip src="../../../../../glassfish_dependencies/netbeans/jars/netbeans-5.5-dev-200604210200.jar" 
               dest="build_libs"/>
    <java fork="false" classname="org.netbeans.modules.schema2beansdev.GenBeans"
          failonerror="true">
      <arg line="-f ${basedir}/${modified.dtd} -p com.sun.enterprise.config.serverbeans -r ${java.src.dir}"/>
        <classpath>
                <pathelement location="${s2b.jar}"/>
                <pathelement location="build_libs/modules/schema2beansdev.jar"/>
                <pathelement location="build_libs/modules/schema2beans.jar"/>
        </classpath>
      <sysproperty key="listofpks" value="${basedir}/${primary.keys}"/>
      <sysproperty key="servertagname" value="ServerTags"/>
      <sysproperty key="extratags" value="${basedir}/${extratags}"/>
    </java>
    <delete dir="build_libs"/>
  </target>

  <!-- create the domain.rng file from the rng source files -->
  <target name="flatten.domain.rng" 
          description="create the domain.rng file from the rng source files">
<!-- the *.jar doesn't work on Unix -->
<!--     <antcall target="validate.rng.file"> -->
<!--       <param name="rng.file" value="${rng.dir}/*.rng"/> -->
<!--     </antcall> -->

<!-- this touch is there 'cos the xslt target only executes if top.rng
is newer than domain.rng, and won't execute if its just one of the
included files that is newer -->
    <touch file="${top.rng}"/>

    <xslt in="${top.rng}"
          style="${rnginclude.xsl}"
          out="${domain.rng}"/>
<!--     <antcall target="validate.rng.file"> -->
<!--       <param name="rng.file" value="${domain.rng}"/> -->
<!--     </antcall> -->

<!-- xslt doesn't make domain.rng newer than top.rng, so it has to be
done manually -->
    <touch file="${domain.rng}"/>
  </target>

  <!-- force the targets to be out of date with respect to the source -->
  <target name="force">
    <touch file="${top.rng}"/>
  </target>

  <!-- generate the dtd from the domain.rng file -->
  <target name="generate.dtd" depends="flatten.domain.rng"
          description="generate the dtd from the domain.rng file">
    <xslt in="${domain.rng}"
          style="${rng2dtd.xsl}"
          out="${domain.dtd}">
	  <param name="purpose" expression="Generating domain DTD"/>
	  <param name="copyright.text.comment" expression="${copyright.text.comment}"/>
	  <param name="dtd.comment" expression="${domain.dtd.comment}"/>
    </xslt>
    <antcall target="validate.dtd.file">
      <param name="dtd.file" value="${domain.dtd}"/>
    </antcall>
  </target>

  <!-- generate the list of primary keys -->
  <target name="pk.gen"
	  description="generate the list of primary keys" >
    <xslt in="${domain.sch}"
	  style="${primary.keys.xsl}"
	  out="${primary.keys}"/>
  </target>
  
  <!-- validate a given dtd (dtd.file) -->
  <target name="validate.dtd.file" depends="check.validation" if="validation.enabled">
    <java fork="true" jar="${trang.jar}" failonerror="true">
      <arg value="${dtd.file}"/>
      <arg value="${dtd.file.trang.rng}"/>
    </java>
    <delete file="${dtd.file.trang.rng}"/>
  </target>

  <!-- validate a given rng (rng.file) -->
  <target name="validate.rng.file" depends="check.validation" if="validation.enabled">
    <java fork="true" jar="${jing.jar}" failonerror="true">
      <arg value="${relaxng.rng}"/>
      <arg value="${rng.file}"/>
    </java>
  </target>

  <!-- run a schematron and print the results to stdout -->

  <target name="schematron.report">
    <antcall target="schematron">
      <param name="schema" value="${schema}"/>
      <param name="meta" value="${meta}"/>
      <param name="in" value="${in}"/>
      <param name="out" value="schematron.report.txt"/>
    </antcall>
    <concat>
      <filelist dir="." files="schematron.report.txt"/>
    </concat>
    <delete file="schematron.report.txt"/>
  </target>

    <!--
  process the schematron (schema) with the meta-stylesheet (meta), and
  apply the result to the input (in) to give output stylesheet (out) 
  -->
  <target name="schematron">
    <tempfile property="sch" prefix="temp" suffix=".xsl"/>
    <xslt in="${schema}" style="${meta}" out="${sch}"/>
    <xslt in="${in}" style="${sch}" out="${out}"/>
    <!-- <delete file="${sch}"/> -->
  </target>

  <!--
  construct the servertestlist file from domain.rng
  -->
  <target name="servertestlist"
	  description="construct the servertestlist file from domain.rng"
	  depends="flatten.domain.rng">
    <xslt in="${domain.rng}"
	  style="${rng2servertestlist.xsl}"
	  out="${servertestlist}"/>
    <touch file='${servertestlist}'/>
  </target>
  <!--
  build the sun-resources_x_y.dtd
  -->
  <target name="sun-resources-dtd"
	  description="build the sun-resources_x_y.dtd"
	  depends="sun-resources-rng">
    <xslt in="${local.resources.rng}"
	  style="${rng2dtd.xsl}"
	  out="${resources.dtd}">
	  <param name="purpose" expression="Generating resources DTD"/>
	  <param name="copyright.text.comment" expression="${copyright.text.comment}"/>
	  <param name="dtd.comment" expression="${resources.dtd.comment}"/>
    </xslt>
    <antcall target="validate.dtd.file">
      <param name="dtd.file" value="${resources.dtd}"/>
    </antcall>
  </target>

  <!--
  build the local sun-resources.rng file
  -->
  <target name="sun-resources-rng"
	  description="build the local sun-resources.rng file">

    <!-- this touch is there 'cos the xslt target only executes if top.rng
    is newer than domain.rng, and won't execute if its just one of the
    included files that is newer -->
    <touch file="${resources.rng}"/>

    <xslt in ="${resources.rng}"
	  style="${rnginclude.xsl}"
	  out="${local.resources.rng}">
      <param name="purpose" expression='"add-resources CLI command."'/>
    </xslt>

    <antcall target="validate.rng.file">
      <param name="rng.file" value="${local.resources.rng}"/>
    </antcall>
  </target>
  
  <!-- check that two dtd files (dtd.file1, dtd.file2) are the same -->
<!--   <target name="check.dtd.files.are.same" -->
<!--           description="checks that two dtd files (dtd.file1, dtd.file2) are the same"> -->
<!--     <antcall target="tokenize.dtd.file"> -->
<!--       <param name="dtd.file" value="${dtd.file1}"/> -->
<!--       <param name="token.file" value="dtd1.tokens"/> -->
<!--     </antcall> -->
<!--     <antcall target="tokenize.dtd.file"> -->
<!--       <param name="dtd.file" value="${dtd.file2}"/> -->
<!--       <param name="token.file" value="dtd2.tokens"/> -->
<!--     </antcall> -->
<!--     <exec command="diff"> -->
<!--       <arg value="dtd1.tokens"/> -->
<!--       <arg value="dtd2.tokens"/> -->
<!--     </exec> -->
<!--     <delete file="dtd1.tokens"/> -->
<!--     <delete file="dtd2.tokens"/> -->
<!--   </target> -->

<!--   <target name="tokenize.dtd.file"> -->

<!--   </target> -->

  <target name="clobber">
    <antcall target="clean"/>
    <delete file="${domain.dtd}"/>
    <delete file="${resources.dtd}"/>
  </target>

  <target name="clean">
    <delete file="${modified.dtd}"/>
    <delete file="${domain.rng}"/>
    <delete file="${dtd.file.trang.rng}"/>
    <delete file="modified-domain.rng"/>
    <delete file="${local.resources.rng}"/>
  </target>

</project>  
