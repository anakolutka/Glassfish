<?xml version="1.0" encoding="ASCII"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->


<!--
 Copyright 2006 Sun Microsystems, Inc. All rights reserved.
 Use is subject to license terms.
-->


<!-- VARIABLES TO BE DEFINED BY USER 
Basic assumption - only a single source directory hierarchy per sub-component!

Terms:
UUT - Unit Under Test - refers to the class to be tested, and by
extension the corresponding .java and .class files

UUT source file - the .java file of a java class that is to be tested.

You need to define certain variables to tell the system which
directories, packages and classpaths to use - details follow:

The global classpath ref used is "test.classpath"
The root of the classes directory is "component.classes.dir"
Test reports are generated into ${component.publish.home}/internal/tests

-->

<!-- Unit Test Generation 
We use JUnitDocLet to generate test files from UUT source files. Use
of JUnitDocLet is optional - you can create test files any way you
choose. If you don't generate test files then the corresponding
properties and classpath references don't need to be defined

The UUT source files are all under some common directory. The name of
this directory is the value of the property called:

  src.dir

The generated test files will be placed under the same hierarchy.

Only UUTs within specific packages under unit.test.gen.src.dir
will be used to generate tests (i.e. if a UUT is not within one of the
named packages then no test class will be generated). The comma
separated list of packages is the value of the property:

  unit.test.gen.src.package

Targets:

  jt.generateUnitTests - causes junit tests to be generated.

For some class A the corresponding generated test class will be called
ATest, with corresponding file names.
-->

<!-- Compiling and running unit tests
Targets:
  unit tests are compiled along with their sources - there is no
special target for compiling unit tests.

  jt.runUnitTests causes all unit tests to be run, generating xml reports.

  jt.deleteUnitTestReports will cause all test reports to be deleted.

  jt.createUnitTestReports depends upon jt.deleteUnitTestReports & jt.runUnitTests
and causes all html test reports to be generated.
-->

<!-- Names exported to the outside
 All internal variables start with __jt_
 targets: jt.deleteUnitTestReports, jt.createUnitTestReports, jt.runUnitTests
-->
<property name="junit.jar" value="${publish.home}/junit/junit.jar"/>
<property name="component.test.dir" value="${component.publish.home}/internal/test"/>
<property name="xml.report.dir" value="${component.test.dir}/xml"/>
<property name="html.report.dir" value="${component.test.dir}/html"/>

  <!-- Pattern of the XML files that are generated by jt.runUnitTests -->
  <property name="__jt_output_pattern" value="TEST-*.xml"/>  

  <target name="jt.createUnitTestReports"
    depends="jt.deleteUnitTestReports, jt.runUnitTests"
    description="create html test reports for junit tests">
    <mkdir dir="${html.report.dir}"/>
    <junitreport todir="${html.report.dir}">
      <fileset dir="${xml.report.dir}">
	<include name="${__jt_output_pattern}"/>
      </fileset>            
      <report format="frames" todir="${html.report.dir}"/>
    </junitreport>
    <echo message="See ${basedir}/${html.report.dir}/index.html for unit test results."/>
  </target>       

  <target name="jt.deleteUnitTestReports" description="Delete all junit test report directories">	
    <delete quiet="true" dir="${xml.report.dir}" />
    <delete quiet="true" dir="${html.report.dir}"/>
  </target>

  <target name="jt.runUnitTests"  description="run junit tests and create xml reports">
    <mkdir dir="${xml.report.dir}"/>
    <junit printsummary="off">
	<jvmarg value="-Dcom.sun.aas.templatesDir=${templates.dir}"/>
      <classpath>
          <path refid="test.classpath"/>
          <pathelement location="${junit.jar}"/>
      </classpath>
      <batchtest fork="true" todir="${xml.report.dir}">
        <fileset dir="${component.classes.dir}" includes="**/*Test*.class" excludes="**/AllTests.class">
	    </fileset>
	<formatter type="xml"/>
      </batchtest>            
    </junit>  
  </target>




  
  
  
