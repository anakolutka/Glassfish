<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="validator-customconstraints">
  <title>Custom constraints</title>

  <para>Though the Bean Validation API defines a whole bunch of standard
  constraint annotations such as <classname>@NotNull</classname>,
  <classname>@Size</classname>, <classname>@Min</classname> or
  <classname>@AssertTrue</classname>, one can easily think of situations, for
  which these standard annotations won't suffice. But as the specification was
  designed with extensibility in mind, you are able to create custom
  constraints tailored to your specific validation requirements in a simple
  and timely manner.</para>

  <section id="validator-customconstraints-simple" revision="1">
    <title>Creating a simple constraint</title>

    <para>To create a custom constraint, the following three steps are
    required:</para>

    <itemizedlist>
      <listitem>
        <para>Create a constraint annotation</para>
      </listitem>

      <listitem>
        <para>Implement a validator, that's able to evaluate that
        annotation</para>
      </listitem>

      <listitem>
        <para>Define a default error message</para>
      </listitem>
    </itemizedlist>

    <section id="validator-customconstraints-constraintannotation"
             revision="1">
      <title>Creating a constraint annotation</title>

      <para>Let's write a constraint annotation, that can be used to express
      that a given string shall either be upper case or lower case. We'll
      apply it later on to ensure, that the <property>licensePlate</property>
      field of the <classname>Car</classname> class from the <link
      linkend="validator-gettingstarted">Getting started</link> chapter is
      always an upper-case string.</para>

      <para>First we need a way to express the two case modes. We might use
      <classname>String</classname> constants, but a better way to go is to
      use a Java 5 enum for that purpose:</para>

      <programlisting>package com.mycompany;

public enum CaseMode {
    UPPER, 
    LOWER;
}</programlisting>

      <para>Now we can define the actual constraint annotation. If you've
      never designed an annotation before, this may look a bit scary, but
      actually it's not that hard:</para>

      <programlisting>package com.mycompany;

import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.*;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.validation.Constraint;

@Target( { METHOD, FIELD, ANNOTATION_TYPE })
@Retention(RUNTIME)
@Constraint(validatedBy = CheckCaseValidator.class)
@Documented
public @interface CheckCase {

    String message() default "{validator.checkcase}";

    Class&lt;?&gt;[] groups() default {};
    
    CaseMode value();

}</programlisting>

      <para>An annotation type is defined using the <code>@interface</code>
      keyword. All attributes of an annotation type are declared in a
      method-like manner. The specification of the Bean Validation API
      demands, that any constraint annotation defines</para>

      <itemizedlist>
        <listitem>
          <para>an attribute "message" that returns the default key for
          creating error messages in case the constraint is violated</para>
        </listitem>

        <listitem>
          <para>an attribute "groups" that allows the specification of
          validation groups, to which this constraint belongs (see <xref
          linkend="validator-usingvalidator-validationgroups" />). This must
          default to an empty array of type
          <classname>Class&lt;?&gt;</classname>.</para>
        </listitem>
      </itemizedlist>

      <para>Besides those two mandatory attributes we add another one allowing
      for the required case mode to be specified. The name "value" is a
      special one, which can be omitted upon using the annotation, if it is
      the only attribute specified, as e.g. in
      <code>@CheckCase(CaseMode.UPPER)</code>.</para>

      <para>In addition we annotate the annotation type with a couple of
      so-called meta annotations:</para>

      <itemizedlist>
        <listitem>
          <para><code>@Target({ METHOD, FIELD, ANNOTATION_TYPE })</code>:
          Says, that methods, fields and annotation declarations may be
          annotated with @CheckCase (but not type declarations e.g.)</para>
        </listitem>

        <listitem>
          <para><code>@Retention(RUNTIME)</code>: Specifies, that annotations
          of this type will be available at runtime by the means of
          reflection</para>
        </listitem>

        <listitem>
          <para><code>@Constraint(validatedBy =
          CheckCaseValidator.class)</code>: Specifies the validator to be used
          to validate elements annotated with @CheckCase</para>
        </listitem>

        <listitem>
          <para><code>@Documented</code>: Says, that the use of
          <code>@CheckCase</code> will be contained in the JavaDoc of elements
          annotated with it</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="validator-customconstraints-validator" revision="1">
      <title>Implementing the constraint validator</title>

      <para>Next, we need to implement a constraint validator, that's able to
      validate elements with a <classname>@CheckCase</classname> annotation.
      To do so, we implement the interface ConstraintValidator as shown
      below:</para>

      <programlisting>package com.mycompany;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

public class CheckCaseValidator implements ConstraintValidator&lt;CheckCase, String&gt; {

    private CaseMode caseMode;

    public void initialize(CheckCase constraintAnnotation) {
        this.caseMode = constraintAnnotation.value();
    }

    public boolean isValid(String object, ConstraintValidatorContext constraintContext) {

        if (object == null)
            return true;

        if (caseMode == CaseMode.UPPER)
            return object.equals(object.toUpperCase());
        else
            return object.equals(object.toLowerCase());
    }

}</programlisting>

      <para>The <classname>ConstraintValidator</classname> interface defines
      two type parameters, which we set in our implementation. The first one
      specifies the annotation type to be validated (in our example
      CheckCase), the second one the type of elements, which the validator can
      handle (here String).</para>

      <para>In case a constraint annotation is allowed at elements of
      different types, a <classname>ConstraintValidator</classname> for each
      allowed type has to be implemented and registered at the constraint
      annotation as shown above.</para>

      <para>The implementation of the validator is straightforward. The
      <methodname>initialize()</methodname> method gives us access to the
      attribute values of the annotation to be validated. In the example we
      store the CaseMode in a field of the validator for further usage.</para>

      <para>In the <methodname>isValid()</methodname> method we implement the
      logic, that determines, whether a <classname>String</classname> is valid
      according to a given <classname>@CheckCase</classname> annotation or
      not. This decision depends on the case mode retrieved in
      <classname>initialize()</classname>. As the Bean Validation
      specification recommends, we consider <code>null</code> values as being
      valid. If <code>null</code> is not a valid value for an element, it
      should be annotated with <code>@NotNull</code> explicitely.</para>

      <para>The passed-in <classname>ConstraintValidatorContext</classname>
      could be used to raise any custom validation errors, but as we are fine
      with the default behavior, we can ignore that parameter for now (TODO
      GM: example for usage).</para>
    </section>

    <section id="validator-customconstraints-errormessage" revision="1">
      <title>Defining the error message</title>

      <para>Finally we need to specify the error message, that shall be used,
      in case a <classname>@CheckCase</classname> constraint is violated. To
      do so, we create a file named
      <filename>ValidationMessages.properties</filename> under
      <filename>src/main/resources</filename> with the following
      content:</para>

      <programlisting>validator.checkcase=Case mode must be {value}.</programlisting>

      <para>If a validation error occurs, the validation runtime will use the
      default value, that we specified for the message attribute of the
      <classname>@CheckCase</classname> annotation to look up the error
      message in this file.</para>
    </section>

    <section id="validator-customconstraints-using" revision="1">
      <title>Using the constraint</title>

      <para>Now that our first custom constraint is completed, we can use it
      in the <classname>Car</classname> class from the <link
      linkend="validator-gettingstarted">Getting started</link> chapter to
      specify that the <property>licensePlate</property> field shall only
      contain upper-case strings:</para>

      <programlisting>package com.mycompany;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

public class Car {

    @NotNull
    private String manufacturer;

    @NotNull
    @Size(min = 2, max = 14)
    @CheckCase(CaseMode.UPPER)
    private String licensePlate;

    @Min(2)
    private int seatCount;
    
    public Car(String manufacturer, String licencePlate, int seatCount) {

        this.manufacturer = manufacturer;
        this.licensePlate = licencePlate;
        this.seatCount = seatCount;
    }

    //getters and setters ...

}</programlisting>

      <para>Finally let's demonstrate in a little test that the
      <classname>@CheckCase</classname> constraint is properly
      validated:</para>

      <programlisting>package com.mycompany;

import static org.junit.Assert.*;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import org.junit.BeforeClass;
import org.junit.Test;

public class CarTest {

    private static Validator validator;

    @BeforeClass
    public static void setUp() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    public void testLicensePlateNotUpperCase() {

        Car car = new Car("Morris", "dd-ab-123", 4);

        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
            validator.validate(car);
        assertEquals(1, constraintViolations.size());
        assertEquals(
            "Case mode must be UPPER.", 
            constraintViolations.iterator().next().getMessage());
    }

    @Test
    public void carIsValid() {

        Car car = new Car("Morris", "DD-AB-123", 4);

        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
            validator.validate(car);

        assertEquals(0, constraintViolations.size());
    }
}</programlisting>
    </section>
  </section>

  <section id="validator-customconstraints-compound" revision="1">
    <title>Constraint composition</title>

    <para>Looking at the <property>licensePlate</property> field of the
    <classname>Car</classname> class, we see three constraint annotations
    already. In complexer scenarios, where even more constraints could be
    applied to one element, this might become a bit confusing easily.
    Furthermore, if we had a <property>licensePlate</property> field in
    another class, we would have to copy all constraint declarations to the
    other class as well, violating the DRY principle.</para>

    <para>This problem can be tackled using compound constraints. In the
    following we create a new constraint annotation
    <classname>@ValidLicensePlate</classname>, that comprises the constraints
    <classname>@NotNull</classname>, <classname>@Size</classname> and
    <classname>@CheckCase</classname>:</para>

    <programlisting>package com.mycompany;

import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.*;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.validation.Constraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@NotNull
@Size(min = 2, max = 14)
@CheckCase(CaseMode.UPPER)
@Target( { METHOD, FIELD, ANNOTATION_TYPE })
@Retention(RUNTIME)
@Constraint(validatedBy = {})
@Documented
public @interface ValidLicensePlate {

    String message() default "{validator.validlicenseplate}";

    Class&lt;?&gt;[] groups() default {};

}</programlisting>

    <para>To do so, we just have to annotate the constraint declaration with
    its comprising constraints (btw. that's exactly why we allowed annotation
    types as target for the <classname>@CheckCase</classname> annotation). As
    no additional validation is required for the
    <classname>@ValidLicensePlate</classname> annotation itself, we don't
    declare a validator within the <classname>@Constraint </classname>meta
    annotation.</para>

    <para>TODO GM: Specifying no validator does not yet work.</para>

    <para>Using the new compound constraint at the
    <property>licensePlate</property> field now is fully equivalent to the
    previous version, where we declared the three constraints directly at the
    field itself:</para>

    <programlisting>package com.mycompany;

public class Car {

    @ValidLicensePlate
    private String licensePlate;

    //...

}</programlisting>

    <para>The set of <classname>ConstraintViolations</classname> retrieved
    when validating a <classname>Car</classname> instance will contain an
    entry for each violated composing constraint of the
    <classname>@ValidLicensePlate</classname> constraint. If you rather prefer
    a single <classname>ConstraintViolation</classname> in case any of the
    composing constraints is violated, the
    <classname>@ReportAsSingleViolation</classname> meta constraint can be
    used as follows:</para>

    <programlisting>//...
@ReportAsSingleViolation
public @interface ValidLicensePlate {

    String message() default "{validator.validlicenseplate}";

    Class&lt;?&gt;[] groups() default {};

}</programlisting>
  </section>

  <section id="validator-customconstraints-classlevel" revision="1">
    <title>Class-level constraints</title>

    <para>A common requirement with constraints is that wether the value of a
    given property is valid or not can not be determined by solely inspecting
    the property itself but depends on the value of annother property of the
    object owning the property.</para>

    <para>This is where class-level constraints come into play. They are
    annotated not at the fields of a class but at the class definition itself,
    allowing for the accompanying validators having access to all properties
    of the object to be validated.</para>

    <para>As example let's create a constraint, that ensures, that no more
    passengers sit in a car than its seat count allows. The constraint
    annotation looks as follows:</para>

    <programlisting>package com.mycompany;

import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.*;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.validation.Constraint;

@Target( { TYPE, ANNOTATION_TYPE })
@Retention(RUNTIME)
@Constraint(validatedBy = {ValidPassengerCountValidator.class})
@Documented
public @interface ValidPassengerCount {

    String message() default "{validator.validpassengercount}";

    Class&lt;?&gt;[] groups() default {};

}</programlisting>

    <para>Note, that within the @Target annotation TYPE instead of METHOD and
    FIELD is specified as possible target for the annotation (besides
    ANNOTATION_TYPE, which allows for @ValidPassengerCount to be used in
    constraint composition). The validator implementation is fairly
    easy:</para>

    <programlisting>package com.mycompany;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

public class ValidPassengerCountValidator implements ConstraintValidator&lt;ValidPassengerCount, Car&gt; {

    public void initialize(ValidPassengerCount constraintAnnotation) {
    }

    public boolean isValid(Car object,
        ConstraintValidatorContext constraintContext) {

        return object.getPassengers().size() &lt;= object.getSeatCount();
    }

}</programlisting>

    <para>As with the first constraint an error text in
    ValidationMessages.properties is required:</para>

    <programlisting>validator.validpassengercount=Passenger count must be less than or equal to seat count.</programlisting>

    <para>The @ValidPassengerCount annotation can now be used at the car
    class:</para>

    <programlisting>package com.mycompany;

import java.util.ArrayList;
import java.util.List;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;

@ValidPassengerCount
public class Car {

    @Min(2)
    private int seatCount;

    @NotNull
    List&lt;String&gt; passengers;

    public Car(int seatCount, String... passengers) {

        this.seatCount = seatCount;
        this.passengers = new ArrayList&lt;String&gt;();

        for (String onePassenger : passengers) {
            this.passengers.add(onePassenger);
        }
    }

    //getters and setters ...
}</programlisting>

    <para>Finally let's try our new class-level annotation in a test:</para>

    <programlisting>package com.mycompany;

import static org.junit.Assert.*;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import org.junit.BeforeClass;
import org.junit.Test;

public class CarTest {

    private static Validator validator;

    @BeforeClass
    public static void setUp() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    public void tooManyPassengers() {

        Car car = new Car(2, "Jupiter", "Pete", "Bob");

        Set&lt;ConstraintViolation&lt;Car3&gt;&gt; constraintViolations =
            validator.validate(car);
        assertEquals(1, constraintViolations.size());
        assertEquals(
            "Passenger count must be less than or equal to seat count.",
            constraintViolations.iterator().next().getMessage());
    }

    @Test
    public void carIsValid() {

        Car car = new Car(2, "Jupiter", "Pete");

        Set&lt;ConstraintViolation&lt;Car3&gt;&gt; constraintViolations =
            validator.validate(car);

        assertEquals(0, constraintViolations.size());
    }
}</programlisting>
  </section>
</chapter>
