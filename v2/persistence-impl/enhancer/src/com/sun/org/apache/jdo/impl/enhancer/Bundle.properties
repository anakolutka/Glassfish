#
# The contents of this file are subject to the terms 
# of the Common Development and Distribution License 
# (the "License").  You may not use this file except 
# in compliance with the License.
# 
# You can obtain a copy of the license at 
# glassfish/bootstrap/legal/CDDLv1.0.txt or 
# https://glassfish.dev.java.net/public/CDDLv1.0.html. 
# See the License for the specific language governing 
# permissions and limitations under the License.
# 
# When distributing Covered Code, include this CDDL 
# HEADER in each file and include the License file at 
# glassfish/bootstrap/legal/CDDLv1.0.txt.  If applicable, 
# add the following below this CDDL HEADER, with the 
# fields enclosed by brackets "[]" replaced with your 
# own identifying information: Portions Copyright [yyyy] 
# [name of copyright owner]
#


 Copyright 2005 The Apache Software Foundation.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at 
 
     http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.


# ResourceBundle properties file for model messages
# key consists of: enhancer.<subpackage>.<description>
# <subpackage> - is optional, package under model
# <description> - short description (use _ to represent space)
# all keys should be in lowercase

#
# Global Enhancer Metadata messages
#

# {0}=detail message
enhancer.metadata.message=JDO ENHANCER: Metadata: {0}

# {0}=error message
enhancer.metadata.error=JDO ENHANCER: Metadata Error: {0}

# {0}=warning message
enhancer.metadata.warning=JDO ENHANCER: Metadata Warning: {0}

# {0}=missing resource file
enhancer.metadata.cannot_read_resource=Cannot read directory or jar file: {0}

#
# Detail Enhancer Metadata messages
#

# {0}=exception message
enhancer.metadata.jdomodel_error=A JDO model exception has occurred: {0}

# {0}=exception message
enhancer.metadata.io_error=An I/O exception has occurred: {0}

# {0}=filename
enhancer.metadata.using_properties=using properties file: {0}

# {0}=filenames
enhancer.metadata.using_jdo_files=using jdo files: {0}

# {0}=path
enhancer.metadata.using_jar_files=using jar/zip files: {0}

# {0}=path
enhancer.metadata.using_source_path=using source path: {0}

# {0}=
enhancer.metadata.using_no_metadata=no JDO metadata source was specified


#
# Global enhancer messages
#

# {0}=detailed message
enhancer.message=JDO ENHANCER: {0}

# {0}=detailed message
enhancer.error=JDO ENHANCER: At least one error occurred while enhancing input class for Transparent Persistence; detailed message(s): {0}

# {0}=error number, {1}=detailed message
enhancer.enumerated_error=JDO ENHANCER: Error ({0}): {1}

# {0}=detailed message
enhancer.internal_error=JDO ENHANCER: An internal error occurred while enhancing input class; detailed message: {0}

# {0}=detailed message
enhancer.warning=JDO ENHANCER: Warning: {0}

#
# Enhancer core messages
#

#
enhancer.class_format_error=I/O error while reading input stream or input stream does not denote a valid Java class.

#
enhancer.io_error_while_writing_stream=I/O error while writing output stream.

# {0}=dir name
enhancer.unable_to_create_dir=Unable to create the directory named {0}.

# {0}=class name
enhancer.class_previously_annotated=The class {0} was previously annotated.

# {0}=boolean
enhancer.class_implements_jdo_pc=implements the JDO PersistenceCapable interface: {0}.

#
enhancer.class_has_default_constructor=has default constructor.
enhancer.class_has_not_default_constructor=has not default constructor.

#
enhancer.class_has_static_initializer=has static initializer.
enhancer.class_has_not_static_initializer=has not static initializer.

#
enhancer.class_has_clone_method=has clone method.
enhancer.class_has_not_clone_method=has not clone method.

#
enhancer.class_has_writeObject_method=has writeObject method.
enhancer.class_has_not_writeObject_method=has not writeObject method.

#
enhancer.class_has_writeReplace_method=has writeReplace method.
enhancer.class_has_not_writeReplace_method=has not writeReplace method.

#
enhancer.class_has_readObject_method=has readObject method.
enhancer.class_has_not_readObject_method=has not readObject method.

# {0}=class name
enhancer.class_missing_default_constructor=The persistence-capable class {0} does not provide a default (no-argument) constructor.

# {0}=boolean
enhancer.class_has_generic_jdo_fields=has the generic JDO fields: {0}.

# {0}=boolean
enhancer.class_has_generic_jdo_methods=has the generic JDO methods: {0}.

# {0}=boolean
enhancer.class_has_generic_jdo_members=has the generic JDO fields and methods: {0}.

# {0}=boolean
enhancer.class_has_specific_jdo_fields=has the specific JDO fields: {0}.

# {0}=boolean
enhancer.class_has_specific_jdo_methods=has the specific JDO methods: {0}.

# {0}=boolean
enhancer.class_has_specific_jdo_members=has the specific JDO fields and methods: {0}.

# {0}=boolean
enhancer.class_has_oid_handling_jdo_methods=has the ObjectId-handling JDO methods: {0}.

# {0}=boolean
enhancer.class_has_callback_jdo_methods=has the instance-callback JDO methods: {0}.

# {0}=class name, {1}=method name
enhancer.class_defines_jdo_method=The persistence-capable class {0} defines a JDO method called {1}.

# {0}=class name, {1}=field name
enhancer.class_defines_jdo_field=The persistence-capable class {0} defines a JDO field called {1}.

# {0}=class name, {1}=member name
enhancer.class_has_jdo_like_member=The persistence-capable class {0} defines a member {1} whose name starts with the reserved jdo prefix.

# {0}=class name, {1}=method name,
# {2}=expected signature, {3}=found signature
# {4}=expected modifiers, {5}=found modifiers
enhancer.class_has_illegally_declared_jdo_member=The persistence-capable class {0} has an illegally declared JDO member: {1}; expected signature: ''{2}''; found signature: ''{3}''; expected access modifier flags: {4}; found access modifier flags: {5}.

# {0}=class name, {1}=found method names, {2}=missing method names
enhancer.class_has_inconsistently_declared_jdo_members=The persistence-capable class {0} has an incosistent set of declared JDO members; found: {1}; missing: {2}.

#
# Other Enhancer messages
#

# {0}=filenames
enhancer.using_jdo_files=using jdo files: {0}

# {0}=path
enhancer.using_archive_files=using jar/zip files: {0}

# {0}=path
enhancer.using_source_path=using source path: {0}

# {0}=resource file name
enhancer.using_file=using file: {0}

# {0}=resource path element
enhancer.using_path_element=using path element: {0}

# {0}=class name, {1}=file name, {2}=file name
enhancer.class_already_entered=The class {0} from {1} is already entered from {2}.

# {0}=dir name, {1}=dir name
enhancer.destination_directory_already_set=Attempt to set the destination directory to {0}, but it has already been set to {1}.

# {0}=dir name
enhancer.destination_directory_not_exist=The destination directory {0} does not exist.

# {0}=resource name
enhancer.found_resource=found resource: {0}
enhancer.not_found_resource=not found resource: {0}

# {0}=resource name
enhancer.cannot_read_resource=resource does not exist or cannot be read: {0}

# {0}=resource name {1}=exception message
enhancer.io_error_while_reading_resource=An I/O exception has occurred while reading resource: {0}, exception: {1}

# {0}=resource name
enhancer.io_error_while_reading_resource=An I/O exception has occurred: {0}

# {0}=resource name
enhancer.illegal_path_element=illegal element source path: {0}

#
# Enhancer exception messages
#

MSG_CauseThrowable=CauseThrowable:
MSG_CauseThrowableStackTrace=CauseThrowableStackTrace:
