<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
         xmlns:sch="http://www.ascc.net/xml/schematron"
         xmlns="http://relaxng.org/ns/structure/1.0"
         xmlns:x="http://www.w3.org/1999/xhtml"
         datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

  <!-- the data types used are translated directly into domain.rng and
       used for validation. These data types are also translated into
       the dtd, and into ServerTestList.xml

       Note that not all of these types become ENTITYs in the dtd -
       the transformation stylesheet (../src/xsl/rng2dtd.xsl) has a
       list of types that are simply translated in the DTD as CDATA.
  -->

  <define name="boolean">
    <choice>
      <value>yes</value>
      <value>no</value>
      <value>on</value>
      <value>off</value>
      <value>1</value>
      <value>0</value>
      <value>true</value>
      <value>false</value>
    </choice>
  </define>
  <define name="isolation">
    <choice>
      <value>read-uncommitted</value>
      <value>read-committed</value>
      <value>repeatable-read</value>
      <value>serializable</value>
    </choice>
  </define>
  <define name="object-type">
    <x:div class='dtd'>
      defines the type of the resource. It can be:
    </x:div>
    <choice>
      <value x:desc="These are system resources for all instances and DAS">system-all</value>
      <value x:desc="These are system resources only in DAS">system-admin</value>
      <value x:desc="These are system resources only in instances (and not DAS)">system-instance</value>
      <value x:desc="User resources (This is the default for all elements)">user</value>
    </choice>
  </define>
  <define name="file-type">
    <data type="string"/>
  </define>

  <!-- Following are used for primary keys -->

  <!-- Note that no type that can be a primary key can contain
  apostrophes - this is because of the way we handle XPath expressions
  internally. See Bug # 6184639 for further insights! -->

  <!-- A name type that is safe to use with unix directories -->
  <define name="unix-fs-safe-name-type">
    <data type="string">
      <param name="pattern">[\p{L}\p{N}_][\p{L}\p{N}\-_.;]*</param>
    </data>
  </define>

  <define name="name-type">
    <data type="string">
      <param name="pattern">[\p{L}\p{N}_][\p{L}\p{N}\-_./;#]*</param>
    </data>
  </define>

  <define name="web-service-name-type">
    <data type="string">
      <param name="pattern">[\p{L}\p{N}_][\p{L}\p{N}\-_./;]*#[\p{L}\p{N}_][\p{L}\p{N}\-_./;]*</param>
    </data>
  </define>

  <!-- we use a separate jndi-unique-type because this type is
  declared as a fundamental type in the dynamic validation system, so
  we key off of this RELAX NG type to configure the dynamic validation
  correctly -->

  <define name='jndi-unique-type'>
    <data type="string">
      <param name="pattern">[^':,][^':,]*</param>
    </data>
  </define>

  <define name="jmx-safe-key-type">
    <data type="string">
      <param name="pattern">[^':,][^':,]*</param>
    </data>
  </define>
  <!-- End of primary key section -->


  <define name="port-type">
    <data type="positiveInteger">
      <param name="maxInclusive">65535</param>
    </data>
  </define>

  <define name="classname-type">
    <data type="string"/>
  </define>

  <define name="IPAddress-type">
    <data type="string"/>
  </define>

</grammar>
