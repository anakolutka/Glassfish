<html>
<head>
	<title>RelaxNGCC Ant task</title>
	<link rel="stylesheet" href="ngcc.css">
	<meta HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=us-ascii">
</head>
<body>
<h1>RelaxNGCC Ant Task</h1>
<div align=right>
	$Revision: 1.1 $ by <a href="mailto:kk@kohsuke.org">Kohsuke Kawaguchi</a>
</div>



<p>
	<a href="http://jakarta.apache.org/ant">Ant</a> is a popular open-source build tool. RelaxNGCC comes with an Ant task implementation, which makes it easier to invoke RelaxNGCC from your Ant build script.
</p><p>
	This document describes how you can use it.
</p>

<h2>Simple example</h2>
<p>
</p>
<pre><xmp>
<project .... >
  ...
  
  <taskdef name="relaxngcc" classname="relaxngcc.ant.RelaxNGCCTask">
    <classpath path="lib/relaxngcc.jar"/>
  </taskdef>
  
  <target ... >
    ...
    <mkdir dir="src/parser/state"/>
    <relaxngcc source="mygrammar.rng" targetdir="src/parser/state">
      <!-- up-to-date check parameters -->
      <depends  dir="." includes="*.rng"/>
      <produces dir="src/relaxngcc/state" includes="*.java"/>
      <produces dir="src/relaxngcc/state" includes="*.class"/>
    </relaxngcc>
  </target>
</project>
</xmp></pre>
<p>
	It is usually a good idea to have a <code>&lt;mkdir></code> task before RelaxNGCC, since RelaxNGCC doesn't create a directory.
	
	The <code>source</code> attribute specifies the source RELAX NG grammar, and the <code>targetdir</code> attribute specifies the directory where the generated files will be placed.
</p><p>
	The nested <code>&lt;depends&gt;</code> and <code>&lt;produces&gt;</code> are used to perform up-to-date check. If all the files specified by <code>&lt;depends&gt;</code> is older than all the files specified by <code>&lt;produces&gt;</code>, then RelaxNGCC won't run. If not, all the files specified by <code>&lt;produces&gt;</code> will be <em>deleted</em> (to avoid leaving stale files behind) and RelaxNGCC generates a fresh set of files.
	
	One can specify multiple <code>&lt;depends&gt;</code> and <code>&lt;produces&gt;</code> if necessary. If either one of them is not present, then RelaxNGCC will always re-generate files.
</p>

<h2>Synoposis</h2>
<p>
	The RelaxNGCC task supports the following parameter attributes.
</p>
<table border=1>
<thead>
	<tr><td>
		Attribute
	</td><td>
		Description
	</td><td>
		Required
	</td></tr>
<tbody>
	<tr><td>
		source
	</td><td>
		Specifies the RELAX NG grammar file to be compiled.
	</td><td>
		Yes
	</td></tr>
	<tr><td>
		targetdir
	</td><td>
		Specifies a directory to place files produced by RelaxNGCC.
		This directory needs to exist before you run RelaxNGCC.
	</td><td>
		Yes
	</td></tr>
	<tr><td>
		automata
	</td><td>
		Specifies a directory to place gif files which contains automata produced by RelaxNGCC. You need to have <a href="http://www.research.att.com/sw/tools/graphviz/">GraphViz</a> in your path. This is a debug option.
	</td><td>
		No
	</td></tr>
</table>
<p>
	Following nested element parameters are supported as well. These two type of elements must be used in pair.
</p>
<h3>depends</h3>
<p>
	<a href="http://jakarta.apache.org/ant/manual/CoreTypes/fileset.html">File set</a> that specifies the source files used for up-to-date check. Optional. Technically, this information can be derived by RelaxNGCC itself from the source grammar, but it's not smart enough to do that for now.
</p>
<h3>produces</h3>
<p>
	<a href="http://jakarta.apache.org/ant/manual/CoreTypes/fileset.html">File set</a> that specifies files generated by RelaxNGCC. Optional. Technically this information can be derived by RelaxNGCC itself, but for now it's not that smart.
</p><p>
	When both are present, RelaxNGCC will check if any source file is updated. If so, <em>it deletes all the files specified by the <code>produces</code> elements</em> before it runs.
</p>



<hr>
<div align="right"><a href="index.htm">RelaxNGCC home</a></div>
</body>
</html>