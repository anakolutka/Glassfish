# Language pt-BR translations for Introduction_to_Web_Beans package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Introduction_to_Web_Beans VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-07-25T03:52:15\n"
"PO-Revision-Date: 2009-12-19 18:03-0300\n"
"Last-Translator: João Paulo Viragine <joao.viragine@redhat.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, fuzzy, no-c-format
msgid "Defining beans using XML"
msgstr "Definindo Web Beans utilizando XML"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"So far, we've seen plenty of examples of beans declared using annotations. "
"However, there are a couple of occasions when we can't use annotations to "
"define the bean:"
msgstr ""
"Até agora,vimos muitos exemplos de declaração de Web Beans usando anotações. "
"No entanto, há várias situações em que não podemos usar anotações para "
"definir um Web Bean:"

#. Tag: para
#, no-c-format
msgid "when the implementation class comes from some preexisting library, or"
msgstr ""
"quando a classe de implementação vem de alguma biblioteca preexistente, ou"

#. Tag: para
#, fuzzy, no-c-format
msgid "when there should be multiple beans with the same implementation class."
msgstr ""
"quando deveria haver vários Web Beans com a mesma classe de implementação."

#. Tag: para
#, no-c-format
msgid ""
"One way to address these problems is to write a producer method. Weld offers "
"another option: declare the bean using XML. This feature will hopefully one "
"day be part of the CDI specification. Until then, it remains a portable "
"extension."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Many frameworks use XML to provide metadata relating to Java classes. "
"However, Weld uses a very different approach to specifying the names of Java "
"classes, fields or methods to most other frameworks. Instead of writing "
"class and member names as the string values of XML elements and attributes, "
"Weld lets you use the class or member name as the name of the XML element."
msgstr ""
"Muitos frameworks usam XML para fornecer metadados relativos às classes "
"Java. No entanto, Web Beans utiliza uma abordagem muito diferente para "
"especificar os nomes de classes Java, atributos ou métodos dos outros "
"frameworks. Em vez de escrever os nomes das classes e dos membros ( como uma "
"String de valores em elementos e atributos XML), Web Beans permite que você "
"use o nome da classe ou membro como o nome do elemento XML."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The advantage of this approach is that you can write an XML schema that "
"prevents spelling errors in your XML document. It's even possible for a tool "
"to generate the XML schema automatically from the compiled Java code. Or, an "
"integrated development environment could perform the same validation without "
"the need for the explicit intermediate generation step."
msgstr ""
"A vantagem dessa abordagem é que você pode escrever um esquema XML (XML "
"schema) que evita erros ortográficos no seu documento XML. É até mesmo "
"possível para uma ferramenta gerar o esquema XML (XML schema) "
"automaticamente, a partir do código Java compilad.Ou, um ambiente integrado "
"de desenvolvimento poderia fazer a mesma validação sem a necessidade "
"explicíta do passo intermediário de geração."

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring beans"
msgstr "Declarando classes Web Beans"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For each Java package, Weld defines a corresponding XML namespace. The "
"namespace is formed by prepending <literal>urn:java:</literal> to the Java "
"package name. For the package <literal>com.mydomain.myapp</literal>, the XML "
"namespace is <literal>urn:java:com.mydomain.myapp</literal>."
msgstr ""
"Para cada pacote Java, Web Beans define um namespace XML correspondente. O "
"nome é formado precedendo <literal>urn:java:</literal> ao nome do pacote "
"Java. Para o pacote <literal>com.mydomain.myapp</literal>, o namespace XML é "
"<literal>urn:java:com.mydomain.myapp</literal>."

#. Tag: para
#, no-c-format
msgid ""
"Java types belonging to a package are referred to using an XML element in "
"the namespace corresponding to the package. The name of the element is the "
"name of the Java type. Fields and methods of the type are specified by child "
"elements in the same namespace. If the type is an annotation, members are "
"specified by attributes of the element."
msgstr ""
"Tipos Java pertencentes a um pacote são referenciados a utilizar um elemento "
"XML no namespace correspondente ao pacote. O nome do elemento é o nome do "
"tipo Java. Atributos e métodos do tipo são especificados por elementos "
"filhos do mesmo namespace. Se o tipo for uma anotação, os membros são "
"definidos por atributos do elemento."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For example, the element <literal>&lt;util:Date/&gt;</literal> in the "
"following XML fragment refers to the class <literal>java.util.Date</literal>:"
msgstr ""
"Por exemplo, o elemento <literal>&lt;util:Date/&gt;</literal> no seguinte "
"fragmento XML refere-se à classe <literal>java.util.Date</literal>:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"And this is all the code we need to declare that <literal>Date</literal> is "
"a bean! An instance of <literal>Date</literal> may now be injected by any "
"other bean:"
msgstr ""
"E esse é todo o código necessário para declarar que <literal>Date</literal> "
"é um simples Web Bean! Uma instância de <literal>Date</literal> pode agora "
"ser injetada por qualquer outro Web Bean:"

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring bean metadata"
msgstr "Declarando metadados Web Bean"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"We can declare the scope, deployment type and interceptor binding types "
"using direct child elements of the bean declaration:"
msgstr ""
"Podemos declarar o escopo, tipo de puplicação (deployment type) e tipo de "
"ligação de interceptador (interceptor binding types) com a utilização direta "
"de elementos filhos na declaração do Web Bean:"

#. Tag: para
#, fuzzy, no-c-format
msgid "We use exactly the same approach to specify names and qualifiers:"
msgstr ""
"Utilizamos exatamente a mesma abordagem para especificar nomes e tipos de "
"ligação:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Where <literal>@Login</literal> and <literal>@SystemStart</literal> are "
"qualifier annotations types."
msgstr ""
"Em que <literal>@Login</literal> e <literal>@SystemStart</literal> são "
"anotações do tipo ligação."

#. Tag: para
#, fuzzy, no-c-format
msgid "As usual, a bean may support multiple qualifier types:"
msgstr ""
"Como é habitual, um Web Bean pode suportar múltiplos tipos de ligação "
"(binding types):"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Interceptors and decorators are beans as well, so they may be declared just "
"like any other bean:"
msgstr ""
"Interceptadores e Decoradores são simplesmente Web Beans. Assim, podem ser "
"declarados como qualquer outro Web Bean:"

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring bean members"
msgstr "Declarando membros Web Bean"

#. Tag: para
#, no-c-format
msgid "TODO!"
msgstr "TODO!"

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring inline beans"
msgstr "Declarando inline Web Beans"

#. Tag: para
#, fuzzy, no-c-format
msgid "Weld lets us define a bean at an injection point. For example:"
msgstr ""
"Web Beans nos permite definir um Web Bean em um ponto de injeção. Por "
"exemplo:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>&lt;Name&gt;</literal> element declares a bean of scope "
"<literal>@Dependent</literal> and class <literal>Name</literal>, with a set "
"of initial field values. This bean has a special, container-generated "
"qualifier and is therefore injectable only to the specific injection point "
"at which it is declared."
msgstr ""
"O elemento <literal>&lt;Name&gt;</literal> declara um Web Bean simples de "
"escopo <literal>@Dependent</literal> e classe <literal>Name</literal>, com "
"um conjunto inicial de valores para os campos. Esse Web Bean possui a "
"especial, container-generated binding and is therefore injectable only to "
"the specific injection point at which it is declared."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"This simple but powerful feature allows the Weld XML format to be used to "
"specify whole graphs of Java objects. It's not quite a full databinding "
"solution, but it's close!"
msgstr ""
"Esse simples - mas poderoso - recurso permite que o formato XML do Web Beans "
"seja utilizado para especificar grafos completos de objetos Java. Não é uma "
"solução de ligação de dados (databinding) completa, mas está bem próxima!"

#. Tag: title
#, no-c-format
msgid "Using a schema"
msgstr "Utilizando um esquema"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"If we want our XML document format to be authored by people who aren't Java "
"developers, or who don't have access to our code, we need to provide a "
"schema. There's nothing specific to Weld about writing or using the schema."
msgstr ""
"Se desejamos que o formato do documento XML seja criado por pessoas que não "
"são desenvolvedores Java, ou por pessoas que não têm acesso ao nosso código, "
"precisamos fornecer um esquema (XML schema). Não há nada específico no Web "
"Beans sobre escrever ou utilizar o esquema."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Writing an XML schema is quite tedious. Therefore, the Weld project will "
"provide a tool which automatically generates the XML schema from compiled "
"Java code."
msgstr ""
"Escrever um esquema XML (XML schema) é um tanto tedioso. Tod via, o projeto "
"Web Beans RI  fornecerá uma ferramenta que automaticamente gera o esquema "
"XML (XML schema), a partir do código da classe Java compilada."

#~ msgid ""
#~ "<![CDATA[<beans xmlns=\"urn:java:javax.beans\"\n"
#~ "   xmlns:util=\"urn:java:java.util\">\n"
#~ "   <util:Date/>\n"
#~ "</beans>]]>"
#~ msgstr ""
#~ "<![CDATA[<beans xmlns=\"urn:java:javax.beans\"\n"
#~ "   xmlns:util=\"urn:java:java.util\">\n"
#~ "   <util:Date/>\n"
#~ "</beans>]]>"

#~ msgid "<![CDATA[private @Inject Date date;]]>"
#~ msgstr "<![CDATA[private @Inject Date date;]]>"

#~ msgid ""
#~ "<![CDATA[<myapp:ShoppingCart>\n"
#~ "   <SessionScoped/>\n"
#~ "   <myfwk:Transactional requiresNew=\"true\"/>\n"
#~ "   <myfwk:Secure/>\n"
#~ "</myapp:ShoppingCart>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:ShoppingCart>\n"
#~ "   <SessionScoped/>\n"
#~ "   <myfwk:Transactional requiresNew=\"true\"/>\n"
#~ "   <myfwk:Secure/>\n"
#~ "</myapp:ShoppingCart>]]>"

#~ msgid ""
#~ "<![CDATA[<util:Date>\n"
#~ "   <Named>currentTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "   <SessionScoped/>\n"
#~ "   <myapp:Login/>\n"
#~ "   <Named>loginTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "   <ApplicationScoped/>\n"
#~ "   <myapp:SystemStart/>\n"
#~ "   <Named>systemStartTime</Named>\n"
#~ "</util:Date>]]>"
#~ msgstr ""
#~ "<![CDATA[<util:Date>\n"
#~ "   <Named>currentTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "   <SessionScoped/>\n"
#~ "   <myapp:Login/>\n"
#~ "   <Named>loginTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "   <ApplicationScoped/>\n"
#~ "   <myapp:SystemStart/>\n"
#~ "   <Named>systemStartTime</Named>\n"
#~ "</util:Date>]]>"

#~ msgid ""
#~ "<![CDATA[private @Inject Date currentTime;\n"
#~ "private @Login Date loginTime;\n"
#~ "private @SystemStart Date systemStartTime;]]>"
#~ msgstr ""
#~ "<![CDATA[private @Inject Date currentTime;\n"
#~ "private @Login Date loginTime;\n"
#~ "private @SystemStart Date systemStartTime;]]>"

#~ msgid ""
#~ "<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
#~ "   <myapp:PayByCheque/>\n"
#~ "   <myapp:Asynchronous/>\n"
#~ "</myapp:AsynchronousChequePaymentProcessor>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
#~ "   <myapp:PayByCheque/>\n"
#~ "   <myapp:Asynchronous/>\n"
#~ "</myapp:AsynchronousChequePaymentProcessor>]]>"

#~ msgid ""
#~ "<![CDATA[<myfwk:TransactionInterceptor>\n"
#~ "   <Interceptor/>\n"
#~ "   <myfwk:Transactional/>\n"
#~ "</myfwk:TransactionInterceptor>]]>"
#~ msgstr ""
#~ "<![CDATA[<myfwk:TransactionInterceptor>\n"
#~ "   <Interceptor/>\n"
#~ "   <myfwk:Transactional/>\n"
#~ "</myfwk:TransactionInterceptor>]]>"

#~ msgid ""
#~ "<![CDATA[<myapp:System>\n"
#~ "   <ApplicationScoped/>\n"
#~ "   <myapp:admin>\n"
#~ "      <myapp:Name>\n"
#~ "         <myapp:firstname>Gavin</myapp:firstname>\n"
#~ "         <myapp:lastname>King</myapp:lastname>\n"
#~ "         <myapp:email>gavin@hibernate.org</myapp:email>\n"
#~ "      </myapp:Name>\n"
#~ "   </myapp:admin>\n"
#~ "</myapp:System>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:System>\n"
#~ "   <ApplicationScoped/>\n"
#~ "   <myapp:admin>\n"
#~ "      <myapp:Name>\n"
#~ "         <myapp:firstname>Gavin</myapp:firstname>\n"
#~ "         <myapp:lastname>King</myapp:lastname>\n"
#~ "         <myapp:email>gavin@hibernate.org</myapp:email>\n"
#~ "      </myapp:Name>\n"
#~ "   </myapp:admin>\n"
#~ "</myapp:System>]]>"

#~ msgid ""
#~ "<![CDATA[<beans xmlns=\"urn:java:javax.beans\"\n"
#~ "   xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
#~ "   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "   xsi:schemaLocation=\"urn:java:javax.beans http://java.sun.com/jee/"
#~ "beans-1.0.xsd\n"
#~ "   urn:java:com.mydomain.myapp http://mydomain.com/xsd/myapp-1.2.xsd\">\n"
#~ "\n"
#~ "   <myapp:System>\n"
#~ "      ...\n"
#~ "   </myapp:System>\n"
#~ "\n"
#~ "</beans>]]>"
#~ msgstr ""
#~ "<![CDATA[<beans xmlns=\"urn:java:javax.beans\"\n"
#~ "   xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
#~ "   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "   xsi:schemaLocation=\"urn:java:javax.beans http://java.sun.com/jee/"
#~ "beans-1.0.xsd\n"
#~ "   urn:java:com.mydomain.myapp http://mydomain.com/xsd/myapp-1.2.xsd\">\n"
#~ "\n"
#~ "   <myapp:System>\n"
#~ "      ...\n"
#~ "   </myapp:System>\n"
#~ "\n"
#~ "</beans>]]>"

#~ msgid "In either of these cases, Web Beans gives us two options:"
#~ msgstr "Em ambos os casos, We Beans nos dá duas opções:"

#~ msgid "write a producer method, or"
#~ msgstr "escrever um método produtor (producer method), ou"

#~ msgid "declare the Web Bean using XML."
#~ msgstr "declarar um Web Bean utilizando XML."
