<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the "License").  You may not use this file except
 in compliance with the License.

 You can obtain a copy of the license at
 glassfish/bootstrap/legal/CDDLv1.0.txt or
 https://glassfish.dev.java.net/public/CDDLv1.0.html.
 See the License for the specific language governing
 permissions and limitations under the License.

 When distributing Covered Code, include this CDDL
 HEADER in each file and include the License file at
 glassfish/bootstrap/legal/CDDLv1.0.txt.  If applicable,
 add the following below this CDDL HEADER, with the
 fields enclosed by brackets "[]" replaced with your
 own identifying information: Portions Copyright [yyyy]
 [name of copyright owner]
-->
<project name="glassfish reference implemation creation" default="create.ri" basedir=".">

    <property file="${basedir}/build.properties"/>
    <property name="stage" value="target/stage" />
    <property name="v3.stage" value="${stage}/v3" />
    <target name="ri.init">
        <mkdir dir="${v3.stage}"/>
    </target>

    <target name="create.ri" depends="ri.init">
        <echo message="v3 directory: ${v3.dir}"/>
        <copy file="${basedir}/README" todir="${stage}"/>
	<antcall target="module.copy" /> 
	<antcall target="hk2.project" />
	<antcall target="grizzly.project" />
	<antcall target="jsf.project" />
        <antcall target="gfcorba.project" />
        <antcall target="delete.files">
             <param name="dir" value="${stage}"/>
        </antcall>
	<zip destfile="${stage}/../glassfish-ri-src.zip"
             basedir="${stage}" 
             excludes="**/.svn/**,**/.hg*/**,glassfish" />
    </target>

	 
    <target name="module.copy" >
        <echo message="copy the following modules: ${module.list}"/>
        <copy todir="${v3.stage}" enablemultiplemappings="true" >  
            <fileset dir="${v3.dir}" casesensitive="yes" includes="${module.list}" excludes="**/.svn/**,**/target/**"/>
        </copy>
    </target>


    <target name="hk2.project" >
        <exec executable="svn" dir="${stage}" failonerror="true" >
	    <arg line="checkout" />
            <arg line="${hk2.svn.url}" />
            <arg line="hk2" />
	</exec>
    </target>


    <target name="grizzly.project" >
        <exec executable="svn" dir="${stage}" failonerror="true" >
	    <arg line="checkout" />
            <arg line="${grizzly.svn.url}" />
            <arg line="grizzly" />
	</exec>
    </target>


    <target name="jsf.project" >
        <exec executable="svn" dir="${stage}" failonerror="true" >
	    <arg line="checkout" />
            <arg line="${jsf.svn.url}" />
            <arg line="jsf" />
	</exec>
    </target>


    <target name="jsp.project" >
        <exec executable="svn" dir="${stage}" failonerror="true" >
	    <arg line="checkout" />
            <arg line="${jsp.svn.url}" />
            <arg line="jsp" />
	</exec>
    </target>


    <target name="uel.project" >
        <exec executable="svn" dir="${stage}" failonerror="true" >
	    <arg line="checkout" />
            <arg line="${uel.svn.url}" />
            <arg line="uel" />
	</exec>
    </target>


    <!-- requires hg (mercurial) installed and in the path -->
    <target name="gfcorba.project" >
        <exec executable="hg" dir="${stage}" failonerror="true" >
	    <arg line="clone" />
            <arg line="${gfcorba.hg.url}" />
            <arg line="glassfish-corba" />
	</exec>
    </target>


    <target name="delete.files" >
        <delete includeemptydirs="true">    
            <fileset dir="${dir}" includes="**/.svn/**,**/.hg*/**" defaultexcludes="false"/>
        </delete>
    </target>

    <!-- import the bundle build script from the web module -->
    <resolveArtifact artifactId="glassfish" classifier="build" type="xml" property="glassfish.build.xml"/>
    <import file="${glassfish.build.xml}" />
    <resolveArtifact artifactId="web" classifier="build" type="xml" property="web.build.xml"/>
    <import file="${web.build.xml}" />

    <target name="create.bundle" depends="web.prepare, ejb.moduleDef, web.moduleDef">
        <resolveAll todir="target/stage/glassfish/modules" tolerateBrokenPOMs="true" stripVersion="true">
            <fullGraph />
            <removeSpecificArtifacts>
                <scope level="compile,runtime"/>
                <artifact artifactId="webtier-all"/>
                <artifact artifactId="ejb-all" />
		<!--exclude admingui artifacts -->
                <artifact artifactId="jsftemplating" />
                <artifact artifactId="console-plugin-service" />
                <artifact artifactId="dataprovider"/>
                <artifact artifactId="console-common"/>
                <artifact artifactId="console-security-plugin"/>
                <artifact artifactId="console-jdbc-plugin"/>
                <artifact artifactId="console-updatecenter-plugin"/>
                <artifact artifactId="console-web-plugin"/>
                <artifact artifactId="console-community-branding-plugin"/>
                <artifact artifactId="dist-fragment" groupId="org.glassfish.admingui" />
		<!-- exclude registration artifacts -->
                <artifact artifactId="registration-impl"/>
                <artifact artifactId="glassfish-registration"/>
                <artifact artifactId="registration-api"/>
            </removeSpecificArtifacts>
        </resolveAll>

	<delete dir="target/stage/glassfish/modules" includes="*.zip" />
	<delete dir="target/stage/glassfish/modules" includes="*.pom" />

        <graphDef id="generate-picture" tolerateBrokenPOMs="true">
            <visualize file="modules.png">
                <scope level="compile,runtime" />
                <subGraph color="red">
                    <graphRef refid="web-modules"/>
                </subGraph>
                <subGraph color="blue">
                    <graphRef refid="ejb-modules"/>
                </subGraph>
            </visualize>
        </graphDef>

        <build-zip zipfile="target/glassfish-ri.zip" base="${nucleus-base.zip}" />

        <!-- this build script will be reused elsewhere -->
        <attachArtifact file="build.xml" classifier="build" />
    </target>

</project>

