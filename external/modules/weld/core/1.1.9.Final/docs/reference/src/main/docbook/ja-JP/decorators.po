# Language ja-JP translations for master.xml package.
# Automatically generated, 2008.
# 
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-04-30 23:45+0900\n"
"Last-Translator: Fusayuki Minamoto <miki.htmnet@nifty.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: \n"

#. Tag: title
#, no-c-format
msgid "Decorators"
msgstr "デコレータ"

#. Tag: para
#, no-c-format
msgid ""
"Interceptors are a powerful way to capture and separate concerns which are "
"<emphasis>orthogonal</emphasis> to the application (and type system). Any "
"interceptor is able to intercept invocations of any Java type. This makes "
"them perfect for solving technical concerns such as transaction management, "
"security and call logging. However, by nature, interceptors are unaware of "
"the actual semantics of the events they intercept. Thus, interceptors aren't"
" an appropriate tool for separating business-related concerns."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The reverse is true of <emphasis>decorators</emphasis>. A decorator "
"intercepts invocations only for a certain Java interface, and is therefore "
"aware of all the semantics attached to that interface. Since decorators "
"directly implement operations with business semantics, it makes them the "
"perfect tool for modeling some kinds of business concerns. It also means "
"that a decorator doesn't have the generality of an interceptor. Decorators "
"aren't able to solve technical concerns that cut across many disparate "
"types. Interceptors and decorators, though similar in many ways, are "
"complementary. Let's look at some cases where decorators fit the bill."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Suppose we have an interface that represents accounts:"
msgstr "次のような口座 (account) を表現するインタフェースがあると仮定しましょう。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public interface Account {\n"
"   public BigDecimal getBalance();\n"
"   public User getOwner();\n"
"   public void withdraw(BigDecimal amount);\n"
"   public void deposit(BigDecimal amount);\n"
"}"
msgstr ""
"<![CDATA[public interface Account {\n"
"    public BigDecimal getBalance();\n"
"    public User getOwner();\n"
"    public void withdraw(BigDecimal amount);\n"
"    public void deposit(BigDecimal amount);\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Several different beans in our system implement the "
"<literal>Account</literal> interface. However, we have a common legal "
"requirement that; for any kind of account, large transactions must be "
"recorded by the system in a special log. This is a perfect job for a "
"decorator."
msgstr ""
"私たちのシステムではいくつかの異なるWeb Beansが <literal>Account</literal> "
"を実装します。しかし、どのような口座であろうと大口の取引は特別なログに記録されなければならないという共通の法的要件があります。これはデコレータに最適な仕事です。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A decorator is a bean (possibly even an abstract class) that implements the "
"type it decorates and is annotated <literal>@Decorator</literal>."
msgstr ""
"デコレータは <literal>@Decorator</literal> というアノテーションによって修飾された型を実装するシンプル Web "
"Beanです。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Decorator\n"
"public abstract class LargeTransactionDecorator\n"
"      implements Account {\n"
"   ...\n"
"}"
msgstr ""
"<![CDATA[<Decorators>\n"
"    <myapp:LargeTransactionDecorator/>\n"
"</Decorators>]]>"

#. Tag: para
#, no-c-format
msgid ""
"The decorator implements the methods of the decorated type that it wants to "
"intercept."
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Decorator\n"
"public abstract class LargeTransactionDecorator\n"
"      implements Account {\n"
"   @Inject @Delegate @Any Account account;\n"
"\n"
"   @PersistenceContext EntityManager em;\n"
"    \n"
"   public void withdraw(BigDecimal amount) {\n"
"      ...\n"
"   }\n"
"    \n"
"   public void deposit(BigDecimal amount);\n"
"      ...\n"
"   }\n"
"}"
msgstr ""
"<![CDATA[@Decorator\n"
"public abstract class LargeTransactionDecorator \n"
"        implements Account {\n"
"    \n"
"    @Decorates Account account;\n"
"    \n"
"    @PersistenceContext EntityManager em;\n"
"    \n"
"    public void withdraw(BigDecimal amount) {\n"
"        account.withdraw(amount);\n"
"        if ( amount.compareTo(LARGE_AMOUNT)>0 ) {\n"
"            em.persist( new LoggedWithdrawl(amount) );\n"
"        }\n"
"    }\n"
"    \n"
"    public void deposit(BigDecimal amount);\n"
"        account.deposit(amount);\n"
"        if ( amount.compareTo(LARGE_AMOUNT)>0 ) {\n"
"            em.persist( new LoggedDeposit(amount) );\n"
"        }\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"Unlike other beans, a decorator may be an abstract class. Therefore, if "
"there's nothing special the decorator needs to do for a particular method of"
" the decorated interface, you don't need to implement that method."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Interceptors for a method are called before decorators that apply to the "
"method."
msgstr "あるメソッドに対するインタセプタはデコレータがそのメソッドに適用される前に呼び出されます。"

#. Tag: title
#, fuzzy, no-c-format
msgid "Delegate object"
msgstr "移譲属性"

#. Tag: para
#, no-c-format
msgid ""
"Decorators have a special injection point, called the <emphasis>delegate "
"injection point</emphasis>, with the same type as the beans they decorate, "
"and the annotation <literal>@Delegate</literal>. There must be exactly one "
"delegate injection point, which can be a constructor parameter, initializer "
"method parameter or injected field."
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Decorator\n"
"public abstract class LargeTransactionDecorator\n"
"      implements Account {\n"
"   @Inject @Delegate @Any Account account;\n"
"   ...\n"
"}"
msgstr ""
"<![CDATA[<Decorators>\n"
"    <myapp:LargeTransactionDecorator/>\n"
"</Decorators>]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "A decorator is bound to any bean which:"
msgstr "デコレータは以下の任意のWeb Beanに結びつきます。"

#. Tag: para
#, fuzzy, no-c-format
msgid "has the type of the delegate injection point as a bean type, and"
msgstr "APIタイプとして移譲属性のタイプを持つものと、"

#. Tag: para
#, fuzzy, no-c-format
msgid "has all qualifiers that are declared at the delegate injection point."
msgstr "移譲属性によって宣言されるすべてのバインディングタイプを持つもの"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"This delegate injection point specifies that the decorator is bound to all "
"beans that implement <literal>Account</literal>:"
msgstr ""
"この移譲属性は、デコレータが <literal>Account</literal> を実装するすべてのWeb "
"Beansに対して結びついていることを指定します。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Delegate @Any Account account;"
msgstr "<![CDATA[@Decorates Account account;]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A delegate injection point may specify any number of qualifier annotations. "
"The decorator will only be bound to beans with the same qualifiers."
msgstr ""
"移譲属性はバインディングアノテーションを指定するかもしれません。そのときは、デコレータは同じバインディングを持つWeb Beansに結びつくだけです。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Delegate @Foreign Account account;"
msgstr "<![CDATA[@Decorates @Foreign Account account;]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The decorator may invoke the delegate object, which has much the same effect"
" as calling <literal>InvocationContext.proceed()</literal> from an "
"interceptor. The main difference is that the decorator can invoke "
"<emphasis>any</emphasis> business method on the delegate object."
msgstr ""
"デコレータは移譲属性を呼び出す可能性があります。その移譲属性はインタセプタから "
"<literal>InvocationContext.proceed()</literal> を呼び出すのと同じ効果があります。"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Decorator\n"
"public abstract class LargeTransactionDecorator\n"
"      implements Account {\n"
"   @Inject @Delegate @Any Account account;\n"
"\n"
"   @PersistenceContext EntityManager em;\n"
"    \n"
"   public void withdraw(BigDecimal amount) {\n"
"      account.withdraw(amount);\n"
"      if ( amount.compareTo(LARGE_AMOUNT)&gt;0 ) {\n"
"         em.persist( new LoggedWithdrawl(amount) );\n"
"      }\n"
"   }\n"
"    \n"
"   public void deposit(BigDecimal amount);\n"
"      account.deposit(amount);\n"
"      if ( amount.compareTo(LARGE_AMOUNT)&gt;0 ) {\n"
"         em.persist( new LoggedDeposit(amount) );\n"
"      }\n"
"   }\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Enabling decorators"
msgstr "デコレータの有効化"

#. Tag: para
#, no-c-format
msgid ""
"By default, all decorators are disabled. We need to "
"<emphasis>enable</emphasis> our decorator in the "
"<literal>beans.xml</literal> descriptor of a bean archive. This activation "
"only applies to the beans in that archive."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&lt;beans\n"
"   xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"   xsi:schemaLocation=\"\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd\"&gt;\n"
"   &lt;decorators&gt;\n"
"         &lt;class&gt;org.mycompany.myapp.LargeTransactionDecorator&lt;/class&gt;\n"
"   &lt;/decorators&gt;\n"
"&lt;/beans&gt;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This declaration serves the same purpose for decorators that the "
"<literal>&lt;interceptors&gt;</literal> declaration serves for interceptors:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"it enables us to specify a total ordering for all decorators in our system, "
"ensuring deterministic behavior, and"
msgstr "私たちのシステムにおけるすべてのデコレータの全体の順番を指定できるようにします。"

#. Tag: para
#, no-c-format
msgid "it lets us enable or disable decorator classes at deployment time."
msgstr "デプロイ時にデコレータクラスを有効にしたり無効にしたりできるようにします。"
