# Language pt-BR translations for Introduction_to_Web_Beans package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: Introduction_to_Web_Beans VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-07-25T03:52:15\n"
"PO-Revision-Date: 2009-12-19 18:07-0300\n"
"Last-Translator: João Paulo Viragine <joao.viragine@redhat.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Producer methods"
msgstr "Métodos produtores"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Producer methods let us overcome certain limitations that arise when a "
"container, instead of the application, is responsible for instantiating "
"objects. They're also the easiest way to integrate objects which are not "
"beans into the CDI environment."
msgstr ""
"Métodos produtores permitem superarmos certas limitações que surgem quando o "
"gerenciador do Web Bean, em vez da aplicação, é responsável por instanciar "
"objetos. Eles são também a forma mais fácil de integrar os objetos que não "
"são Web Beans ao ambiente Web Beans. (Veremos uma segunda abordagem em <xref "
"linkend=\"xml\"/>.)"

#. Tag: para
#, no-c-format
msgid "According to the spec:"
msgstr "De acordo com a especificação:"

#. Tag: para
#, fuzzy, no-c-format
msgid "A producer method acts as a source of objects to be injected, where:"
msgstr ""
"Um método produtor Web Beans funciona como uma fonte de objetos a ser "
"injetado, quando:"

#. Tag: para
#, fuzzy, no-c-format
msgid "the objects to be injected are not required to be instances of beans,"
msgstr ""
"os objetos a serem injetados não forem obrigados a ser instâncias de Web "
"Beans,"

#. Tag: para
#, no-c-format
msgid "the concrete type of the objects to be injected may vary at runtime or"
msgstr ""
"o tipo concreto dos objetos a serem injetados pode variar em tempo de "
"execução ou"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"the objects require some custom initialization that is not performed by the "
"bean constructor"
msgstr ""
"os objetos requerem alguma inicialização personalizada que não é realizada "
"pelo construtor do Web Bean"

#. Tag: para
#, no-c-format
msgid "For example, producer methods let us:"
msgstr "Por exemplo, métodos produtores permitem:"

#. Tag: para
#, fuzzy, no-c-format
msgid "expose a JPA entity as a bean,"
msgstr "expor uma entidade JPA como um Web Bean,"

#. Tag: para
#, fuzzy, no-c-format
msgid "expose any JDK class as a bean,"
msgstr "expor qualquer classe do JDK como um Web Bean,"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"define multiple beans, with different scopes or initialization, for the same "
"implementation class, or"
msgstr ""
"definir vários Web Beans, com diferentes escopos ou inicialização, para a "
"mesma implementação da classe, ou"

#. Tag: para
#, fuzzy, no-c-format
msgid "vary the implementation of a bean type at runtime."
msgstr "variar a implementação de um tipo da API em tempo de execução."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"In particular, producer methods let us use runtime polymorphism with CDI. As "
"we've seen, alternative beans are one solution to the problem of deployment-"
"time polymorphism. But once the system is deployed, the CDI implementation "
"is fixed. A producer method has no such limitation:"
msgstr ""
"Em particular, métodos produtores permite-nos utilizar o polimorfismo em "
"tempo de execução com Web Beans. Como vimos, os tipo de implantação são uma "
"poderosa solução para o problema do polimorfismo em tempo de implantação. "
"Mas, uma vez que o sistema está implantado, a implementação do Web Bean é "
"fixada. Um método produtor não tem essa limitação:"

#. Tag: para
#, no-c-format
msgid "Consider an injection point:"
msgstr "Considere o ponto de injeção:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"This injection point has the same type and qualifier annotations as the "
"producer method, so it resolves to the producer method using the usual CDI "
"injection rules. The producer method will be called by the container to "
"obtain an instance to service this injection point."
msgstr ""
"Esse ponto de injeção tem o mesmo tipo e anotações de binding que o método "
"produtor. Assim, resolve para o método produtor utilizando as regras de "
"injeção da Web Beans. O método produtor será invocado pelo gerenciador do "
"Bean Web para obter uma instância para servir esse ponto de injeção."

#. Tag: title
#, no-c-format
msgid "Scope of a producer method"
msgstr "Escopo de um método produtor"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The scope of the producer method defaults to <literal>@Dependent</literal>, "
"and so it will be called <emphasis>every time</emphasis> the container "
"injects this field or any other field that resolves to the same producer "
"method. Thus, there could be multiple instances of the "
"<literal>PaymentStrategy</literal> object for each user session."
msgstr ""
"O escopo padrão dos métodos produtores é <literal>@Dependent</literal>, e, "
"por isso ,serão chamados <emphasis>toda vez</emphasis> que o gerenciador do "
"Web Bean injetar esse atributo ou qualquer outro atributo que resolve para o "
"mesmo método produtor. Assim, pode haver várias instâncias do objeto "
"<literal>PaymentStrategy</literal> para cada sessão do usuário."

#. Tag: para
#, no-c-format
msgid ""
"To change this behavior, we can add a <literal>@SessionScoped</literal> "
"annotation to the method."
msgstr ""
"Para mudar esse comportamento, nós podemos adicionar a anotação "
"<literal>@SessionScoped</literal> ao método."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Now, when the producer method is called, the returned "
"<literal>PaymentStrategy</literal> will be bound to the session context. The "
"producer method won't be called again in the same session."
msgstr ""
"Agora, quando o método produtor é chamado, o <literal>PaymentStrategy</"
"literal> retornado será associado ao contexto sessão. O método produtor não "
"será invocado novamente na mesma sessão."

#. Tag: para
#, no-c-format
msgid ""
"A producer method does <emphasis>not</emphasis> inherit the scope of the "
"bean that declares the method. There are two different beans here: the "
"producer method, and the bean which declares it. The scope of the producer "
"method determines how often the method will be called, and the lifecycle of "
"the objects returned by the method. The scope of the bean that declares the "
"producer method determines the lifecycle of the object upon which the "
"producer method is invoked."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Injection into producer methods"
msgstr "Injeção em métodos produtores"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"There's one potential problem with the code above. The implementations of "
"<literal>CreditCardPaymentStrategy</literal> are instantiated using the Java "
"<literal>new</literal> operator. Objects instantiated directly by the "
"application can't take advantage of dependency injection and don't have "
"interceptors."
msgstr ""
"Existe um problema potencial com o código acima. As implementações de "
"<literal>CreditCardPaymentStrategy</literal> são instanciadas utilizando o "
"operador de Java <literal>new</literal>. Objetos instanciados diretamente "
"pela aplicação não usufruem da injeção de dependência e não possuem "
"interceptadores."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"If this isn't what we want, we can use dependency injection into the "
"producer method to obtain bean instances:"
msgstr ""
"Se  não é isso  o que queremos, podemos utilizar a injeção de dependência no "
"método produtor para obter instâncias do Web Bean:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Wait, what if <literal>CreditCardPaymentStrategy</literal> is a request-"
"scoped bean? Then the producer method has the effect of \"promoting\" the "
"current request scoped instance into session scope. This is almost certainly "
"a bug! The request scoped object will be destroyed by the container before "
"the session ends, but the reference to the object will be left \"hanging\" "
"in the session scope. This error will <emphasis>not</emphasis> be detected "
"by the container, so please take extra care when returning bean instances "
"from producer methods!"
msgstr ""
"Espere, o que se <literal>CreditCardPaymentStrategy</literal> é um Web Bean "
"de escopo de requisição? Então o método produtor tem o efeito de \"promover"
"\" a instância atual no escopo de requisição para o escopo de sessão. Isso "
"certamente é um erro! O objeto no escopo de requisição será destruído pelo "
"gerenciador do Web Bean antes de terminar a sessão, mas a referência ao "
"objeto será deixada \"presa\" no escopo sessão. Esse erro <emphasis>não</"
"emphasis> será detectado pelo gerenciador do Web Bean. Por isso, tome "
"cuidado quando retornar instâncias de Web Bean em métodos produtores!"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"There's at least three ways we could go about fixing this bug. We could "
"change the scope of the <literal>CreditCardPaymentStrategy</literal> "
"implementation, but this would affect other clients of that bean. A better "
"option would be to change the scope of the producer method to "
"<literal>@Dependent</literal> or <literal>@RequestScoped</literal>."
msgstr ""
"Existem pelo menos três maneiras de corrigirmos esse erro. Podemos alterar o "
"escopo da implementação do <literal>CreditCardPaymentStrategy</literal>, mas "
"isso poderia afetar outros clientes desse Web Bean. A mehor opção seria "
"alterar o escopo do médoto produtor para <literal>@Dependent</literal> ou "
"<literal>@RequestScoped</literal>."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"But a more common solution is to use the special <literal>@New</literal> "
"qualifier annotation."
msgstr ""
"Mas, uma solução mais comum é utilizar a anotação especial de binding "
"<literal>@New</literal>"

#. Tag: title
#, no-c-format
msgid "Use of <literal>@New</literal> with producer methods"
msgstr "Uso do <literal>@New</literal> em métodos produtores"

#. Tag: para
#, no-c-format
msgid "Consider the following producer method:"
msgstr "Considere o seguinte método produtor:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Then a new <emphasis>dependent</emphasis> instance of "
"<literal>CreditCardPaymentStrategy</literal> will be created, passed to the "
"producer method, returned by the producer method and finally bound to the "
"session context. The dependent object won't be destroyed until the "
"<literal>Preferences</literal> object is destroyed, at the end of the "
"session."
msgstr ""
"Assim a nova instância <emphasis>dependente</emphasis> de "
"<literal>CreditCardPaymentStrategy</literal> será criada, passada para o "
"método produtor, retornada pelo método produtor e, finalmente, associada ao "
"contexto de sessão. O objeto dependente não será destruído até que o objeto "
"<literal>Preferences</literal> seja destruído, no término da sessão."

#. Tag: title
#, fuzzy, no-c-format
msgid "Disposer methods"
msgstr "Métodos produtores"

#. Tag: para
#, no-c-format
msgid ""
"Some producer methods return objects that require explicit destruction. For "
"example, somebody needs to close this JDBC connection:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Destruction can be performed by a matching <emphasis>disposer method</"
"emphasis>, defined by the same class as the producer method:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The disposer method must have at least one parameter, annotated "
"<literal>@Disposes</literal>, with the same type and qualifiers as the "
"producer method. The disposer method is called automatically when the "
"context ends (in this case, at the end of the request), and this parameter "
"receives the object produced by the producer method. If the disposer method "
"has additional method parameters, the container will look for a bean that "
"satisfies the type and qualifiers of each parameter and pass it to the "
"method automatically."
msgstr ""

#~ msgid ""
#~ "<![CDATA[@SessionScoped\n"
#~ "public class Preferences implements Serializable {\n"
#~ "   private PaymentStrategyType paymentStrategy;\n"
#~ "   ...\n"
#~ "   @Produces @Preferred \n"
#~ "   public PaymentStrategy getPaymentStrategy() {\n"
#~ "       switch (paymentStrategy) {\n"
#~ "           case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
#~ "           case CHECK: return new CheckPaymentStrategy();\n"
#~ "           case PAYPAL: return new PayPalPaymentStrategy();\n"
#~ "           default: return null;\n"
#~ "       } \n"
#~ "   }\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[@SessionScoped\n"
#~ "public class Preferences implements Serializable {\n"
#~ "   private PaymentStrategyType paymentStrategy;\n"
#~ "   ...\n"
#~ "   @Produces @Preferred \n"
#~ "   public PaymentStrategy getPaymentStrategy() {\n"
#~ "       switch (paymentStrategy) {\n"
#~ "           case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
#~ "           case CHECK: return new CheckPaymentStrategy();\n"
#~ "           case PAYPAL: return new PayPalPaymentStrategy();\n"
#~ "           default: return null;\n"
#~ "       } \n"
#~ "   }\n"
#~ "}]]>"

#~ msgid "<![CDATA[@Inject @Preferred PaymentStrategy paymentStrategy;]]>"
#~ msgstr "<![CDATA[@Inject @Preferred PaymentStrategy paymentStrategy;]]>"

#~ msgid ""
#~ "<![CDATA[@Produces @Preferred @SessionScoped\n"
#~ "public PaymentStrategy getPaymentStrategy() {\n"
#~ "   ...\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[@Produces @Preferred @SessionScoped\n"
#~ "public PaymentStrategy getPaymentStrategy() {\n"
#~ "   ...\n"
#~ "}]]>"

#~ msgid ""
#~ "<![CDATA[@Produces @Preferred @SessionScoped\n"
#~ "public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy "
#~ "ccps,\n"
#~ "                                          CheckPaymentStrategy cps,\n"
#~ "                                          PayPalPaymentStrategy ppps) {\n"
#~ "   switch (paymentStrategy) {\n"
#~ "      case CREDIT_CARD: return ccps;\n"
#~ "      case CHEQUE: return cps;\n"
#~ "      case PAYPAL: return ppps;\n"
#~ "      default: return null;\n"
#~ "   } \n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[@Produces @Preferred @SessionScoped\n"
#~ "public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy "
#~ "ccps,\n"
#~ "                                          CheckPaymentStrategy cps,\n"
#~ "                                          PayPalPaymentStrategy ppps) {\n"
#~ "   switch (paymentStrategy) {\n"
#~ "      case CREDIT_CARD: return ccps;\n"
#~ "      case CHEQUE: return cps;\n"
#~ "      case PAYPAL: return ppps;\n"
#~ "      default: return null;\n"
#~ "   } \n"
#~ "}]]>"

#~ msgid ""
#~ "<![CDATA[@Produces @Preferred @SessionScoped\n"
#~ "public PaymentStrategy getPaymentStrategy(@New CreditCardPaymentStrategy "
#~ "ccps,\n"
#~ "                                          @New CheckPaymentStrategy cps,\n"
#~ "                                          @New PayPalPaymentStrategy "
#~ "ppps) {\n"
#~ "   switch (paymentStrategy) {\n"
#~ "      case CREDIT_CARD: return ccps;\n"
#~ "      case CHEQUE: return cps;\n"
#~ "      case PAYPAL: return ppps;\n"
#~ "      default: return null;\n"
#~ "   } \n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[@Produces @Preferred @SessionScoped\n"
#~ "public PaymentStrategy getPaymentStrategy(@New CreditCardPaymentStrategy "
#~ "ccps,\n"
#~ "                                          @New CheckPaymentStrategy cps,\n"
#~ "                                          @New PayPalPaymentStrategy "
#~ "ppps) {\n"
#~ "   switch (paymentStrategy) {\n"
#~ "      case CREDIT_CARD: return ccps;\n"
#~ "      case CHEQUE: return cps;\n"
#~ "      case PAYPAL: return ppps;\n"
#~ "      default: return null;\n"
#~ "   } \n"
#~ "}]]>"

#~ msgid ""
#~ "<![CDATA[@Produces @RequestScoped Connection connect(User user) {\n"
#~ "   return createConnection(user.getId(), user.getPassword());\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[@Produces @RequestScoped Connection connect(User user) {\n"
#~ "   return createConnection(user.getId(), user.getPassword());\n"
#~ "}]]>"

#~ msgid ""
#~ "<![CDATA[void close(@Disposes Connection connection) {\n"
#~ "   connection.close();\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[void close(@Disposes Connection connection) {\n"
#~ "   connection.close();\n"
#~ "}]]>"

#~ msgid "<chapter>.</chapter>"
#~ msgstr "<chapter>.</chapter>"
