# translation of xml.po to Korean
# Language ko-KR translations for Introduction_to_Web_Beans package.
#
# Automatically generated, 2009.
# Eunju Kim <eukim@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-07-25T03:52:15\n"
"PO-Revision-Date: 2009-01-23 11:16+1000\n"
"Last-Translator: Eunju Kim <eukim@redhat.com>\n"
"Language-Team: Korean <ko@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"
"Plural-Forms:  nplurals=2; plural=(n!=1);\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"

#. Tag: title
#, fuzzy, no-c-format
msgid "Defining beans using XML"
msgstr "XML을 사용하여 Web Beans 정의 "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"So far, we've seen plenty of examples of beans declared using annotations. "
"However, there are a couple of occasions when we can't use annotations to "
"define the bean:"
msgstr ""
"지금까지 어노테이션을 사용하여 명시된 여러 가지 Web Beans의 예를 살펴보았습니"
"다. 하지만 Web Bean을 정의하기 위해 어노테이션을 사용할 수 없는 경우가 종종 "
"있습니다: "

#. Tag: para
#, no-c-format
msgid "when the implementation class comes from some preexisting library, or"
msgstr "구현 클래스가 일부 기존 라이브러에서 비롯되었을 경우, "

#. Tag: para
#, fuzzy, no-c-format
msgid "when there should be multiple beans with the same implementation class."
msgstr "동일한 구현 클래스를 갖는 다수의 Web Beans이 있을 경우 "

#. Tag: para
#, no-c-format
msgid ""
"One way to address these problems is to write a producer method. Weld offers "
"another option: declare the bean using XML. This feature will hopefully one "
"day be part of the CDI specification. Until then, it remains a portable "
"extension."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Many frameworks use XML to provide metadata relating to Java classes. "
"However, Weld uses a very different approach to specifying the names of Java "
"classes, fields or methods to most other frameworks. Instead of writing "
"class and member names as the string values of XML elements and attributes, "
"Weld lets you use the class or member name as the name of the XML element."
msgstr ""
"다수의 프레임워크는 XML을 사용하여 Java 클래스 관련 메타테이터를 제공합니다. "
"하지만, Web Beans는 다양한 접근 방법을 사용하여 Java 클래스 이름, 영역, 방식"
"을 대부분의 다른 프레임워크에 지정합니다. XML 요소 및 속성의 문자열 값으로 클"
"래스 및 멤버 이름을 작성하는 대신, Web Beans는 XML 요소 이름으로 클래스 또는 "
"멤버 이름을 사용하게 합니다. "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The advantage of this approach is that you can write an XML schema that "
"prevents spelling errors in your XML document. It's even possible for a tool "
"to generate the XML schema automatically from the compiled Java code. Or, an "
"integrated development environment could perform the same validation without "
"the need for the explicit intermediate generation step."
msgstr ""
"이러한 접근 방법의 장점은 XML 문서에서 스펠링 오류가 나타나지 않게 하는 XML "
"스키마를 작성할 수 있다는 것입니다. 컴파일된 Java 코드에서 XML 스키마를 자동"
"으로 생성하기 위한 도구를 만들 수 도 있습니다. 또는 통합된 개발 환경은 중간 "
"생성 단계를 거치지 않고 동일한 검증을 실행할 수 있습니다.  "

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring beans"
msgstr "Web Bean 클래스 명시 "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For each Java package, Weld defines a corresponding XML namespace. The "
"namespace is formed by prepending <literal>urn:java:</literal> to the Java "
"package name. For the package <literal>com.mydomain.myapp</literal>, the XML "
"namespace is <literal>urn:java:com.mydomain.myapp</literal>."
msgstr ""
"각각의 Java 패키지의 경우, Web Beans는 해당 XML namespace를 지정합니다. "
"namespace는 Java 패키지 이름에 <literal>urn:java:</literal>를 덧붙이기하여 형"
"성됩니다. <literal>com.mydomain.myapp</literal> 패키지의 경우, XML namespace"
"는 <literal>urn:java:com.mydomain.myapp</literal>입니다. "

#. Tag: para
#, no-c-format
msgid ""
"Java types belonging to a package are referred to using an XML element in "
"the namespace corresponding to the package. The name of the element is the "
"name of the Java type. Fields and methods of the type are specified by child "
"elements in the same namespace. If the type is an annotation, members are "
"specified by attributes of the element."
msgstr ""
"패키지에 속한 Java 유형은 패키지에 해당하는 namespace에 있는 XML 요소를 사용"
"하여 참조합니다. 요소 이름은 Java 유형의 이름이 됩니다. 유형 영역 및 방식은 "
"동일한 namespace에 있는 자식 요소에 의해 지정됩니다. 유형이 어노테이션되어 있"
"을 경우, 멤버는 요소의 속성에 의해 지정됩니다.  "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For example, the element <literal>&lt;util:Date/&gt;</literal> in the "
"following XML fragment refers to the class <literal>java.util.Date</literal>:"
msgstr ""
"예를 들어, 다음의 XML 부분에 있는 <literal>&lt;util:Date/&gt;</literal> 요소"
"는 <literal>java.util.Date</literal> 클래스를 참조합니다:  "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"And this is all the code we need to declare that <literal>Date</literal> is "
"a bean! An instance of <literal>Date</literal> may now be injected by any "
"other bean:"
msgstr ""
"<literal>Date</literal>는 심플 Web Bean임을 명시해야 할 모든 코드입니다! "
"<literal>Date</literal>의 인스턴스는 기타 다른 Web Bean에 의해 삽입될 수 있습"
"니다:   "

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring bean metadata"
msgstr "Web Bean 메타데이터 명시 "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"We can declare the scope, deployment type and interceptor binding types "
"using direct child elements of the bean declaration:"
msgstr ""
"Web Bean 명시의 직접적인 자식 요소를 사용하여 범위, 배치 유형, 인터셉터 바인"
"딩 유형을 명시할 수 있습니다:     "

#. Tag: para
#, fuzzy, no-c-format
msgid "We use exactly the same approach to specify names and qualifiers:"
msgstr "이름 및 바인딩 유형을 지정하기 위해 동일한 방법을 사용합니다:  "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Where <literal>@Login</literal> and <literal>@SystemStart</literal> are "
"qualifier annotations types."
msgstr ""
"여기서 <literal>@Login</literal> 및 <literal>@SystemStart</literal>는 바인딩 "
"어노테이션 유형입니다.  "

#. Tag: para
#, fuzzy, no-c-format
msgid "As usual, a bean may support multiple qualifier types:"
msgstr "일반적으로 Web Bean은 여러 바인딩 유형을 지원할 수 있습니다:  "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Interceptors and decorators are beans as well, so they may be declared just "
"like any other bean:"
msgstr ""
"인터셉터 및 데코레이터는 심플 Web Beans이므로, 기타 다른 심플 Web Bean같이 나"
"타낼 수 있습니다:    "

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring bean members"
msgstr "Web Bean 멤버 명시 "

#. Tag: para
#, no-c-format
msgid "TODO!"
msgstr "처리해야 할 사항! "

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring inline beans"
msgstr "인라인 Web Beans 명시 "

#. Tag: para
#, fuzzy, no-c-format
msgid "Weld lets us define a bean at an injection point. For example:"
msgstr "Web Beans는 삽입 지점에서 Web Bean을 지정할 수 있게 합니다. 예: "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>&lt;Name&gt;</literal> element declares a bean of scope "
"<literal>@Dependent</literal> and class <literal>Name</literal>, with a set "
"of initial field values. This bean has a special, container-generated "
"qualifier and is therefore injectable only to the specific injection point "
"at which it is declared."
msgstr ""
"<literal>&lt;Name&gt;</literal> 요소는 초기화 영역값 설정과 함께 "
"<literal>@Dependent</literal> 범위의 심플 Web Bean 및 <literal>Name</"
"literal> 클래스를 명시합니다. Web Bean은 특정한 컨테이너 생성 바인딩이 있으므"
"로 명시된 특정 삽입 지점에만 삽입할 수 있습니다.     "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"This simple but powerful feature allows the Weld XML format to be used to "
"specify whole graphs of Java objects. It's not quite a full databinding "
"solution, but it's close!"
msgstr ""
"이러한 간단하지만 강력한 기능은 Web Beans XML 포맷이 Java 객체의 전체 그래프"
"를 지정하는데 사용하게 합니다. 이는 완전한 데이터바인딩 솔루션이 아니지만, 근"
"접한 솔루션입니다! "

#. Tag: title
#, no-c-format
msgid "Using a schema"
msgstr "스키마 사용 "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"If we want our XML document format to be authored by people who aren't Java "
"developers, or who don't have access to our code, we need to provide a "
"schema. There's nothing specific to Weld about writing or using the schema."
msgstr ""
"Java 개발자 이외나 또는 코드로 액세스할 수 없는 사람들에 의해 작성된 XML 문"
"서 형식을 원하실 경우, 스키마를 제공해야 합니다. 스키마를 사용 또는 작성에 관"
"해 Web Beans에 특정한 사항이 없습니다.  "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Writing an XML schema is quite tedious. Therefore, the Weld project will "
"provide a tool which automatically generates the XML schema from compiled "
"Java code."
msgstr ""
"XML 스키마 작성은 다소 장황합니다. 따라서 Web Beans RI 프로젝트는 컴파일된 자"
"바 코드에서 XML 스키마를 자동으로 생성하는 도구를 제공하게 됩니다. "

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<beans xmlns=\"urn:java:javax.beans\"\n"
#~ "   xmlns:util=\"urn:java:java.util\">\n"
#~ "   <util:Date/>\n"
#~ "</beans>]]>"
#~ msgstr ""
#~ "<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
#~ "          xmlns:util=\"urn:java:java.util\">\n"
#~ "\n"
#~ "    <util:Date/>\n"
#~ "\n"
#~ "</WebBeans>]]>"

#, fuzzy
#~ msgid "<![CDATA[private @Inject Date date;]]>"
#~ msgstr "<![CDATA[@Current Date date]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myapp:ShoppingCart>\n"
#~ "   <SessionScoped/>\n"
#~ "   <myfwk:Transactional requiresNew=\"true\"/>\n"
#~ "   <myfwk:Secure/>\n"
#~ "</myapp:ShoppingCart>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:ShoppingCart>\n"
#~ "    <SessionScoped/>\n"
#~ "    <myfwk:Transactional requiresNew=\"true\"/>\n"
#~ "    <myfwk:Secure/>\n"
#~ "</myapp:ShoppingCart>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<util:Date>\n"
#~ "   <Named>currentTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "   <SessionScoped/>\n"
#~ "   <myapp:Login/>\n"
#~ "   <Named>loginTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "   <ApplicationScoped/>\n"
#~ "   <myapp:SystemStart/>\n"
#~ "   <Named>systemStartTime</Named>\n"
#~ "</util:Date>]]>"
#~ msgstr ""
#~ "<![CDATA[<util:Date>\n"
#~ "    <Named>currentTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "    <SessionScoped/>\n"
#~ "    <myapp:Login/>\n"
#~ "    <Named>loginTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "    <ApplicationScoped/>\n"
#~ "    <myapp:SystemStart/>\n"
#~ "    <Named>systemStartTime</Named>\n"
#~ "</util:Date>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[private @Inject Date currentTime;\n"
#~ "private @Login Date loginTime;\n"
#~ "private @SystemStart Date systemStartTime;]]>"
#~ msgstr ""
#~ "<![CDATA[@Current Date currentTime;\n"
#~ "@Login Date loginTime;\n"
#~ "@SystemStart Date systemStartTime;]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
#~ "   <myapp:PayByCheque/>\n"
#~ "   <myapp:Asynchronous/>\n"
#~ "</myapp:AsynchronousChequePaymentProcessor>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
#~ "    <myapp:PayByCheque/>\n"
#~ "    <myapp:Asynchronous/>\n"
#~ "</myapp:AsynchronousChequePaymentProcessor>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myfwk:TransactionInterceptor>\n"
#~ "   <Interceptor/>\n"
#~ "   <myfwk:Transactional/>\n"
#~ "</myfwk:TransactionInterceptor>]]>"
#~ msgstr ""
#~ "<![CDATA[<myfwk:TransactionInterceptor>\n"
#~ "    <Interceptor/>\n"
#~ "    <myfwk:Transactional/>\n"
#~ "</myfwk:TransactionInterceptor>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myapp:System>\n"
#~ "   <ApplicationScoped/>\n"
#~ "   <myapp:admin>\n"
#~ "      <myapp:Name>\n"
#~ "         <myapp:firstname>Gavin</myapp:firstname>\n"
#~ "         <myapp:lastname>King</myapp:lastname>\n"
#~ "         <myapp:email>gavin@hibernate.org</myapp:email>\n"
#~ "      </myapp:Name>\n"
#~ "   </myapp:admin>\n"
#~ "</myapp:System>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:System>\n"
#~ "    <ApplicationScoped/>\n"
#~ "    <myapp:admin>\n"
#~ "        <myapp:Name>\n"
#~ "            <myapp:firstname>Gavin</myapp:firstname>\n"
#~ "            <myapp:lastname>King</myapp:lastname>\n"
#~ "            <myapp:email>gavin@hibernate.org</myapp:email>\n"
#~ "        </myapp:Name>\n"
#~ "    </myapp:admin>\n"
#~ "</myapp:System>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<beans xmlns=\"urn:java:javax.beans\"\n"
#~ "   xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
#~ "   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "   xsi:schemaLocation=\"urn:java:javax.beans http://java.sun.com/jee/"
#~ "beans-1.0.xsd\n"
#~ "   urn:java:com.mydomain.myapp http://mydomain.com/xsd/myapp-1.2.xsd\">\n"
#~ "\n"
#~ "   <myapp:System>\n"
#~ "      ...\n"
#~ "   </myapp:System>\n"
#~ "\n"
#~ "</beans>]]>"
#~ msgstr ""
#~ "<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
#~ "          xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
#~ "          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "          xsi:schemaLocation=\"urn:java:javax.webbeans http://java.sun."
#~ "com/jee/web-beans-1.0.xsd\n"
#~ "                              urn:java:com.mydomain.myapp http://mydomain."
#~ "com/xsd/myapp-1.2.xsd\">\n"
#~ "\n"
#~ "    <myapp:System>\n"
#~ "        ...\n"
#~ "    </myapp:System>\n"
#~ "\n"
#~ "</WebBeans>]]>"

#~ msgid "In either of these cases, Web Beans gives us two options:"
#~ msgstr "이러한 경우, Web Beans는 두 가지 옵션을 제공합니다: "

#~ msgid "write a producer method, or"
#~ msgstr "생산자 방식 작성 또는 "

#~ msgid "declare the Web Bean using XML."
#~ msgstr "XML을 사용하여 Web Bean 명시 "
