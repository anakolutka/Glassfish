<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
         xmlns:sch="http://www.ascc.net/xml/schematron"
         xmlns="http://relaxng.org/ns/structure/1.0"
         xmlns:x="http://www.w3.org/1999/xhtml"
         xmlns:ias="http://www.sun.com/ias/validation"
         datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

  <define name="jdbc-connection-pool">
    <element name="jdbc-connection-pool">
      <x:div class='dtd'>
        jdbc-connection-pool defines configuration used to create and
        manage a pool physical database connections. Pool definition
        is named, and can be referred to by multiple jdbc-resource
        elements (See &lt;jdbc-resource&gt;).
        <x:p>
          Each named pool definition results in a pool instantiated at
          server start-up. Pool is populated when accessed for the
          first time. If two or more jdbc-resource elements point to
          the same jdbc-connection-pool element, they are using the
          same pool of connections, at run time.
        </x:p>
      </x:div>
      <ref name="jdbc-connection-pool-attlist"/>
      <optional>
        <ref name="description"/>
      </optional>
      <zeroOrMore>
        <ref name="property">
          <x:div class='dtd'>
            Most JDBC 2.0 drivers permit use of standard property
            lists, to specify User, Password and other resource
            configuration. While these are optional properties,
            according to the specification, several of these
            properties may be necessary for most databases. See
            Section 5.3 of JDBC 2.0 Standard Extension API.
            <x:p>
              The following are the names and corresponding values for
              these properties
            </x:p>
            <x:dl>
              <x:dt>databaseName</x:dt>
              <x:dd>Name of the Database</x:dd>
              <x:dt>serverName</x:dt>
              <x:dd>Database Server name.</x:dd>
              <x:dt>port</x:dt>
              <x:dd>Port where a Database server is listening for
              requests.</x:dd>
              <x:dt>networkProtocol</x:dt>
              <x:dd>Communication Protocol used.</x:dd>
              <x:dt>user</x:dt>
              <x:dd>default name of the database user with which
              connections will be stablished. Programmatic database
              authentication or default-resource-principal specified
              in vendor specific web and ejb deployment descriptors
              will take precedence, over this default. The details and
              caveats are described in detail in the Administrator's
              guide.</x:dd>
              <x:dt>password</x:dt>
              <x:dd>password for default database user</x:dd>
              <x:dt>roleName</x:dt>
              <x:dd>The initial SQL role name.</x:dd>
              <x:dt>datasourceName</x:dt>
              <x:dd>used to name an underlying XADataSource, or
              ConnectionPoolDataSource when pooling of connections is
              done</x:dd>
              <x:dt>description</x:dt>
              <x:dd>Textual Description</x:dd>
            </x:dl>
            <x:p>
              When one or more of these properties are specified, they
              are passed as is using set&lt;Name&gt;(&lt;Value&gt;)
              methods to the vendors Datasource class (specified in
              datasource-classname). User and Password properties are
              used as default principal, if Container Managed
              authentication is specified and a
              default-resource-principal is not found in application
              deployment descriptors.
            </x:p>
          </x:div>
        </ref>
      </zeroOrMore>
    </element>
  </define>
  <define name="jdbc-connection-pool-attlist" combine="interleave">
    <attribute name="name" ias:type="key" ias:belongs-to="jdbc-connection-pools">
      <x:div class='dtd'>
        unique name of the pool definition.
      </x:div>
      <ref name="name-type"/>
    </attribute>
    <attribute name="datasource-classname">
      <x:div class='dtd'>
        Name of the vendor supplied JDBC datasource resource
        manager. An XA or global transactions capable datasource class
        will implement javax.sql.XADatasource interface. Non XA or
        Local transactions only datasources will implement
        javax.sql.Datasource interface.
      </x:div>
      <ref name="classname-type"/>
    </attribute>
    <optional>
      <attribute name="res-type">
        <x:div class='dtd'>
          DataSource implementation class could implement one of of
          javax.sql.DataSource, javax.sql.XADataSource or
          javax.sql.ConnectionPoolDataSource interfaces. This optional
          attribute must be specified to disambiguate when a
          Datasource class implements two or more of these
          interfaces. An error is produced when this attribute has a
          legal value and the indicated interface is not implemented
          by the datasource class. This attribute has no default
          value.
        </x:div>
	<choice>
	  <value>javax.sql.DataSource</value>
	  <value>javax.sql.XADataSource</value>
	  <value>javax.sql.ConnectionPoolDataSource</value>
	</choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="steady-pool-size" a:defaultValue="8"  ias:le-than="@max-pool-size">
        <x:div class='dtd'>
          minimum and initial number of connections maintained in the
          pool.
        </x:div>
	<data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="max-pool-size" a:defaultValue="32" ias:ge-than="@steady-pool-size">
        <x:div class='dtd'>
          maximum number of conections that can be created
        </x:div>
	<data type="positiveInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="max-wait-time-in-millis"
                 a:defaultValue="60000">
        <x:div class='dtd'>
          amount of time the caller will wait before getting a
          connection timeout. The default is 60 seconds.  A value of 0
          will force caller to wait indefinitely.
        </x:div>
	<data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="pool-resize-quantity" a:defaultValue="2" ias:le-than="@max-pool-size">
        <x:div class='dtd'>
          number of connections to be removed when
          idle-timeout-in-seconds timer expires. Connections that have
          idled for longer than the timeout are candidates for
          removal. When the pool size reaches steady-pool-size, the
          connection removal stops.
        </x:div>
	<data type="positiveInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="idle-timeout-in-seconds" a:defaultValue="300">
        <x:div class='dtd'>
          maximum time in seconds, that a connection can remain idle
          in the pool. After this time, the pool implementation can
          close this connection.  Note that this does not control
          connection timeouts enforced at the database server
          side. Adminsitrators are advised to keep this timeout
          shorter than the database server side timeout (if such
          timeouts are configured on the specific vendor's database),
          to prevent accumulation of unusable connection in
          Application Server.
        </x:div>
	<data type="positiveInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="transaction-isolation-level">
        <x:div class='dtd'>
          Specifies the Transaction Isolation Level on the pooled
          database connections. Optional. Has no default. If left
          unspecified the pool operates with default isolation level
          provided by the JDBC Driver. A desired isolation level can
          be set using one of the standard transaction isolation
          levels, which see.
          <x:p>
            Applications that change the Isolation level on a pooled
            connection programmatically, risk polluting the pool and
            this could lead to program errors.  Also see:
            is-isolation-level-guaranteed
          </x:p>
        </x:div>
        <ref name="isolation"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="is-isolation-level-guaranteed" a:defaultValue="true">
        <x:div class='dtd'>
          Applicable only when a particular isolation level is
          specified for transaction-isolation-level. The default value
          is true.  This assures that every time a connection is
          obtained from the pool, it is guaranteed to have the
          isolation set to the desired value. This could have some
          performance impact on some JDBC drivers. Can be set to false
          by that administrator when they are certain that the
          application does not change the isolation level before
          returning the connection.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="is-connection-validation-required" a:defaultValue="false">
        <x:div class='dtd'>
          if true, connections are validated (checked to find out if
          they are usable) before giving out to the application. The
          default is false.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="connection-validation-method" a:defaultValue="auto-commit">
        <x:div class='dtd'>
          specifies the type of validation to be performed when
          is-connection-validation-required is true. The following
          types of validation are supported:
        </x:div>
        <choice>
          <value x:desc="using connection.autoCommit()">auto-commit</value>
          <value x:desc="using connection.getMetaData()">meta-data</value>
          <value x:desc="performing a query on a user specified table (see validation-table-name).">table</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="validation-table-name">
        <x:div class='dtd'>
          specifies the table name to be used to perform a query to
          validate a connection. This parameter is mandatory, if
          connection-validation-type set to table. Verification by
          accessing a user specified table may become necessary for
          connection validation, particularly if database driver
          caches calls to setAutoCommit() and getMetaData().
        </x:div>
      </attribute>
    </optional>
    <optional>
      <attribute name="fail-all-connections" a:defaultValue="false">
        <x:div class='dtd'>
          indicates if all connections in the pool must be closed
          should a single validation check fail. The default is
          false. One attempt will be made to re-establish failed
          connections.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="non-transactional-connections" a:defaultValue="false">
        <x:div class='dtd'>
            A pool with this property set to true returns non-transactional  
            connections. This connection does not get automatically enlisted 
            with the transaction manager.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="allow-non-component-callers" a:defaultValue="false">
        <x:div class='dtd'>
            A pool with this property set to true, can be used by non-J2EE 
            components (i.e components other than EJBs or Servlets). 
            The  returned connection is enlisted automatically with the 
            transaction context obtained from the transaction manager. 
            This property is to enable the pool to be used by non-component 
            callers such as ServletFilters, Lifecycle modules, and 3rd party 
            persistence managers. 
            Standard J2EE components can continue to use such pools. 
            Connections obtained by non-component callers are not automatically
            cleaned at the end of a transaction by the container. 
            They need to be explicitly closed by the  the caller.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="validate-atmost-once-period-in-seconds" a:defaultValue="0">
        <x:div class='dtd'>
            Used to set the time-interval within which a connection is validated atmost once.
            Default is 0 which implies that it is not enabled. TBD: Documentation is to be
            corrected.
        </x:div>
        <data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="connection-leak-timeout-in-seconds" a:defaultValue="0">
        <x:div class='dtd'>
            To aid user in detecting potential connection leaks by the application.
            When a connection is not returned back to the pool by the application
            within the specified period, it is assumed to be a potential leak and
            stack trace of the caller will be logged. Default is 0, which implies 
            there is no leak detection, by default. 
            A positive non-zero value turns on leak detection. Note however that,
            this attribute only detects if there is a connection leak. The connection
            can be reclaimed only if connection-leak-reclaim is set to true.
        </x:div>
        <data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="connection-leak-reclaim" a:defaultValue="false">
        <x:div class='dtd'>
            If enabled, connection will be reusable (put back into pool) after 
            connection-leak-timeout-in-seconds occurs. Default value is false.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="connection-creation-retry-attempts" a:defaultValue="0">
        <x:div class='dtd'>
            The number of attempts to create a new connection. Default is 0, which
            implies no retries.
        </x:div>
        <data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="connection-creation-retry-interval-in-seconds" a:defaultValue="10">
        <x:div class='dtd'>
            The time interval between retries while attempting to create a connection.
            Default is 10 seconds.  Effective when  connection-creation-retry-attempts
            is greater than 0.
        </x:div>
        <data type="positiveInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="statement-timeout-in-seconds" a:defaultValue="-1">
        <x:div class='dtd'>
            Sets the timeout property of a connection to enable termination of abnormally
            long running queries. Default value of -1 implies that it is not enabled.
        </x:div>
        <data type="integer">
            <param name="minInclusive">-1</param>
        </data>
      </attribute>
    </optional>
    <optional>
      <attribute name="lazy-connection-enlistment" a:defaultValue="false">
        <x:div class='dtd'>
            Enlist a resource to the transaction only when it is actually used in
            a method, which avoids enlistment of connections that are not used
            in a transaction. This also prevents unnecessary enlistment of connections
            cached in the calling components. Default value is false.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="lazy-connection-association" a:defaultValue="false">
        <x:div class='dtd'>
            Connections are lazily associated when an operation  is performed on
            them. Also, they are disassociated when the transaction is completed
            and a component method ends, which helps reuse of the physical
            connections. Default value is false.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="associate-with-thread" a:defaultValue="false">
        <x:div class='dtd'>
            Associate a connection with the thread such that when the
            same thread is in need of a connection, it can reuse the connection
            already associated with that thread, thereby not incurring the overhead
            of getting a connection from the pool. Default value is false.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="match-connections" a:defaultValue="false">
        <x:div class='dtd'>
            To switch on/off connection matching for the pool. It can be set to false if the
            administrator knows that the connections in the pool
            will always be homogeneous and hence a connection picked from the pool
            need not be matched by the resource adapter. Default value is false.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="max-connection-usage-count" a:defaultValue="0">
        <x:div class='dtd'>
            When specified, connections will be re-used by the pool for the specified number
            of times after which it will be closed. This is useful for instance, to avoid statement-leaks.
            Default value is 0, which implies the feature is not enabled.
        </x:div>
        <data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="wrap-jdbc-objects" a:defaultValue="false">
        <x:div class='dtd'>
            When set to true, application will get wrapped jdbc objects for Statement,
            PreparedStatement, CallableStatement, ResultSet, DatabaseMetaData. Defaults to false.
        </x:div>
        <ref name="boolean"/>
      </attribute>
    </optional>
  </define>  
</grammar>
