# Language zh-CN translations for master.xml package.
# Automatically generated, 2008.
# 
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-02-11 13:00+0800\n"
"Last-Translator: Sean Wu <alartin@gmail.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Java EE integration"
msgstr "Java EE整合"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"CDI is fully integrated into the Java EE environment. Beans have access to "
"Java EE resources and JPA persistence contexts. They may be used in Unified "
"EL expressions in JSF and JSP pages. They may even be injected into other "
"platform components, such as servlets and message-driven Beans, which are "
"not beans themselves."
msgstr ""
"Web Beans被完全地整合进了Java EE环境里。Web Beans 能够访问Java "
"EE资源和JPA持久化上下文。它们可以在JSF和JSP页面中的统一表达式语言使用。它们甚至可以被注入到一些对象中，例如Servlet和消息驱动Bean，而这些对象都不是Web"
" Bean。"

#. Tag: title
#, no-c-format
msgid "Built-in beans"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In the Java EE environment, the container provides the following built-in "
"beans, all with the qualifier <literal>@Default</literal>:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the current JTA <literal>UserTransaction</literal>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"a <literal>Principal</literal> representing the current caller identity,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"the default <ulink url=\"http://jcp.org/en/jsr/detail?id=303\">Bean "
"Validation</ulink> <literal>ValidationFactory</literal>, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"a <literal>Validator</literal> for the default "
"<literal>ValidationFactory</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The CDI specification does not require the servlet context objects, "
"<literal>HttpServletRequest</literal>, <literal>HttpSession</literal> and "
"<literal>ServletContext</literal> to be exposed as injectable beans. If you "
"really want to be able to inject these objects, it's easy to create a "
"portable extension to expose them as beans. However, we recommend that "
"direct access to these objects be limited to servlets, servlet filters and "
"servlet event listeners, where they may be obtained in the usual way as "
"defined by the Java Servlets spec. The <literal>FacesContext</literal> is "
"also not injectable. You can get at it by calling "
"<literal>FacesContext.getCurrentInstance()</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Oh, you <emphasis>really</emphasis> want to inject the "
"<literal>FacesContext</literal>? Alright then, try this producer method:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class FacesContextProducer {\n"
"   @Produces @RequestScoped FacesContext getFacesContext() {\n"
"      return FacesContext.getCurrentInstance();\n"
"   }\n"
"}"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Injecting Java EE resources into a bean"
msgstr "将Java EE资源注入到一个Web Bean中"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"All managed beans may take advantage of Java EE component environment "
"injection using <literal>@Resource</literal>, <literal>@EJB</literal>, "
"<literal>@PersistenceContext</literal>, <literal>@PeristenceUnit</literal> "
"and <literal>@WebServiceRef</literal>. We've already seen a couple of "
"examples of this, though we didn't pay much attention at the time:"
msgstr ""
"所有简单的和企业的Web Beans都可以通过<literal>@Resource</literal>, "
"<literal>@EJB</literal>和<literal>@PersistenceContext</literal>来使用Java "
"EE的依赖注入。我们已经看过很多例子了，虽然我们没有在这上面耗费精力："

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"   @Resource UserTransaction transaction;\n"
"\n"
"   @AroundInvoke public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@SessionScoped\n"
"public class Login implements Serializable {\n"
"   @Inject Credentials credentials;\n"
"   @PersistenceContext EntityManager userDatabase;\n"
"    ...\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The Java EE <literal>@PostConstruct</literal> and "
"<literal>@PreDestroy</literal> callbacks are also supported for all managed "
"beans. The <literal>@PostConstruct</literal> method is called after "
"<emphasis>all</emphasis> injection has been performed."
msgstr ""
"所有的简单的和企业的Web Beans都支持Java "
"EE的<literal>@PostConstruct</literal>和<literal>@PreDestroy</literal>回调。<literal>@PostConstruct</literal>方法在<emphasis>所有的</emphasis>"
" 注入完成后被调用。"

#. Tag: para
#, no-c-format
msgid ""
"Of course, we advise that component environment injection be used to define "
"CDI resources, and that typesafe injection be used in application code."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Calling a bean from a servlet"
msgstr "从Servlet调用一个Web Bean"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"It's easy to use a bean from a servlet in Java EE 6. Simply inject the bean "
"using field or initializer method injection."
msgstr ""
"在Java EE 6中，从一个Servlet中调用一个Web Bean非常容易，只须使用Web Beans域注入一个Web "
"Bean或者将初始方法注入即可。"

#. Tag: programlisting
#, no-c-format
msgid ""
"public class Login extends HttpServlet {\n"
"   @Inject Credentials credentials;\n"
"   @Inject Login login;\n"
"\n"
"   @Override\n"
"   public void service(HttpServletRequest request, HttpServletResponse response)\n"
"      throws ServletException, IOException {\n"
"      credentials.setUsername(request.getParameter(\"username\")):\n"
"      credentials.setPassword(request.getParameter(\"password\")):\n"
"      login.login();\n"
"      if ( login.isLoggedIn() ) {\n"
"         response.sendRedirect(\"/home.jsp\");\n"
"      }\n"
"      else {\n"
"         response.sendRedirect(\"/loginError.jsp\");\n"
"      }\n"
"   }\n"
"            \n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Since instances of servlets are shared across all incoming threads, the bean"
" client proxy takes care of routing method invocations from the servlet to "
"the correct instances of <literal>Credentials</literal> and "
"<literal>Login</literal> for the current request and HTTP session."
msgstr ""
"Web Beans客户端代理将Servlet中的方法调用路由到当前请求和HTTP会话中相应的<literal>Credentials</literal>"
" 和 <literal>Login</literal> 实例。"

#. Tag: title
#, fuzzy, no-c-format
msgid "Calling a bean from a message-driven bean"
msgstr "从消息驱动Bean中调用一个Web Bean"

#. Tag: para
#, no-c-format
msgid ""
"CDI injection applies to all EJBs, even when they aren't managed beans. In "
"particular, you can use CDI injection in message-driven beans, which are by "
"nature not contextual objects."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "You can even use CDI interceptor bindings for message-driven Beans."
msgstr "你甚至可以将Web Beans拦截器绑定到消息驱动Bean上。"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @MessageDriven\n"
"public class ProcessOrder implements MessageListener {\n"
"   @Inject Inventory inventory;\n"
"   @PersistenceContext EntityManager em;\n"
"\n"
"   public void onMessage(Message message) {\n"
"      ...\n"
"   }\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Please note that there is no session or conversation context available when "
"a message is delivered to a message-driven bean. Only "
"<literal>@RequestScoped</literal> and <literal>@ApplicationScoped</literal> "
"beans are available."
msgstr ""
"这样，在一个Web "
"Beans环境中接受消息就相当简单了。但是需要注意的是，当一个消息发送到一个消息驱动Bean的时候，此时没有会话，我们无法获得对话上下文。我们只能获得 "
"<literal>@RequestScoped</literal> 和 <literal>@ApplicationScoped</literal> "
"注释的Web Beans。"

#. Tag: para
#, no-c-format
msgid "But how about beans which <emphasis>send</emphasis> JMS messages?"
msgstr ""

#. Tag: title
#, no-c-format
msgid "JMS endpoints"
msgstr "JMS端点"

#. Tag: para
#, no-c-format
msgid ""
"Sending messages using JMS can be quite complex, because of the number of "
"different objects you need to deal with. For queues we have "
"<literal>Queue</literal>, <literal>QueueConnectionFactory</literal>, "
"<literal>QueueConnection</literal>, <literal>QueueSession</literal> and "
"<literal>QueueSender</literal>. For topics we have <literal>Topic</literal>,"
" <literal>TopicConnectionFactory</literal>, "
"<literal>TopicConnection</literal>, <literal>TopicSession</literal> and "
"<literal>TopicPublisher</literal>. Each of these objects has its own "
"lifecycle and threading model that we need to worry about."
msgstr ""
"使用JMS发送消息有点复杂，因为你需要处理很多不同的对象。对于队列（Queue），我们有<literal>Queue</literal>, "
"<literal>QueueConnectionFactory</literal>, "
"<literal>QueueConnection</literal>, <literal>QueueSession</literal> 和 "
"<literal>QueueSender</literal>。对于主题（Topic）有<literal>Topic</literal>, "
"<literal>TopicConnectionFactory</literal>, "
"<literal>TopicConnection</literal>, <literal>TopicSession</literal> 和 "
"<literal>TopicPublisher</literal>。这些对象每个都有自己的生命周期和线程模型，我们都需要考虑这些问题。"

#. Tag: para
#, no-c-format
msgid ""
"You can use producer fields and methods to prepare all of these resources "
"for injection into a bean:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class OrderResources {\n"
"   @Resource(name=\"jms/ConnectionFactory\")\n"
"   private ConnectionFactory connectionFactory;\n"
"  \n"
"   @Resource(name=\"jms/OrderQueue\")\n"
"   private Queue orderQueue;\n"
"  \n"
"   @Produces @OrderConnection\n"
"   public Connection createOrderConnection() throws JMSException {\n"
"    return connectionFactory.createConnection();\n"
"   }\n"
"  \n"
"   public void closeOrderConnection(@Disposes @OrderConnection Connection connection)\n"
"         throws JMSException {\n"
"      connection.close();\n"
"   }\n"
"  \n"
"   @Produces @OrderSession\n"
"   public Session createOrderSession(@OrderConnection Connection connection)\n"
"         throws JMSException {\n"
"      return connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n"
"   }\n"
"  \n"
"   public void closeOrderSession(@Disposes @OrderSession Session session)\n"
"         throws JMSException {\n"
"      session.close();\n"
"   }\n"
"  \n"
"   @Produces @OrderMessageProducer\n"
"   public MessageProducer createOrderMessageProducer(@OrderSession Session session)\n"
"         throws JMSException {\n"
"      return session.createProducer(orderQueue);\n"
"   }\n"
"  \n"
"   public void closeOrderMessageProducer(@Disposes @OrderMessageProducer MessageProducer producer)\n"
"         throws JMSException {\n"
"      producer.close();\n"
"   }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In this example, we can just inject the prepared "
"<literal>MessageProducer</literal>, <literal>Connection</literal> or "
"<literal>QueueSession</literal>:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Inject Order order;\n"
"@Inject @OrderMessageProducer MessageProducer producer;\n"
"@Inject @OrderSession QueueSession orderSession;\n"
"\n"
"public void sendMessage() {\n"
"   MapMessage msg = orderSession.createMapMessage();\n"
"   msg.setLong(\"orderId\", order.getId());\n"
"   ...\n"
"   producer.send(msg);\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The lifecycle of the injected JMS objects is completely controlled by the "
"container."
msgstr "被注入的JMS对象的生命周期完全由Web Bean管理器控制。"

#. Tag: title
#, no-c-format
msgid "Packaging and deployment"
msgstr "打包和部署"

#. Tag: para
#, no-c-format
msgid ""
"CDI doesn't define any special deployment archive. You can package beans in "
"jars, ejb jars or wars&mdash;any deployment location in the application "
"classpath. However, the archive must be a \"bean archive\". That means each "
"archive that contains beans <emphasis>must</emphasis> include a file named "
"<literal>beans.xml</literal> in the <literal>META-INF</literal> directory of"
" the classpath or <literal>WEB-INF</literal> directory of the web root (for "
"war archives). The file may be empty. Beans deployed in archives that do not"
" have a <literal>beans.xml</literal> file will not be available for use in "
"the application."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"In an embeddable EJB container, beans may be deployed in any location in "
"which EJBs may be deployed. Again, each location must contain a "
"<literal>beans.xml</literal> file."
msgstr ""
"对于Java SE，Web Beans可以被部署在由嵌入式EJB轻量容器支持的EJB中的任何位置。同样，该位置必须包含 <literal>web-"
"beans.xml</literal> 配置文件。"
