# Language fr-FR translations for master.xml package.
# Automatically generated, 2008.
# 
# Julien Herr <julien@herr.fr>, 2011. #zanata
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-02-05 00:00+0100\n"
"Last-Translator: Vincent Latombe <vincent.latombe@gmail.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: \n"

#. Tag: title
#, fuzzy, no-c-format
msgid "Dependency injection and programmatic lookup"
msgstr "Injection de dépendance"

#. Tag: para
#, no-c-format
msgid ""
"One of the most significant features of CDI&mdash;certainly the most "
"recognized&mdash;is dependency injection; excuse me, "
"<emphasis>typesafe</emphasis> dependency injection."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Injection points"
msgstr "Points d'injection"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>@Inject</literal> annotation lets us define an injection point "
"that is injected during bean instantiation. Injection can occur via three "
"different mechanisms."
msgstr ""
"L'annotation <literal>@Inject</literal> nous permet de définir un point "
"d'injection qui est injecté pendant la création d'un bean. L'injection peut "
"se produire par trois mécanismes différents."

#. Tag: para
#, fuzzy, no-c-format
msgid "<emphasis>Bean constructor</emphasis> parameter injection:"
msgstr ""
"Injection de paramètres dans un <emphasis>constructeur de bean</emphasis> :"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class Checkout {\n"
"        \n"
"   private final ShoppingCart cart;\n"
"    \n"
"   @Inject\n"
"   public Checkout(ShoppingCart cart) {\n"
"      this.cart = cart;\n"
"   }\n"
"\n"
"}"
msgstr ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private final ShoppingCart cart;\n"
"    \n"
"    @Initializer\n"
"    public Checkout(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "A bean can only have one injectable constructor."
msgstr "Un bean ne peut avoir qu'un seul constructeur injectable."

#. Tag: para
#, fuzzy, no-c-format
msgid "<emphasis>Initializer method</emphasis> parameter injection:"
msgstr ""
"Injection de paramètres dans une <emphasis>méthode "
"d'initialisation</emphasis> :"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class Checkout {\n"
"        \n"
"   private ShoppingCart cart;\n"
"\n"
"   @Inject\n"
"   void setShoppingCart(ShoppingCart cart) {\n"
"      this.cart = cart;\n"
"   }\n"
"    \n"
"}"
msgstr ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private ShoppingCart cart;\n"
"\n"
"    @Initializer \n"
"    void setShoppingCart(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A bean can have multiple initializer methods. If the bean is a session bean,"
" the initializer method is not required to be a business method of the "
"session bean."
msgstr ""
"Un bean peut avoir plusieurs méthodes d'initialisation. Si le bean est un "
"bean de session, la méthode d'initialisation n'a pas besoin d'être une "
"méthode business de bean de session."

#. Tag: para
#, fuzzy, no-c-format
msgid "And direct field injection:"
msgstr "Et l'injection directe d'attributs :"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class Checkout {\n"
"\n"
"   private @Inject ShoppingCart cart;\n"
"    \n"
"}"
msgstr ""
"<![CDATA[public class Checkout {\n"
"\n"
"    private @Current ShoppingCart cart;\n"
"    \n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Getter and setter methods are not required for field injection to work "
"(unlike with JSF managed beans)."
msgstr ""
"Les méthodes getter et setter ne sont pas réquises pour le fonctionnement de"
" l'injection d'attributs (contrairement aux beans JSF managés)."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Dependency injection always occurs when the bean instance is first "
"instantiated by the container. Simplifying just a little, things happen in "
"this order:"
msgstr ""
"L'injection de dépendance se produit toujours lorsque l'instance du bean est"
" d'abord instanciée par le conteneur. Simplifions juste un peu, les choses "
"se passent dans cet ordre :"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"First, the container calls the bean constructor (the default constructor or "
"the one annotated <literal>@Inject</literal>), to obtain an instance of the "
"bean."
msgstr ""
"D'abord, le conteneur appelle le constructeur du bean (le constructeur par "
"défaut or celui annoté avec <literal>@Inject</literal>), pour obtenir une "
"instance d'un bean."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Next, the container initializes the values of all injected fields of the "
"bean."
msgstr ""
"Ensuite, le conteneur initialise les valeurs de tous les attributs injectés "
"du bean."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Next, the container calls all initializer methods of bean (the call order is"
" not portable, don't rely on it)."
msgstr ""
"Ensuite, le conteneur appelle toutes les méthodes d'initialisation du bean "
"(l'ordre d'appel n'est pas portable, ne comptez pas dessus)."

#. Tag: para
#, no-c-format
msgid ""
"Finally, the <literal>@PostConstruct</literal> method, if any, is called."
msgstr ""
"Enfin, la méthode <literal>@PostConstruct</literal>, s'il en a une, est "
"appelée."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"(The only complication is that the container might call initializer methods "
"declared by a superclass before initializing injected fields declared by a "
"subclass.)"
msgstr ""
"(La seule complication est que le conteneur peut appeler des méthodes "
"d'initialisation d'une super classe avant d'initialiser les attributs "
"injectés par la sous classe.)"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"One major advantage of constructor injection is that it allows the bean to "
"be immutable."
msgstr ""
"L'un des avantages de l'injection par constructeur est que cela permet que "
"le bean soit immutable."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"CDI also supports parameter injection for some other methods that are "
"invoked by the container. For instance, parameter injection is supported for"
" producer methods:"
msgstr ""
"CDI supporte aussi l'injection de paramètres pour quelques autres méthode "
"qui sont appelées par le conteneur. Par exemple, l'injection de paramètres "
"est supportée pour les méthodes de production :"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Produces Checkout createCheckout(ShoppingCart cart) {\n"
"    return new Checkout(cart);\n"
"}"
msgstr ""
"<![CDATA[@Produces Checkout createCheckout(ShoppingCart cart) {\n"
"    return new Checkout(cart);\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"This is a case where the <literal>@Inject</literal> annotation <emphasis>is "
"not</emphasis> required at the injection point. The same is true for "
"observer methods (which we'll meet in <xref linkend=\"events\" />) and "
"disposer methods."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "What gets injected"
msgstr "Ce qui est injecté"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The CDI specification defines a procedure, called <emphasis>typesafe "
"resolution</emphasis>, that the container follows when identifying the bean "
"to inject to an injection point. This algorithm looks complex at first, but "
"once you understand it, it's really quite intuitive. Typesafe resolution is "
"performed at system initialization time, which means that the container will"
" inform the developer immediately if a bean's dependencies cannot be "
"satisfied."
msgstr ""
"La spécification CDI définit une procédure, appelée <emphasis>résolution typesafe</emphasis>, que le conteneur suit lors de l'identification d'un bean à injecter. Cet algorithme semble compliqué au début, mais une fois que vous le comprenez, il est vraiment intuitif.\n"
"La résolution typesafe est faite durant l'initialisation du système, qui signifie que le conteneur informera immédiatement le développeur si une dépendance de bean ne peut être satisfaite."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The purpose of this algorithm is to allow multiple beans to implement the "
"same bean type and either:"
msgstr ""
"Le but de cet algorithme est de permettre à plusieurs beans d'implémenter la"
" même interface et soit :"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"allow the client to select which implementation it requires using a "
"<emphasis>qualifier</emphasis> or"
msgstr ""
"de permettre au client à sélectionner quelle implémentation il souhaite "
"utiliser en utilisant des <emphasis>annotations de liaison</emphasis>,"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"allow the application deployer to select which implementation is appropriate"
" for a particular deployment, without changes to the client, by enabling or "
"disabling an <emphasis>alternative</emphasis>, or"
msgstr ""
"soit permettre au déployeur de l'application de sélectionner quelle "
"implémentation est appropriée pour un déploiement particulier, sans "
"changement sur le client, en activant ou en désactivant des <emphasis>types "
"de déploiement</emphasis>, ou"

#. Tag: para
#, fuzzy, no-c-format
msgid "allow the beans to be isolated into separate modules."
msgstr "permettre aux beans d'être isolés dans des modules séparés."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Obviously, if you have exactly one bean of a given type, and an injection "
"point with that same type, then bean A is going to go into slot A. That's "
"the simplest possible scenario. When you first start your application, "
"you'll likely have lots of those."
msgstr ""
"Evidemment, si vous avez exactement un bean d'un type donné, et un point "
"d'injection avec le même type, alors le bean A ira dans l'emplacement A. "
"C'est le scénario le plus simple. Quand vous démarrez votre application la "
"première fois, vous devriez en avoir plusieurs."

#. Tag: para
#, no-c-format
msgid ""
"But then, things start to get complicated. Let's explore how the container "
"determines which bean to inject in more advanced cases. We'll start by "
"taking a closer look at qualifiers."
msgstr ""
"Mais ensuite, les choses peuvent commencer à être compliqué. Voyons "
"maintenant comment le conteneur détermine quel bean injecter dans des cas "
"plus compliqués. Nous commencerons par regarder plus attentivement les "
"qualifiers."

#. Tag: title
#, fuzzy, no-c-format
msgid "Qualifier annotations"
msgstr "Annotations de liaison"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"If we have more than one bean that implements a particular bean type, the "
"injection point can specify exactly which bean should be injected using a "
"qualifier annotation. For example, there might be two implementations of "
"<literal>PaymentProcessor</literal>:"
msgstr ""
"Si nous avons plus d'un Web Bean qui implémente une API, le point "
"d'injection peut spécifier exactement quel Web Bean devrait être injecté en "
"utilisant une annotation de liaison. Par exemple, il peut y avoir deux "
"implémentation de <literal>PaymentProcessor</literal>:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Synchronous\n"
"public class SynchronousPaymentProcessor implements PaymentProcessor {\n"
"   public void process(Payment payment) { ... }\n"
"}"
msgstr ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Asynchronous\n"
"public class AsynchronousPaymentProcessor implements PaymentProcessor {\n"
"   public void process(Payment payment) { ... }\n"
"}"
msgstr ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Where <literal>@Synchronous</literal> and <literal>@Asynchronous</literal> "
"are qualifier annotations:"
msgstr ""
"Où <literal>@PayByCheque</literal> et <literal>@PayByCreditCard</literal> "
"sont des annotations de liaison:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface Synchronous {}"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCheque {}]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface Asynchronous {}"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCheque {}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A client bean developer uses the qualifier annotation to specify exactly "
"which bean should be injected."
msgstr ""
"Un développeur client d'un Web Bean peut utiliser l'annotation de liaison "
"pour spécifier exactement quel Web Bean doit être injecté."

#. Tag: para
#, no-c-format
msgid "Using field injection:"
msgstr "En utilisant l'injection de champ:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Inject @Synchronous PaymentProcessor syncPaymentProcessor;\n"
"@Inject @Asynchronous PaymentProcessor asyncPaymentProcessor;"
msgstr ""
"<![CDATA[@PayByCheque PaymentProcessor chequePaymentProcessor;\n"
"@PayByCreditCard PaymentProcessor creditCardPaymentProcessor;]]>"

#. Tag: para
#, no-c-format
msgid "Using initializer method injection:"
msgstr "En  utilisant l'injection de méthode d'initialisation:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Inject\n"
"public void setPaymentProcessors(@Synchronous PaymentProcessor syncPaymentProcessor, \n"
"                                 @Asynchronous PaymentProcessor asyncPaymentProcessor) {\n"
"   this.syncPaymentProcessor = syncPaymentProcessor;\n"
"   this.asyncPaymentProcessor = asyncPaymentProcessor;\n"
"}"
msgstr ""
"<![CDATA[@Initializer\n"
"public void setPaymentProcessors(@PayByCheque PaymentProcessor chequePaymentProcessor, \n"
"                                 @PayByCreditCard PaymentProcessor creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Using constructor injection:"
msgstr "Ou en utilisant l'injection de constructeur:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Inject\n"
"public Checkout(@Synchronous PaymentProcessor syncPaymentProcessor, \n"
"                @Asynchronous PaymentProcessor asyncPaymentProcessor) {\n"
"   this.syncPaymentProcessor = syncPaymentProcessor;\n"
"   this.asyncPaymentProcessor = asyncPaymentProcessor;\n"
"}"
msgstr ""
"<![CDATA[@Initializer\n"
"public Checkout(@PayByCheque PaymentProcessor chequePaymentProcessor, \n"
"                @PayByCreditCard PaymentProcessor creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"Qualifier annotations can also qualify method arguments of producer, "
"disposer and observer methods. Combining qualified arguments with producer "
"methods is a good way to have an implementation of a bean type selected at "
"runtime based on the state of the system:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Produces\n"
"PaymentProcessor getPaymentProcessor(@Synchronous PaymentProcessor syncPaymentProcessor,\n"
"                                     @Asynchronous PaymentProcessor asyncPaymentProcessor) {\n"
"   return isSynchronous() ? syncPaymentProcessor : asyncPaymentProcessor;\n"
"}"
msgstr ""
"<![CDATA[@Initializer\n"
"public void setPaymentProcessors(@PayByCheque PaymentProcessor chequePaymentProcessor, \n"
"                                 @PayByCreditCard PaymentProcessor creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"If an injected field or a parameter of a bean constructor or initializer "
"method is not explicitly annotated with a qualifier, the default qualifier, "
"<literal>@Default</literal>, is assumed."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now, you may be thinking, <emphasis>\"What's the different between using a "
"qualifier and just specifying the exact implementation class you "
"want?\"</emphasis> It's important to understand that a qualifier is like an "
"extension of the interface. It does not create a direct dependency to any "
"particular implementation. There may be multiple alternative implementations"
" of <literal>@Asynchronous PaymentProcessor</literal>!"
msgstr ""

#. Tag: title
#, no-c-format
msgid ""
"The built-in qualifiers <literal>@Default</literal> and "
"<literal>@Any</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Whenever a bean or injection point does not explicitly declare a qualifier, "
"the container assumes the qualifier <literal>@Default</literal>. From time "
"to time, you'll need to declare an injection point without specifying a "
"qualifier. There's a qualifier for that too. All beans have the qualifier "
"<literal>@Any</literal>. Therefore, by explicitly specifying "
"<literal>@Any</literal> at an injection point, you suppress the default "
"qualifier, without otherwise restricting the beans that are eligible for "
"injection."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This is especially useful if you want to iterate over all beans with a "
"certain bean type. For example:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Inject \n"
"void initServices(@Any Instance&lt;Service&gt; services) { \n"
"   for (Service service: services) {\n"
"      service.init();\n"
"   }\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Qualifiers with members"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Java annotations can have members. We can use annotation members to further "
"discriminate a qualifier. This prevents a potential explosion of new "
"annotations. For example, instead of creating several qualifiers "
"representing different payment methods, we could aggregate them into a "
"single annotation with a member:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, FIELD, PARAMETER, TYPE})\n"
"public @interface PayBy {\n"
"   PaymentMethod value();\n"
"}"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayBy {\n"
"    PaymentType value();\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"Then we select one of the possible member values when applying the "
"qualifier:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "private @Inject @PayBy(CHECK) PaymentProcessor checkPayment;"
msgstr ""
"<![CDATA[@Asynchronous @PayByCheque PaymentProcessor paymentProcessor]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"We can force the container to ignore a member of a qualifier type by "
"annotating the member <literal>@Nonbinding</literal>."
msgstr ""
"Vous pouvez dire au gestionnaire de Web Bean d'ignorer un membre d'un type "
"d'annotation de liaison en annotant le membre "
"<literal>@NonBinding</literal>."

#. Tag: programlisting
#, no-c-format
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, FIELD, PARAMETER, TYPE})\n"
"public @interface PayBy {\n"
"   PaymentMethod value();\n"
"   @Nonbinding String comment() default \"\";\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Multiple qualifiers"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "An injection point may specify multiple qualifiers:"
msgstr ""
"Un point d'injection peut même spécifier plusieurs annotations de liaison:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Synchronous @Reliable PaymentProcessor syncPaymentProcessor;"
msgstr ""
"<![CDATA[@Asynchronous @PayByCheque PaymentProcessor paymentProcessor]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Then only a bean which has <emphasis>both</emphasis> qualifier annotations "
"would be eligible for injection."
msgstr ""
"Dans ce cas, seul un Web Bean qui a <emphasis>les deux</emphasis> "
"annotations de liaison serait éligible pour l'injection."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Synchronous @Reliable\n"
"public class SynchronousReliablePaymentProcessor implements PaymentProcessor {\n"
"   public void process(Payment payment) { ... }\n"
"}"
msgstr ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: title
#, no-c-format
msgid "Alternatives"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Alternatives are beans whose implementation is specific to a particular "
"client module or deployment scenario. This alternative defines a mock "
"implementation of both <literal>@Synchronous PaymentProcessor</literal> and "
"<literal>@Asynchronous PaymentProcessor</literal>, all in one:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Alternative @Synchronous @Asynchronous\n"
"public class MockPaymentProcessor implements PaymentProcessor {\n"
"   public void process(Payment payment) { ... }\n"
"}"
msgstr ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"By default, <literal>@Alternative</literal> beans are disabled. We need to "
"<emphasis>enable</emphasis> an alternative in the "
"<literal>beans.xml</literal> descriptor of a bean archive to make it "
"available for instantiation and injection. This activation only applies to "
"the beans in that archive."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&lt;beans\n"
"   xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"   xsi:schemaLocation=\"\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd\"&gt;\n"
"   &lt;alternatives&gt;\n"
"         &lt;class&gt;org.mycompany.mock.MockPaymentProcessor&lt;/class&gt;\n"
"   &lt;/alternatives&gt;\n"
"&lt;/beans&gt;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"When an ambiguous dependency exists at an injection point, the container "
"attempts to resolve the ambiguity by looking for an enabled alternative "
"among the beans that could be injected. If there is exactly one enabled "
"alternative, that's the bean that will be injected."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Fixing unsatisfied and ambiguous dependencies"
msgstr "Résoudre les dépendances insatisfaites"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The typesafe resolution algorithm fails when, after considering the "
"qualifier annotations on all beans that implement the bean type of an "
"injection point and filtering out disabled beans "
"(<literal>@Alternative</literal> beans which are not explicitly enabled), "
"the container is unable to identify exactly one bean to inject. The "
"container will abort deployment, informing us of the unsatisfied or "
"ambiguous dependency."
msgstr ""
"L'algorithme de résolution typesafe échoue lorsque, après avoir analysé les "
"annotations de liaison et les types de déploiement de tous les Web Beans qui"
" implémentent l'API d'un point d'injection, le gestionnaire de Web Bean est "
"incapable d'identifier exactement un Web Bean à injecter."

#. Tag: para
#, no-c-format
msgid ""
"During the course of your development, you're going to encounter this "
"situation. Let's learn how to resolve it."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To fix an <emphasis>unsatisfied dependency</emphasis>, either:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"create a bean which implements the bean type and has all the qualifier types"
" of the injection point,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"make sure that the bean you already have is in the classpath of the module "
"with the injection point, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"explicitly enable an <literal>@Alternative</literal> bean that implements "
"the bean type and has the appropriate qualifier types, using "
"<literal>beans.xml</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To fix an <emphasis>ambiguous dependency</emphasis>, either:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"introduce a qualifier to distinguish between the two implementations of the "
"bean type,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"disable one of the beans by annotating it <literal>@Alternative</literal>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"move one of the implementations to a module that is not in the classpath of "
"the module with the injection point, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"disable one of two <literal>@Alternative</literal> beans that are trying to "
"occupy the same space, using <literal>beans.xml</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"See <ulink "
"url=\"http://sfwk.org/Documentation/HowDoAResolveAnAmbiguousResolutionExceptionBetweenAProducerMethodAndARawType\">this"
" FAQ</ulink> for step-by-step instructions for how to resolve an ambiguous "
"resolution exception between a raw bean type and a producer method that "
"returns the same bean type."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Just remember: \"There can be only one.\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"On the other hand, if you really do have an optional or multivalued "
"injection point, you should change the type of your injection point to "
"<literal>Instance</literal>, as we'll see in <xref linkend=\"lookup\" />."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now there's one more issue you need to be aware of when using the dependency"
" injection service."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Client proxies"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Clients of an injected bean do not usually hold a direct reference to a bean"
" instance, unless the bean is a dependent object (scope "
"<literal>@Dependent</literal>)."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Imagine that a bean bound to the application scope held a direct reference "
"to a bean bound to the request scope. The application-scoped bean is shared "
"between many different requests. However, each request should see a "
"different instance of the request scoped bean&mdash;the current one!"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now imagine that a bean bound to the session scope holds a direct reference "
"to a bean bound to the application scope. From time to time, the session "
"context is serialized to disk in order to use memory more efficiently. "
"However, the application scoped bean instance should not be serialized along"
" with the session scoped bean! It can get that reference any time. No need "
"to hoard it!"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Therefore, unless a bean has the default scope "
"<literal>@Dependent</literal>, the container must indirect all injected "
"references to the bean through a proxy object. This <emphasis>client "
"proxy</emphasis> is responsible for ensuring that the bean instance that "
"receives a method invocation is the instance that is associated with the "
"current context. The client proxy also allows beans bound to contexts such "
"as the session context to be serialized to disk without recursively "
"serializing other injected beans."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Unfortunately, due to limitations of the Java language, some Java types "
"cannot be proxied by the container. If an injection point declared with one "
"of these types resolves to a bean with any scope other than "
"<literal>@Dependent</literal>, the container will abort deployment, "
"informing us of the problem."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following Java types cannot be proxied by the container:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"classes which don't have a non-private constructor with no parameters, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"classes which are declared <literal>final</literal> or have a "
"<literal>final</literal> method,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "arrays and primitive types."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"It's usually very easy to fix an unproxyable dependency problem. If an "
"injection point of type <literal>X</literal> results in an unproxyable "
"dependency, simply:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "add a constructor with no parameters to <literal>X</literal>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"change the type of the injection point to "
"<literal>Instance&lt;X&gt;</literal>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"introduce an interface <literal>Y</literal>, implemented by the injected "
"bean, and change the type of the injection point to <literal>Y</literal>, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"if all else fails, change the scope of the injected bean to "
"<literal>@Dependent</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A future release of Weld will likely support a non-standard workaround for "
"this limitation, using non-portable JVM APIs:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Sun, IcedTea, Mac: <literal>Unsafe.allocateInstance()</literal> (The most "
"efficient)"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"IBM, JRockit: "
"<literal>ReflectionFactory.newConstructorForSerialization()</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "But we didn't get around to implementing this yet."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Obtaining a contextual instance by programmatic lookup"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In certain situations, injection is not the most convenient way to obtain a "
"contextual reference. For example, it may not be used when:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the bean type or qualifiers vary dynamically at runtime, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"depending upon the deployment, there may be no bean which satisfies the type"
" and qualifiers, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid "we would like to iterate over all beans of a certain type."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In these situations, the application may obtain an instance of the interface"
" <literal>Instance</literal>, parameterized for the bean type, by injection:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject Instance&lt;PaymentProcessor&gt; paymentProcessorSource;"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>get()</literal> method of <literal>Instance</literal> produces "
"a contextual instance of the bean."
msgstr ""
"<literal>@Mock</literal> and <literal>@Staging</literal> deployment types "
"for testing"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "PaymentProcessor p = paymentProcessorSource.get();"
msgstr "<![CDATA[@Current PaymentProcessor paymentProcessor]]>"

#. Tag: para
#, no-c-format
msgid "Qualifiers can be specified in one of two ways:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "by annotating the <literal>Instance</literal> injection point, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"by passing qualifiers to the <literal>select()</literal> of "
"<literal>Event</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Specifying the qualifiers at the injection point is much, much easier:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Inject @Asynchronous Instance&lt;PaymentProcessor&gt; "
"paymentProcessorSource;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now, the <literal>PaymentProcessor</literal> returned by "
"<literal>get()</literal> will have the qualifier "
"<literal>@Asynchronous</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Alternatively, we can specify the qualifier dynamically. First, we add the "
"<literal>@Any</literal> qualifier to the injection point, to suppress the "
"default qualifier. (All beans have the qualifier <literal>@Any</literal>.)"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @Any Instance&lt;PaymentProcessor&gt; paymentProcessorSource;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Next, we need to obtain an instance of our qualifier type. Since annotations"
" are interfaces, we can't just write <literal>new Asynchronous()</literal>. "
"It's also quite tedious to create a concrete implementation of an annotation"
" type from scratch. Instead, CDI lets us obtain a qualifier instance by "
"subclassing the helper class <literal>AnnotationLiteral</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class AsynchronousQualifier\n"
"extends AnnotationLiteral&lt;Asynchronous&gt; implements Asynchronous {}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In some cases, we can use an anonymous class:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"PaymentProcessor p = paymentProcessorSource\n"
"   .select(new AnnotationLiteral&lt;Asynchronous&gt;() {});"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"However, we can't use an anonymous class to implement a qualifier type with "
"members."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now, finally, we can pass the qualifier to the <literal>select()</literal> "
"method of <literal>Instance</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"Annotation qualifier = synchronously ?\n"
"      new SynchronousQualifier() : new AsynchronousQualifier();\n"
"PaymentProcessor p = anyPaymentProcessor.select(qualifier).get().process(payment);"
msgstr ""

#. Tag: title
#, no-c-format
msgid "The <literal>InjectionPoint</literal> object"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are certain kinds of dependent objects (beans with scope "
"<literal>@Dependent</literal>) that need to know something about the object "
"or injection point into which they are injected in order to be able to do "
"what they do. For example:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The log category for a <literal>Logger</literal> depends upon the class of "
"the object that owns it."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Injection of a HTTP parameter or header value depends upon what parameter or"
" header name was specified at the injection point."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Injection of the result of an EL expression evaluation depends upon the "
"expression that was specified at the injection point."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A bean with scope <literal>@Dependent</literal> may inject an instance of "
"<literal>InjectionPoint</literal> and access metadata relating to the "
"injection point to which it belongs."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Let's look at an example. The following code is verbose, and vulnerable to "
"refactoring problems:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "Logger log = Logger.getLogger(MyClass.class.getName());"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This clever little producer method lets you inject a JDK "
"<literal>Logger</literal> without explicitly specifying the log category:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class LogFactory {\n"
"\n"
"   @Produces Logger createLogger(InjectionPoint injectionPoint) { \n"
"      return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName()); \n"
"   }\n"
"\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "We can now write:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject Logger log;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Not convinced? Then here's a second example. To inject HTTP parameters, we "
"need to define a qualifier type:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@BindingType\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface HttpParam {\n"
"   @Nonbinding public String value();\n"
"}"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayBy {\n"
"    PaymentType value();\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "We would use this qualifier type at injection points as follows:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@HttpParam(\"username\") String username;\n"
"@HttpParam(\"password\") String password;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following producer method does the work:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class HttpParams\n"
"\n"
"   @Produces @HttpParam(\"\")\n"
"   String getParamValue(InjectionPoint ip) {\n"
"      ServletRequest request = (ServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\n"
"      return request.getParameter(ip.getAnnotated().getAnnotation(HttpParam.class).value());\n"
"   }\n"
"\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Note that acquiring of the request in this example is JSF-centric. For a "
"more generic solution you could write your own producer for the request and "
"have it injected as a method parameter."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Note also that the <literal>value()</literal> member of the "
"<literal>HttpParam</literal> annotation is ignored by the container since it"
" is annotated <literal>@Nonbinding.</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The container provides a built-in bean that implements the "
"<literal>InjectionPoint</literal> interface:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public interface InjectionPoint { \n"
"   public Type getType();\n"
"   public Set&lt;Annotation&gt; getQualifiers();\n"
"   public Bean&lt;?&gt; getBean();\n"
"   public Member getMember();\n"
"   public Annotated getAnnotated();\n"
"   public boolean isDelegate();\n"
"   public boolean isTransient();\n"
"}"
msgstr ""
