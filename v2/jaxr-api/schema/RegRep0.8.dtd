<!--*************************************************************
RequestAcceptedResponse.dtd
-->
<!--
 The contents of this file are subject to the terms 
 of the Common Development and Distribution License 
 (the License).  You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the license at 
 https://glassfish.dev.java.net/public/CDDLv1.0.html or
 glassfish/bootstrap/legal/CDDLv1.0.txt.
 See the License for the specific language governing 
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL 
 Header Notice in each file and include the License file 
 at glassfish/bootstrap/legal/CDDLv1.0.txt.  
 If applicable, add the following below the CDDL Header, 
 with the fields enclosed by brackets [] replaced by
 you own identifying information: 
 "Portions Copyrighted [year] [name of copyright owner]"
 
 Copyright 2007 Sun Microsystems, Inc. All rights reserved.
-->

<!ELEMENT RequestAcceptedResponse EMPTY>
<!ATTLIST RequestAcceptedResponse  xml:lang       NMTOKEN  #REQUIRED
                                   interfaceId    CDATA    #REQUIRED
                                   requestMessage CDATA    #REQUIRED
                                   actionId       CDATA    #REQUIRED >
<!ENTITY % interfaceId "">

<!--*************************************************************
ebXMLError.dtd
-->
<!ELEMENT ebXMLError  (ErrorHeader , ErrorLocation* )>
<!ATTLIST ebXMLError  xml:lang NMTOKEN  #REQUIRED >
<!ELEMENT ErrorHeader  (Severity , ErrorCode , ErrorDesc? , MinRetrySecs? )>
<!ATTLIST ErrorHeader  ID NMTOKEN  #REQUIRED >
<!ELEMENT Severity  (#PCDATA )>

<!-- Either Warning, TransientError or HardError -->
<!ELEMENT ErrorCode  (#PCDATA )>

<!-- string max 14 char -->
<!ELEMENT ErrorDesc  (#PCDATA )>

<!-- string max 256 (?) char -->
<!ELEMENT MinRetrySecs  (#PCDATA )>

<!-- An integer -->
<!ELEMENT SwVendorErrorRef  (#PCDATA )>

<!-- string max 256 (?) chars -->
<!ELEMENT ErrorLocation  (RefToMessageId? ,  (Href | XMLDocumentErrorLocn ) )>
<!ATTLIST ErrorLocation  ID NMTOKEN  #REQUIRED >
<!ELEMENT RefToMessageId  (#PCDATA )>

<!ELEMENT Href  (#PCDATA )>

<!ELEMENT XMLDocumentErrorLocn  (DocumentId , Xpath )>

<!ELEMENT DocumentId  (#PCDATA )>

<!ELEMENT Xpath  (#PCDATA )>


<!--*************************************************************
ManagedObject.dtd
-->
<!ELEMENT ManagedObject EMPTY>

<!--
The following are standard document attributes that provide meta-data 
about the document. These are based on the ebXML Repository Information Model
specification:
-->
<!ATTLIST ManagedObject guid           CDATA  #REQUIRED>

<!ATTLIST ManagedObject uri            CDATA  #REQUIRED>

<!ATTLIST ManagedObject type            (UserDefined | 
                                         Schema | 
                                         Process | 
                                         PartyProfile | 
                                         ServiceInterface | 
                                         BusinessService | 
                                         Role | 
                                         Transport | 
                                         Association | 
                                         ClassificationNode | 
                                         Classification )  #REQUIRED>

<!ATTLIST ManagedObject name           CDATA  #REQUIRED>

<!ATTLIST ManagedObject description    CDATA  #IMPLIED>

<!ATTLIST ManagedObject mimeType       CDATA  #IMPLIED>

<!ATTLIST ManagedObject majorVersion   CDATA  "0">

<!ATTLIST ManagedObject minorVersion   CDATA  "1">

<!ATTLIST ManagedObject registryStatus  (Submitted | Approved | Deployed | Deprecated )  "Submitted">

<!ELEMENT ManagedObjectList  (ManagedObject)*>

<!ELEMENT ManagedObjectRef EMPTY>
<!ATTLIST ManagedObjectRef  guid CDATA  #REQUIRED
                            uri  CDATA  #IMPLIED
                            name CDATA  #IMPLIED >
<!ELEMENT ManagedObjectRefList  (ManagedObjectRef )*>

<!ELEMENT ExternalObject EMPTY>
<!ATTLIST ExternalObject  guid        CDATA  #REQUIRED
                          uri         CDATA  #IMPLIED
                          description CDATA  #IMPLIED >
<!ELEMENT ExternalObjectList  (ExternalObject )*>

<!--
A Classification specifies references to two previously submitted
managed objects.

The first ManagedObjectRef is ref to a ManagedObject being classified
The second ManagedObjectRef is a ref to ClassificationNode

The first ManagedObjectRef is optional when Classification is defined part of
a SubmittedObject.
-->
<!ELEMENT Classification  (ManagedObjectRef? , ManagedObjectRef )>

<!ELEMENT ClassificationList  (Classification )*>

<!--
An Association specifies references to two previously submitted
managed objects.

The first ManagedObjectRef is ref to the "from" ManagedObject in association
The first ManagedObjectRef is ref to the "to" ManagedObject in association

The first ManagedObjectRef is optional when Association is defined part of
a SubmittedObject.
-->
<!ELEMENT Association  (ManagedObjectRef? , ManagedObjectRef )>
<!ATTLIST Association  fromLabel   CDATA  #IMPLIED
                       toLabel     CDATA  #IMPLIED
                       type        CDATA  #IMPLIED
                       bidirection CDATA  #IMPLIED >
<!ELEMENT AssociationList  (Association )*>


<!--*************************************************************
RegisterPartyRequest.dtd
-->
<!ENTITY % tpa SYSTEM "tpa_1_0_6.dtd">

%tpa;

<!--
The Organization element needs to be defined by CC team. 
For now this is a place holder.
-->
<!ELEMENT Organization EMPTY>

<!--
The party must be associated with an Organization. The Organization
may be defined in the request or may refer to a previously defined
Organization referred to by ManagedObjectRef.

The party must provide a PartyProfile which currently is represented
by a TPA. TP team needs to define PartyProfile post Tokyo.
-->
<!ELEMENT RegisterPartyRequest  ( (Organization | ManagedObjectRef ) , TPA )>

<!--*************************************************************
SubmitObjectsRequest.dtd
-->
<!--
The ManagedObjectRef must be a ref to a previously registered Party
which is the Submitting party

The SubmittedObject provides meta data for submitted object

Note object being submitted is in a separate document that is not
in this DTD.
-->
<!ELEMENT SubmitObjectsRequest  (ManagedObjectRef , SubmittedObject+ )>

<!--
The ManagedObject provides meta data about the object being submitted

ClassificationList can be optionaly be specified to define Classifications 
for the SubmittedObject

AssociationList can be optionaly be specified to define Associations 
for the SubmittedObject

The ExternalObjectList provides zero or more external objects related to
the object being submitted.
   
-->
<!ELEMENT SubmittedObject  (ManagedObject , ClassificationList?, 
	AssociationList?, ExternalObjectList? )>

<!--*************************************************************
ApproveObjectsRequest.dtd
-->
<!--
The ManagedObjectRef is to a previously registered Party
which is the approving party. 

The ManagedObjectRefList is the list of
refs to the managed objects being approved.
-->

<!ELEMENT ApproveObjectsRequest  (ManagedObjectRef , ManagedObjectRefList )>

<!--*************************************************************
DeprecateObjectsRequest.dtd
-->
<!--
The ManagedObjectRef is to a previously registered Party
which is the deprecating party. 

The ManagedObjectRefList is the list of
refs to the managed objects being deprecated.
-->
<!ELEMENT DeprecateObjectsRequest  (ManagedObjectRef , ManagedObjectRefList )>

<!--*************************************************************
RemoveObjectsRequest.dtd
-->
<!--
The ManagedObjectRef is to a previously registered Party
which is the removing party. 

The ManagedObjectRefList is the list of
refs to the managed objects being removed
-->
<!ELEMENT RemoveObjectsRequest  (ManagedObjectRef , ManagedObjectRefList )>

<!--*************************************************************
ClassificationNode.dtd
-->
<!--
ClassificationNode is used to submit a Classification tree to the Registry.
Note that this is a recursive schema definition.
The parent attribute of a node in tree is implied by the enclosing ClassificationNode
The children nodes of a node are implied by enclosing immediate child elements
of type ClassificationNode.
-->
<!ELEMENT ClassificationNode  (ClassificationNode* )>

<!--
The name of the ClassificationNode. Maps to the name attribute
of the ManagedObject meta data class.
-->
<!ATTLIST ClassificationNode name CDATA  #REQUIRED>

<!--
ClassificationNodeRef is used by the ObjectQueryManager
for various query responses. It represents a tree of
ClassificationNodeRef.
-->
<!ELEMENT ClassificationNodeRef  (ManagedObjectRef , ClassificationNodeRef* )>

<!--
ClassificationNodeRefList is used to send a list of
ClassificationNodeRef when returning immediate children nodes
of a node.
-->
<!ELEMENT ClassificationNodeRefList  (ClassificationNodeRef )*>

<!--*************************************************************
GetRootClassificationNodesRequest.dtd
-->
<!--
The query request that gets the specified root ClassificationNodes
-->
<!ELEMENT GetRootClassificationNodesRequest EMPTY>

<!--
The namePattern follows SQL-92 syntax for the pattern specified in
LIKE clause. It allows for selecting only those root nodes that match
the namePattern. The default value of '*' matches all root nodes.
-->
<!ATTLIST GetRootClassificationNodesRequest  namePattern CDATA  '*' >

<!--*************************************************************
GetRootClassificationNodesResponse.dtd
-->
<!--
The response includes a ManagedObjectRefList which has zero or more
references to ManagedObjects that represent ClassificationNode Refs
-->
<!ELEMENT GetRootClassificationNodesResponse  (ManagedObjectRefList | ebXMLError )>


<!--*************************************************************
GetClassificationTreeRequest.dtd
-->
<!--
Get the ClassificationItemTreeRef under the ClassificationItemRef specified
by ManagedObjectRef. 
-->
<!ELEMENT GetClassificationTreeRequest  (ManagedObjectRef )>

<!--
If depth is 1 just fetch immediate child 
nodes, otherwise fetch the descendant tree upto specified depth level.
If depth is 0 that implies fetch entire sub-tree 
-->
<!ATTLIST GetClassificationTreeRequest  depth CDATA '1' >

<!--*************************************************************
GetClassificationTreeResponse.dtd
-->
<!--
The response includes a ClassificationNodeRefList which includes only
immediate ClassificationNodeRef children nodes if depth attribute in 
GetClassificationTreeRequest was 1, otherwise the decendent nodes 
upto specifed depth level are returned.
-->
<!ELEMENT GetClassificationTreeResponse  (ClassificationNodeRefList | ebXMLError )>


<!--*************************************************************
GetClassifiedObjectsRequest.dtd
-->
<!--
Get refs to all managed objects that are classified by all the 
ClassificationNodeRef specified by ManagedObjectRefList. 

Note this is an implicit logical AND operation 
-->
<!ELEMENT GetClassifiedObjectsRequest  (ManagedObjectRefList )>

<!--
objectType attribute can specify the type of objects that the registry
client is interested in, that is classified by this ClassificationNode.
It is a String that matches a choice in the type attribute of ManagedObject.
The default value of '*' implies that client is interested in all types
of managed objects that are classified by the specified ClassificationNode. 
-->
<!ATTLIST GetClassifiedObjectsRequest objectType CDATA  "*">

<!--*************************************************************
GetClassifiedObjectsResponse.dtd
-->
<!--
The response includes a ManagedObjectList which has zero or more
ManagedObjects that are classified by the ClassificationNodeRef
specified in the GetClassifiedObjectsRequest.
-->
<!ELEMENT GetClassifiedObjectsResponse  (ManagedObjectList | ebXMLError )>


<!--*************************************************************
The contrived root node
-->
<!ELEMENT RootElement  (
RequestAcceptedResponse |
ebXMLError |
ErrorHeader |
Severity |
ErrorCode |
ErrorDesc |
MinRetrySecs |
SwVendorErrorRef |
ErrorLocation |
RefToMessageId |
Href |
XMLDocumentErrorLocn |
DocumentId |
Xpath |
ManagedObject |
ManagedObjectRef |
ManagedObjectRefList |
ExternalObject |
ExternalObjectList |
Classification |
ClassificationList |
Association |
AssociationList |
Organization |
RegisterPartyRequest |
SubmitObjectsRequest |
SubmittedObject | 
ApproveObjectsRequest |
DeprecateObjectsRequest |
RemoveObjectsRequest |
ClassificationNode |
ClassificationNodeRef |
ClassificationNodeRefList |
GetRootClassificationNodesRequest |
GetRootClassificationNodesResponse |
GetClassificationTreeRequest |
GetClassificationTreeResponse |
GetClassifiedObjectsRequest |
GetClassifiedObjectsResponse
 )>

