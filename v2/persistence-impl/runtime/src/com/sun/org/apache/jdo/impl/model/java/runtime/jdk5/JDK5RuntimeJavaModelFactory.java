/*
 * The contents of this file are subject to the terms 
 * of the Common Development and Distribution License 
 * (the "License").  You may not use this file except 
 * in compliance with the License.
 * 
 * You can obtain a copy of the license at 
 * glassfish/bootstrap/legal/CDDLv1.0.txt or 
 * https://glassfish.dev.java.net/public/CDDLv1.0.html. 
 * See the License for the specific language governing 
 * permissions and limitations under the License.
 * 
 * When distributing Covered Code, include this CDDL 
 * HEADER in each file and include the License file at 
 * glassfish/bootstrap/legal/CDDLv1.0.txt.  If applicable, 
 * add the following below this CDDL HEADER, with the 
 * fields enclosed by brackets "[]" replaced with your 
 * own identifying information: Portions Copyright [yyyy] 
 * [name of copyright owner]
 */

/*
 * Copyright 2005 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */

package com.sun.org.apache.jdo.impl.model.java.runtime.jdk5;
import com.sun.org.apache.jdo.model.ModelFatalException;
import com.sun.org.apache.jdo.model.java.JavaModel;
import com.sun.org.apache.jdo.util.I18NHelper;
import com.sun.persistence.support.spi.JDOPermission;
import com.sun.org.apache.jdo.impl.model.java.runtime.*;

/**
 * A reflection based JavaModelFactory implementation used at runtime in a
 * J2SE5.0 environment. 
 * The implementation takes <code>java.lang.Class</code> and
 * <code>java.lang.reflect.Field</code> instances to get Java related
 * metadata about types and fields. This implementation caches JavaModel
 * instances per ClassLoader.
 * <p>
 * JDK5RuntimeJavaModelFactory implements the singleton pattern; method 
 * {@link #getInstance()} provides access to the singleton factory
 * instance. This method also registers a model listener at the
 * JDOImplHelper to handle the runtime metadata as generated by the
 * enhancer. 
 * 
 * @author Michael Bouschen
 * @since JDO 2.0
 */
public class JDK5RuntimeJavaModelFactory
    extends RuntimeJavaModelFactory
{    
    /** The singleton JDK5RuntimeJavaModelFactory instance. */    
    private static final JDK5RuntimeJavaModelFactory runtimeJavaModelFactory = 
        new JDK5RuntimeJavaModelFactory();

    /** I18N support */
    private final static I18NHelper msg =  
        I18NHelper.getInstance(JDK5RuntimeJavaModelFactory.class); 

    /**
     * Creates a new RuntimeJavaModelFactory. This constructor should not
     * be called directly; instead, the singleton access method 
     * {@link #getInstance()} should be used.
     */
    protected JDK5RuntimeJavaModelFactory() {}

    /** 
     * Returns the singleton instance of JDK5RuntimeJavaModelFactory. On first
     * call it registers  a model listener at the JDOImplHelper.
     * This method checks that the caller is authorized for 
     * <code>JDOPermission("getMetadata")</code>, and if not, throws
     * <code>ModelFatalException</code> wrapping the SecurityException.
     * @return RuntimeJavaModelFactory instance
     * @exception ModelFatalException if the caller does not have the
     * getMetadata permission.
     */    
    public static JDK5RuntimeJavaModelFactory getInstance()
        throws ModelFatalException
    {
        checkPermission();
        return runtimeJavaModelFactory;
    }
    
    //========= Internal helper methods ==========

    /** 
     * Creates a new instance of the JavaModel implementation class.
     * <p>
     * This implementation returns a <code>JDK5RuntimeJavaModel</code> instance.
     * @return a new JavaModel instance.
     */
    protected JavaModel newJavaModelInstance(ClassLoader classLoader) {
        return new JDK5RuntimeJavaModel(classLoader, this);
    }
    
}
