# translation of interceptors.po to Traditional Chinese
# Language zh-TW translations for Introduction_to_Web_Beans package.
# 
# Automatically generated, 2009.
# Terry Chuang <tchuang@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-01-15 12:13+1000\n"
"Last-Translator: Terry Chuang <tchuang@redhat.com>\n"
"Language-Team: Traditional Chinese <zh@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#, no-c-format
msgid "Interceptors"
msgstr "攔截器（Interceptor）"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Interceptor functionality is defined in the Java Interceptors specification."
" CDI enhances this functionality with a more sophisticated, semantic, "
"annotation-based approach to binding interceptors to beans."
msgstr "針對於將攔截器綁定至 Web Bean，Web Bean 含有較為復雜的標記導向方式。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The Interceptors specification defines two kinds of interception points:"
msgstr "EJB 格式定義了兩種類型的攔截點："

#. Tag: para
#, no-c-format
msgid "business method interception, and"
msgstr "business method 的攔截，以及"

#. Tag: para
#, no-c-format
msgid "lifecycle callback interception."
msgstr "lifecycle callback 的攔截。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"In addition, the EJB specification defines timeout method interception."
msgstr "EJB 格式定義了兩種類型的攔截點："

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A <emphasis>business method interceptor</emphasis> applies to invocations of"
" methods of the bean by clients of the bean:"
msgstr ""
"<emphasis>business method 攔截器</emphasis>可適用於來自 Web Bean 客戶端的 Web Bean 的 "
"method 調用："

#. Tag: programlisting
#, no-c-format
msgid ""
"public class TransactionInterceptor {\n"
"   @AroundInvoke \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A <emphasis>lifecycle callback interceptor</emphasis> applies to invocations"
" of lifecycle callbacks by the container:"
msgstr ""
"<emphasis>lifecycle callback 攔截器</emphasis>可適用於來自 container 的 lifecycle "
"callback 的調用："

#. Tag: programlisting
#, no-c-format
msgid ""
"public class DependencyInjectionInterceptor {\n"
"   @PostConstruct \n"
"   public void injectDependencies(InvocationContext ctx) { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"An interceptor class may intercept both lifecycle callbacks and business "
"methods."
msgstr "攔截器 class 可攔截 lifecycle callback 以及 business method。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A <emphasis>timeout method interceptor</emphasis> applies to invocations of "
"EJB timeout methods by the container:"
msgstr ""
"<emphasis>lifecycle callback 攔截器</emphasis>可適用於來自 container 的 lifecycle "
"callback 的調用："

#. Tag: programlisting
#, no-c-format
msgid ""
"public class TimeoutInterceptor {\n"
"   @AroundTimeout \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Interceptor bindings"
msgstr "攔截器綁定"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Suppose we want to declare that some of our beans are transactional. The "
"first thing we need is an <emphasis>interceptor binding type</emphasis> to "
"specify exactly which beans we're interested in:"
msgstr ""
"假設我們希望宣告我們有些 Web Bean 屬於交易性的 Web Bean。我們首先需要的就是一個 "
"<emphasis>攔截器綁定標記（interceptor binding annotation）</emphasis>來明確指定我們要專注的 Web "
"Bean 是哪個："

#. Tag: programlisting
#, no-c-format
msgid ""
"@InterceptorBinding\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Transactional {}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now we can easily specify that our <literal>ShoppingCart</literal> is a "
"transactional object:"
msgstr "現在我們能輕易地指定我們的 <literal>ShoppingCart</literal> 屬於一個交易性的物件："

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional\n"
"public class ShoppingCart { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Or, if we prefer, we can specify that just one method is transactional:"
msgstr "或是，若我們想要的話，我們能夠指定只有一個 method 屬於交易性："

#. Tag: programlisting
#, no-c-format
msgid ""
"public class ShoppingCart {\n"
"   @Transactional public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Implementing interceptors"
msgstr "實做攔截器"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"That's great, but somewhere along the line we're going to have to actually "
"implement the interceptor that provides this transaction management aspect. "
"All we need to do is create a standard interceptor, and annotate it "
"<literal>@Interceptor</literal> and <literal>@Transactional</literal>."
msgstr ""
"我們必須在某個階段實際地實做提供此交易管理功能的攔截器。我們只需要建立一個標準的 EJB 攔截器並將它標記為 "
"<literal>@Interceptor</literal> 和 <literal>@Transactional</literal>。"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"   @AroundInvoke \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Interceptors can take advantage of dependency injection:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Interceptor\n"
"public class TransactionInterceptor {\n"
"\n"
"    @Resource UserTransaction transaction;\n"
"\n"
"    @AroundInvoke \n"
"    public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"    \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Multiple interceptors may use the same interceptor binding type."
msgstr "多個攔截器可能會使用相同的攔截器綁定類型。"

#. Tag: title
#, no-c-format
msgid "Enabling interceptors"
msgstr "啟用攔截器"

#. Tag: para
#, no-c-format
msgid ""
"By default, all interceptors are disabled. We need to "
"<emphasis>enable</emphasis> our interceptor in the "
"<literal>beans.xml</literal> descriptor of a bean archive. This activation "
"only applies to the beans in that archive."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&lt;beans\n"
"   xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"   xsi:schemaLocation=\"\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd\"&gt;\n"
"   &lt;interceptors&gt;\n"
"      &lt;class&gt;org.mycompany.myapp.TransactionInterceptor&lt;/class&gt;\n"
"   &lt;/interceptors&gt;\n"
"&lt;/beans&gt;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Whoah! Why the angle bracket stew?"
msgstr "為何會有尖括弧？"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Well, having the XML declaration is actually a <emphasis>good "
"thing</emphasis>. It solves two problems:"
msgstr "XML 宣告可解決兩項問題："

#. Tag: para
#, no-c-format
msgid ""
"it enables us to specify a total ordering for all the interceptors in our "
"system, ensuring deterministic behavior, and"
msgstr "它可讓我們為我們系統中的所有攔截器指定全排序（total ordering），並確保決定型的特性，並且"

#. Tag: para
#, no-c-format
msgid "it lets us enable or disable interceptor classes at deployment time."
msgstr "它讓我們能夠在進行建置時啟用或停用攔截器 class。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For example, we could specify that our security interceptor runs before our "
"transaction interceptor."
msgstr ""
"比方說，我們能夠指定我們的安全性攔截器能比我們的 <literal>TransactionInterceptor</literal> 還要早執行。"

#. Tag: programlisting
#, no-c-format
msgid ""
"&lt;beans\n"
"   xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"   xsi:schemaLocation=\"\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd\"&gt;\n"
"   &lt;interceptors&gt;\n"
"      &lt;class&gt;org.mycompany.myapp.SecurityInterceptor&lt;/class&gt;\n"
"      &lt;class&gt;org.mycompany.myapp.TransactionInterceptor&lt;/class&gt;\n"
"   &lt;/interceptors&gt;\n"
"&lt;/beans&gt;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Or we could turn them both off in our test environment by simply not "
"mentioning them in <literal>beans.xml</literal>! Ah, so simple."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Interceptor bindings with members"
msgstr "與成員綁定的攔截器"

#. Tag: para
#, no-c-format
msgid ""
"Suppose we want to add some extra information to our "
"<literal>@Transactional</literal> annotation:"
msgstr "假設我們希望新增一些額外的資訊至我們的 <literal>@Transactional</literal> 標記中："

#. Tag: programlisting
#, no-c-format
msgid ""
"@InterceptorBinding\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Transactional {\n"
"   boolean requiresNew() default false;\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"CDI will use the value of <literal>requiresNew</literal> to choose between "
"two different interceptors, <literal>TransactionInterceptor</literal> and "
"<literal>RequiresNewTransactionInterceptor</literal>."
msgstr ""
"Web Bean 將會使用 <literal>requiresNew</literal> "
"的值來在兩個不同的攔截器（<literal>TransactionInterceptor</literal> 與 "
"<literal>RequiresNewTransactionInterceptor</literal>）之間作選擇。"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional(requiresNew = true) @Interceptor\n"
"public class RequiresNewTransactionInterceptor {\n"
"   @AroundInvoke \n"
"   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now we can use <literal>RequiresNewTransactionInterceptor</literal> like "
"this:"
msgstr "現在我們可如下使用 <literal>RequiresNewTransactionInterceptor</literal>："

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional(requiresNew = true)\n"
"public class ShoppingCart { ... }"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"But what if we only have one interceptor and we want the container to ignore"
" the value of <literal>requiresNew</literal> when binding interceptors? "
"Perhaps this information is only useful for the interceptor implementation. "
"We can use the <literal>@Nonbinding</literal> annotation:"
msgstr ""
"當綁定攔截器時，若我們只有一個攔截器而我們希望管理員忽略 <literal>requiresNew</literal> 的值時該怎麼辦呢？這時我們可使用"
" <literal>@NonBinding</literal> 標記："

#. Tag: programlisting
#, no-c-format
msgid ""
"@InterceptorBinding\n"
"@Target({METHOD, TYPE})\n"
"@Retention(RUNTIME)\n"
"public @interface Secure {\n"
"   @Nonbinding String[] rolesAllowed() default {};\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Multiple interceptor binding annotations"
msgstr "多重攔截器綁定標記"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Usually we use combinations of interceptor bindings types to bind multiple "
"interceptors to a bean. For example, the following declaration would be used"
" to bind <literal>TransactionInterceptor</literal> and "
"<literal>SecurityInterceptor</literal> to the same bean:"
msgstr ""
"通常，我們會使用不同攔截器綁定類型的組合來將多重攔截器綁定至 Web Bean。比方說，下列宣告會被用來將 "
"<literal>TransactionInterceptor</literal> 和 "
"<literal>SecurityInterceptor</literal> 綁定至相同的 Web Bean："

#. Tag: programlisting
#, no-c-format
msgid ""
"@Secure(rolesAllowed=\"admin\") @Transactional\n"
"public class ShoppingCart { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"However, in very complex cases, an interceptor itself may specify some "
"combination of interceptor binding types:"
msgstr "不過，在非常複雜的情況下，攔截器本身會指定一些攔截器綁定類型的組合："

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Secure @Interceptor\n"
"public class TransactionalSecureInterceptor { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Then this interceptor could be bound to the <literal>checkout()</literal> "
"method using any one of the following combinations:"
msgstr "然後這個攔截器便可透過使用下列任何一個組合來綁定至 <literal>checkout()</literal> 這個 method："

#. Tag: programlisting
#, no-c-format
msgid ""
"public class ShoppingCart {\n"
"   @Transactional @Secure public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Secure\n"
"public class ShoppingCart {\n"
"   @Transactional public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional\n"
"public class ShoppingCart {\n"
"   @Secure public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Secure\n"
"public class ShoppingCart {\n"
"   public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Interceptor binding type inheritance"
msgstr "攔截器綁定類型的 inheritance"

#. Tag: para
#, no-c-format
msgid ""
"One limitation of the Java language support for annotations is the lack of "
"annotation inheritance. Really, annotations should have reuse built in, to "
"allow this kind of thing to work:"
msgstr ""
"Java 語言對於標記上的支援有個限制，那就是缺少了標記的 inheritance。實際上，標記應該要內建 reuse，以便允許這類型的功能有效："

#. Tag: programlisting
#, no-c-format
msgid "public @interface Action extends Transactional, Secure { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Well, fortunately, CDI works around this missing feature of Java. We may "
"annotate one interceptor binding type with other interceptor binding types "
"(termed a <emphasis>meta-annotation</emphasis>). The interceptor bindings "
"are transitive &mdash; any bean with the first interceptor binding inherits "
"the interceptor bindings declared as meta-annotations."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Transactional @Secure\n"
"@InterceptorBinding\n"
"@Target(TYPE)\n"
"@Retention(RUNTIME)\n"
"public @interface Action { ... }"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Now, any bean annotated <literal>@Action</literal> will be bound to both "
"<literal>TransactionInterceptor</literal> and "
"<literal>SecurityInterceptor</literal>. (And even "
"<literal>TransactionalSecureInterceptor</literal>, if it exists.)"
msgstr ""
"任何標記為 <literal>@Action</literal> 的 Web Bean 都會被綁定至 "
"<literal>TransactionInterceptor</literal> 和 "
"<literal>SecurityInterceptor</literal>。（甚至是 "
"<literal>TransactionalSecureInterceptor</literal>，若它存在的話。）"

#. Tag: title
#, no-c-format
msgid "Use of <literal>@Interceptors</literal>"
msgstr "使用 <literal>@Interceptors</literal>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>@Interceptors</literal> annotation defined by the interceptor "
"specification (and used by the managed bean and EJB specifications) is still"
" supported in CDI."
msgstr ""
"企業級與基本的 Web Bean 皆支援 EJB 規格所定義的 <literal>@Interceptors</literal> 標記，例如："

#. Tag: programlisting
#, no-c-format
msgid ""
"@Interceptors({TransactionInterceptor.class, SecurityInterceptor.class})\n"
"public class ShoppingCart {\n"
"   public void checkout() { ... }\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "However, this approach suffers the following drawbacks:"
msgstr "不過，這個方式有下列缺點："

#. Tag: para
#, no-c-format
msgid "the interceptor implementation is hardcoded in business code,"
msgstr "攔截器的實做會被 hardcode 在 business code 之中、"

#. Tag: para
#, no-c-format
msgid "interceptors may not be easily disabled at deployment time, and"
msgstr "攔截器無法在進行建置時輕易地被停用，以及"

#. Tag: para
#, no-c-format
msgid ""
"the interceptor ordering is non-global &mdash; it is determined by the order"
" in which interceptors are listed at the class level."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "Therefore, we recommend the use of CDI-style interceptor bindings."
msgstr "因此，我們建議使用 Web Bean 形式的攔截器綁定。"
