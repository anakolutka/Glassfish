<project default="all"
    xmlns:maven="jelly:maven"
    xmlns:j="jelly:core"
    xmlns:define="jelly:define"
    xmlns:util="jelly:util"
    xmlns:i="jelly:interaction"
    xmlns:http="jelly:http"
    xmlns:ant="jelly:ant">
<!--
 The contents of this file are subject to the terms 
 of the Common Development and Distribution License 
 (the "License").  You may not use this file except 
 in compliance with the License.
 
 You can obtain a copy of the license at 
 glassfish/bootstrap/legal/CDDLv1.0.txt or 
 https://glassfish.dev.java.net/public/CDDLv1.0.html. 
 See the License for the specific language governing 
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL 
 HEADER in each file and include the License file at 
 glassfish/bootstrap/legal/CDDLv1.0.txt.  If applicable, 
 add the following below this CDDL HEADER, with the 
 fields enclosed by brackets "[]" replaced with your 
 own identifying information: Portions Copyright [yyyy] 
 [name of copyright owner]
-->
    
    <goal name="all">
        <attainGoal name="bootstrap"/>
        <attainGoal name="build"/>
        <attainGoal name="configure-runtime"/>
    </goal>


    <!-- Explode Glassfish installation image under the glassfish.home folder-->
    <goal name="bootstrap">
        <ant:mkdir dir="${glassfish.home}"/>
        <ant:unzip src="${maven.repo.local}/${glassfish.image.name}/jars/${glassfish.jar}" dest="${glassfish.home}"/>
    </goal>

    <!-- Bootstrap binaries required for building from source-->
    <goal name="bootstrap-all">
        <maven:reactor basedir="."
               includes="**/project-src.xml"
               banner="Downloading binaries for building from source project"
               ignoreFailures="false"/>
    </goal>

    <postGoal name="bootstrap-all">
        <ant:ant dir="." target="post-bootstrap"/>
    </postGoal>

    <!-- Browse source module and invoke ant all -->
    <goal name="build">
        <ant:echo>------------------------------</ant:echo>
        <ant:echo>- Building GlassFish modules -</ant:echo>
        <ant:echo>------------------------------</ant:echo>
        <j:if test="${modules == null}">
            <j:set var="modules" value="${glassfish.build.dependecy.order}"/>
        </j:if>

        <j:set var="modules.build" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.build}
        </util:tokenize>
        <j:set var="path" value="${glassfish.root}/${glassfish.cvs.project}"/>
        <j:forEach var="module" items="${modulesList}">
            <util:available file="${path}/${module}">
                <j:set var="module.dir" value="${path}/${module}"/>
                <j:set var="glassfish.module.name" value="${module}"/>
                <attainGoal name="invoke-ant"/>
            </util:available>
        </j:forEach>
    </goal>

    <!-- Checkout every module -->
    <goal name="checkout">
        <ant:echo>---------------------------------</ant:echo>
        <ant:echo>- Checking out java.net modules -</ant:echo>
        <ant:echo>---------------------------------</ant:echo>

        <ant:echo>Checking out from source: ${module}</ant:echo>
        <ant:cvs cvsRoot="${glassfish.cvsroot}"
                 tag="${glassfish.cvstag}"
                 failonerror="true"
                 package="${glassfish.cvs.project}/${glassfish.cvs.module}"
                 dest="${glassfish.root}"/>
        <attainGoal name="checkout-glassfish"/>
    </goal>

    <!-- Checkout every module -->
    <goal name="checkout-glassfish">
        <ant:echo>----------------------------------</ant:echo>
        <ant:echo>- Checking out GlassFish modules -</ant:echo>
        <ant:echo>----------------------------------</ant:echo>
        <j:if test="${modules == null}">
            <j:set var="modules" value="${glassfish.build.dependecy.order}"/>
        </j:if>

        <j:set var="modules.checkout" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.checkout}
        </util:tokenize>

        <j:forEach var="module" items="${modulesList}">
            <j:choose>
                <j:when test="${context.getVariable('glassfish.build.dependecy.order').contains(context.getVariable('module'))}">
                    <ant:echo>Checking out from source: ${module}</ant:echo>
                    <ant:cvs cvsRoot="${glassfish.cvsroot}" 
                             tag="${glassfish.cvstag}"
                             package="${glassfish.cvs.project}/${module}"
                             failonerror="true"
                             dest="${glassfish.root}"/>
                </j:when>
                <j:otherwise>
                    <ant:echo>WARNING: Invalid CVS module: ${module}</ant:echo>
                </j:otherwise>
            </j:choose>
        </j:forEach>
    </goal>


    <!-- Browse source module and invoke ant clean -->
    <goal name="clean">
        <j:if test="${modules == null}">
            <j:set var="modules" value="${glassfish.build.dependecy.order}"/>
        </j:if>

        <j:set var="modules.build" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.build}
        </util:tokenize>
        <j:set var="path" value="${glassfish.root}/${glassfish.cvs.project}"/>
        <j:forEach var="module" items="${modulesList}">
            <util:available file="${path}/${module}">
                <j:set var="module.dir" value="${path}/${module}"/>
                <j:set var="glassfish.module.name" value="${module}"/>
                <j:set var="ant.target" value="clean"/>
                <attainGoal name="invoke-ant"/>
            </util:available>
        </j:forEach>
    </goal>


    <!-- Configure the server image based on project.properties -->
    <goal name="configure-runtime">

        <j:set var="adminUser" value="admin"/>
        <j:set var="adminPassword" value="adminadmin"/>
        <j:set var="adminPort" value="4848"/>
        <j:set var="httpPort" value="8080"/>
        <j:set var="httpsPort" value="1043"/>

        <j:choose>
            <j:when test="${interactive != null}">
                <ant:echo>Supply the admin user's password and override any of the other initial configuration settings as necessary.</ant:echo>
                <i:ask question="Admin User:" default="admin" answer="adminUser"/>
                <j:if test="${empty(adminUser)}">
                    <j:set var="adminUser" value="admin"/>
                </j:if>
                
                <i:ask question="Admin User's Password (8 chars minimum):" answer="adminPassword"/>
                <i:ask question="Re-enter Password:" answer="adminPassword2"/>
                <j:if test="${adminPassword != adminPassword2}">
                    <ant:fail>#### Passwords do not match.  ####</ant:fail>
                </j:if>

                <i:ask question="Admin Port" default="4848" answer="adminPort"/>

                <j:catch var="exception">
                    <http:get uri="http://localhost:${adminPort}"/>
                </j:catch>    

                <j:if test="${exception == null}">
                    <ant:fail>#### Admin Port in use  ####</ant:fail>
                </j:if>

                <i:ask question="HTTP Port" default="8080" answer="httpPort"/>

                <j:catch var="exception">
                    <http:get uri="http://localhost:${httpPort}"/>
                </j:catch>    

                <j:if test="${exception == null}">
                    <ant:fail>#### HTTP Port in use  ####</ant:fail>
                </j:if>

                <i:ask question="HTTPS Port" default="1043" answer="httpsPort"/>

                <j:catch var="exception">
                    <http:get uri="http://localhost:${httpsPort}"/>
                </j:catch>    

                <j:if test="${exception == null}">
                    <ant:fail>#### HTTPS Port in use  ####</ant:fail>
                </j:if>
                <ant:echo>Please wait while configuring....</ant:echo>
            </j:when>
        </j:choose>
        
        <ant:ant dir="${glassfish.home}" antfile="setup.xml" target="all">
            <property name="admin.user" value="${adminUser}"/>
            <property name="admin.password" value="${adminPassword}"/>
            <property name="admin.port" value="${adminPort}"/>
            <property name="instance.port" value="${httpPort}"/>
            <property name="https.port" value="${httpsPort}"/>
        </ant:ant>
    </goal>
  

    <!-- Delete the GlassFish image completely -->
    <goal name="clobber">
        <ant:echo>Deleting Glassfish Image under ${glassfish.home} </ant:echo>
        <ant:delete dir="${glassfish.home}"/>
    </goal>


    <!-- Cleanup the domains in server image -->
    <goal name="clean-config">
        <ant:ant dir="${glassfish.home}" antfile="setup.xml" target="clean-runtime">
        </ant:ant>
    </goal>


    <goal name="create-pe-snapshot">
        <ant:echo>Creating Glassfish SNAPSHOT under ${glassfish.home}/.. </ant:echo>
        <ant:jar jarfile="${glassfish.home}/../glassfish-image-SNAPSHOT.jar">
            <fileset dir="${glassfish.home}">
                <exclude name="samples/**"/>
                <include name="**"/>
            </fileset>
        </ant:jar>
    </goal>


    <!-- When invoking ant:ant, ant's task rmic and xslt are broken due to
         a null classloader. This will only be fixed in Maven 2.0, so 
         below is a workaround -->
    <goal name="invoke-ant" description="execute ant">
        <j:set var="log.name" value="${glassfish.module.name}.log"/>
        <ant:delete file="${log.name}" failonerror="false"/>
        <j:catch>
            <ant:record name="${log.name}" loglevel="verbose" action="start"/>
        </j:catch>

        <java classname="org.apache.tools.ant.Main" fork="true" failonerror="false" maxmemory="128M">
            <classpath>
                <fileset dir="${glassfish.home}/lib/ant/lib">
                    <include name="*.jar" />
                </fileset>
                <pathelement path="${java.home}/../lib/tools.jar" />
            </classpath>
            <sysproperty key="ant.home" value="${glassfish.home}/lib/ant" />
            <arg line="-f ${module.dir}/build.xml -Dglassfish.maven=${glassfish.maven} -Dglassfish.home=${glassfish.home} ${ant.target}" />
        </java>
        
        <!-- If an error occured, make sure we reports it -->
        <j:catch>
            <util:loadText var="logs" file="${log.name}"/>
        </j:catch>

        <!-- Check for build failure -->
        <j:if test="${logs.contains('BUILD FAILED')}">
            <j:choose>
                <j:when test="${logs.contains('Unable to rename')}">
                    <j:invokeStatic className="java.lang.System" method="gc"/>
                    <attainGoal name="win32lock"/>
                </j:when>
                <j:otherwise>
                    <fail/>
                </j:otherwise>
            </j:choose>
        </j:if>
        <j:catch>
            <ant:record name="${log.name}" action="stop"/>
        </j:catch>
    </goal>


    <!-- On Windows, file locking is intermitently occuring,
         preventing the build of some modules (jar locking).
         Below is a workaround that sleep 30 seconds and then
         try again
    -->
    <goal name="win32lock">
        <!-- Ask the VM to free the lock -->
        <j:invokeStatic className="java.lang.System" method="gc"/>
        <j:forEach var="i" begin="1" end="5" varStatus="status">
            <j:if test="${logs.contains('BUILD SUCCESSFUL')}">
                <j:break/> 
            </j:if>
            <ant:echo> Sleeping 5 seconds to clean and wait for files to unlock</ant:echo>
            <j:invokeStatic className="java.lang.System" method="gc"/>
            <ant:sleep seconds="5"/>
            <j:invokeStatic className="java.lang.System" method="gc"/>
            <attainGoal name="invoke-ant"/>
            <util:loadText var="logs" file="${log.name}"/>
        </j:forEach>
        
        <j:if test="${!logs.contains('BUILD SUCCESSFUL')}">
            <fail/>
        </j:if>
    </goal>
</project>
