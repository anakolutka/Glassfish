# translation of example.po to Korean
# Language ko-KR translations for Introduction_to_Web_Beans package.
#
# Automatically generated, 2009.
# Eunju Kim <eukim@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: example\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-07-25T03:52:14\n"
"PO-Revision-Date: 2009-01-14 15:00+1000\n"
"Last-Translator: Eunju Kim <eukim@redhat.com>\n"
"Language-Team: Korean <ko@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"
"Plural-Forms:  nplurals=2; plural=(n!=1);\n"
"\n"
"\n"
"\n"
"\n"
"\n"

#. Tag: title
#, no-c-format
msgid "JSF web application example"
msgstr "JSF 웹 애플리케이션 예 "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Let's illustrate these ideas with a full example. We're going to implement "
"user login/logout for an application that uses JSF. First, we'll define a "
"request-scoped bean to hold the username and password entered during login, "
"with constraints defined using annotations from the Bean Validation "
"specification:"
msgstr ""
"이러한 웹 애플리케이션의 예를 살펴봅시다. JSF를 사용하는 애플리케이션의 사용"
"자 로그인/로그아웃을 구현할 것입니다. 먼저, 로그인시 입력한 사용자 이름 및 암"
"호를 보유하기 위해 Web Bean을 정의합니다: "

#. Tag: para
#, fuzzy, no-c-format
msgid "This bean is bound to the login prompt in the following JSF form:"
msgstr "Web Bean은 다음과 같은 JSF 형식에서 로그인 프롬프트로 바운딩됩니다: "

#. Tag: para
#, no-c-format
msgid "Users are represented by a JPA entity:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"(Note that we're also going to need a <literal>persistence.xml</literal> "
"file to configure the JPA persistence unit containing <literal>User</"
"literal>.)"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The actual work is done by a session-scoped bean that maintains information "
"about the currently logged-in user and exposes the <literal>User</literal> "
"entity to other beans:"
msgstr ""
"현재 로그인 사용자에 관한 정보를 관리하는 Web Bean 세션 범위에 의해 실제 작업"
"이 완료되어 다른 Web Beans에 <literal>User</literal> 엔티티를 노출시킵니다:  "

#. Tag: para
#, no-c-format
msgid ""
"<literal>@LoggedIn</literal> and <literal>@UserDatabase</literal> are custom "
"qualifier annotations:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"We need an adaptor bean to expose our typesafe <literal>EntityManager</"
"literal>:"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Now <literal>DocumentEditor</literal>, or any other bean, can easily inject "
"the current user:"
msgstr "기타 다른 Web Bean은 현재 사용자를 쉽게 삽입할 수 있습니다:  "

#. Tag: para
#, no-c-format
msgid "Or we can reference the current user in a JSF view:"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Hopefully, this example gave you a taste of the CDI programming model. In "
"the next chapter, we'll explore dependency injection in greater depth."
msgstr ""
"이러한 예가 Web Bean 프로그래밍 모델의 맛을 보는 계기가 되었으면 합니다. 다"
"음 부분에서는 Web Beans 의존성 삽입에 대해 자세히 살펴보겠습니다. "

#, fuzzy
#~ msgid ""
#~ "<![CDATA[@Named @RequestScoped\n"
#~ "public class Credentials {\n"
#~ "    private String username;\n"
#~ "    private String password;\n"
#~ "    \n"
#~ "    @NotNull @Length(min=3, max=25)\n"
#~ "    public String getUsername() { return username; }\n"
#~ "    public void setUsername(String username) { this.username = "
#~ "username; }\n"
#~ "    \n"
#~ "    @NotNull @Length(min=6, max=20)\n"
#~ "    public String getPassword() { return password; }\n"
#~ "    public void setPassword(String password) { this.password = "
#~ "password; }\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[@Named @RequestScoped\n"
#~ "public class Credentials {\n"
#~ "        \n"
#~ "    private String username;\n"
#~ "    private String password;\n"
#~ "    \n"
#~ "    public String getUsername() { return username; }\n"
#~ "    public void setUsername(String username) { this.username = "
#~ "username; }\n"
#~ "    \n"
#~ "    public String getPassword() { return password; }\n"
#~ "    public void setPassword(String password) { this.password = "
#~ "password; }\n"
#~ "    \n"
#~ "}]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<h:form>\n"
#~ "   <h:panelGrid columns=\"2\" rendered=\"#{!login.loggedIn}\">\n"
#~ "      <f:validateBean>\n"
#~ "         <h:outputLabel for=\"username\">Username:</h:outputLabel>\n"
#~ "         <h:inputText id=\"username\" value=\"#{credentials.username}\"/"
#~ ">\n"
#~ "         <h:outputLabel for=\"password\">Password:</h:outputLabel>\n"
#~ "         <h:inputText id=\"password\" value=\"#{credentials.password}\"/"
#~ ">\n"
#~ "      </f:validateBean>\n"
#~ "   </h:panelGrid>\n"
#~ "   <h:commandButton value=\"Login\" action=\"#{login.login}\" rendered=\"#"
#~ "{!login.loggedIn}\"/>\n"
#~ "   <h:commandButton value=\"Logout\" action=\"#{login.logout}\" rendered="
#~ "\"#{login.loggedIn}\"/>\n"
#~ "</h:form>]]>"
#~ msgstr ""
#~ "<![CDATA[<h:form>\n"
#~ "    <h:panelGrid columns=\"2\" rendered=\"#{!login.loggedIn}\">\n"
#~ "        <h:outputLabel for=\"username\">Username:</h:outputLabel>\n"
#~ "        <h:inputText id=\"username\" value=\"#{credentials.username}\"/>\n"
#~ "        <h:outputLabel for=\"password\">Password:</h:outputLabel>\n"
#~ "        <h:inputText id=\"password\" value=\"#{credentials.password}\"/>\n"
#~ "    </h:panelGrid>\n"
#~ "    <h:commandButton value=\"Login\" action=\"#{login.login}\" rendered="
#~ "\"#{!login.loggedIn}\"/>\n"
#~ "    <h:commandButton value=\"Logout\" acion=\"#{login.logout}\" rendered="
#~ "\"#{login.loggedIn}\"/>\n"
#~ "</h:form>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[@Entity\n"
#~ "public class User {\n"
#~ "   private @NotNull @Length(min=3, max=25) @Id String username;\n"
#~ "   private @NotNull @Length(min=6, max=20) String password;\n"
#~ "   \n"
#~ "   public String getUsername() { return username; }\n"
#~ "   public void setUsername(String username) { this.username = "
#~ "username; }\n"
#~ "   public String setPassword(String password) { this.password = "
#~ "password; }\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[@Named @RequestScoped\n"
#~ "public class Credentials {\n"
#~ "        \n"
#~ "    private String username;\n"
#~ "    private String password;\n"
#~ "    \n"
#~ "    public String getUsername() { return username; }\n"
#~ "    public void setUsername(String username) { this.username = "
#~ "username; }\n"
#~ "    \n"
#~ "    public String getPassword() { return password; }\n"
#~ "    public void setPassword(String password) { this.password = "
#~ "password; }\n"
#~ "    \n"
#~ "}]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[@SessionScoped @Named\n"
#~ "public class Login implements Serializable {\n"
#~ "\n"
#~ "   @Inject Credentials credentials;\n"
#~ "   @Inject @UserDatabase EntityManager userDatabase;\n"
#~ "\n"
#~ "   private User user;\n"
#~ "    \n"
#~ "   public void login() {\n"
#~ "      List<User> results = userDatabase.createQuery(\n"
#~ "         \"select u from User u where u.username = :username and u."
#~ "password = :password\")\n"
#~ "         .setParameter(\"username\", credentials.getUsername())\n"
#~ "         .setParameter(\"password\", credentials.getPassword())\n"
#~ "         .getResultList();\n"
#~ "        \n"
#~ "      if (!results.isEmpty()) {\n"
#~ "         user = results.get(0);\n"
#~ "      }\n"
#~ "      else {\n"
#~ "         // perhaps add code here to report a failed login\n"
#~ "      }\n"
#~ "   }\n"
#~ "    \n"
#~ "   public void logout() {\n"
#~ "      user = null;\n"
#~ "   }\n"
#~ "    \n"
#~ "   public boolean isLoggedIn() {\n"
#~ "      return user != null;\n"
#~ "   }\n"
#~ "    \n"
#~ "   @Produces @LoggedIn User getCurrentUser() {\n"
#~ "      return user;\n"
#~ "   }\n"
#~ "\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[@SessionScoped @Named\n"
#~ "public class Login {\n"
#~ "\n"
#~ "    @Current Credentials credentials;\n"
#~ "    @PersistenceContext EntityManager userDatabase;\n"
#~ "\n"
#~ "    private User user;\n"
#~ "    \n"
#~ "    public void login() {\n"
#~ "            \n"
#~ "        List<User> results = userDatabase.createQuery(\n"
#~ "           \"select u from User u where u.username=:username and u."
#~ "password=:password\")\n"
#~ "           .setParameter(\"username\", credentials.getUsername())\n"
#~ "           .setParameter(\"password\", credentials.getPassword())\n"
#~ "           .getResultList();\n"
#~ "        \n"
#~ "        if ( !results.isEmpty() ) {\n"
#~ "           user = results.get(0);\n"
#~ "        }\n"
#~ "        \n"
#~ "    }\n"
#~ "    \n"
#~ "    public void logout() {\n"
#~ "        user = null;\n"
#~ "    }\n"
#~ "    \n"
#~ "    public boolean isLoggedIn() {\n"
#~ "       return user!=null;\n"
#~ "    }\n"
#~ "    \n"
#~ "    @Produces @LoggedIn User getCurrentUser() {\n"
#~ "        return user;\n"
#~ "    }\n"
#~ "\n"
#~ "}]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[@Qualifier\n"
#~ "@Retention(RUNTIME)\n"
#~ "@Target({TYPE, METHOD, PARAMETER, FIELD})\n"
#~ "public @interface LoggedIn {}]]>"
#~ msgstr ""
#~ "<![CDATA[@Retention(RUNTIME)\n"
#~ "@Target({TYPE, METHOD, FIELD})\n"
#~ "@BindingType\n"
#~ "public @interface LoggedIn {}]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[@Qualifier\n"
#~ "@Retention(RUNTIME)\n"
#~ "@Target({METHOD, PARAMETER, FIELD})\n"
#~ "public @interface UserDatabase {}]]>"
#~ msgstr ""
#~ "<![CDATA[@Retention(RUNTIME)\n"
#~ "@Target({TYPE, METHOD, FIELD})\n"
#~ "@BindingType\n"
#~ "public @interface LoggedIn {}]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[public class DocumentEditor {\n"
#~ "   @Inject Document document;\n"
#~ "   @Inject @LoggedIn User currentUser;\n"
#~ "   @Inject @DocumentDatabase EntityManager docDatabase;\n"
#~ "    \n"
#~ "   public void save() {\n"
#~ "      document.setCreatedBy(currentUser);\n"
#~ "      docDatabase.persist(document);\n"
#~ "   }\n"
#~ "}]]>"
#~ msgstr ""
#~ "<![CDATA[public class DocumentEditor {\n"
#~ "\n"
#~ "    @Current Document document;\n"
#~ "    @LoggedIn User currentUser;\n"
#~ "    @PersistenceContext EntityManager docDatabase;\n"
#~ "    \n"
#~ "    public void save() {\n"
#~ "        document.setCreatedBy(currentUser);\n"
#~ "        docDatabase.persist(document);\n"
#~ "    }\n"
#~ "    \n"
#~ "}]]>"

#~ msgid "Of course, <literal>@LoggedIn</literal> is a binding annotation:"
#~ msgstr "<literal>@LoggedIn</literal>은 바인딩 어노테이션입니다: "
