<?xml version="1.0" encoding="UTF-8"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<!-- Written to assume that classpath is rooted in the current directory. -->
<!-- So this should be OK if you make this script in the root of a filesystem. -->
<!-- If not, you may prefer to adjust the basedir, or move some directories around. -->
<!-- The idea is that both Ant and NetBeans have to know what the package root is -->
<!-- for the classes in your application. -->

<!-- The higher level build.xml will call either zipFroWin or zipForSolaris -->
<!-- to create the assemblytool.zip file for targeted platform. -->

<project basedir="../../../../../../" default="assemblyjar" name="assembly tool"> 


        <property name="DEBUG_OBJ" value="JDK1.4_DBG.OBJ" />
        <property name="OPT_OBJ" value="JDK1.4_OPT.OBJ" />
        
        <!-- defind buildroot and  JARS -->
        <property name="buildroot" value="AT_buildroot"/>
        
        <!-- define if OBJS to either DEBUG_OBJ or OPT_OBJ -->
        <property name="OBJS" value="${DEBUG_OBJ}" />
      
        <!-- JARS should be the directory that contains the appserv-*.jar which are needed during compilation. -->
        <!-- the directory is relative to the basedir -->
        <property name="JARS" value="../../build/${OBJS}/jars" />
        
        <!-- additional jars needed for compilation -->
        <property name="HELP_JAR"    value ="../../external/iplanet/${OBJS}/jhall.jar" />
        <property name="MAILAPI_JAR" value ="../../external/javax/${OBJS}/mailapi1_2.jar"/>
        <property name="SCHEMA2BEANS_JAR" value="../../external/Netbeans/lib/schema2beans.jar" />
        
        
        <property name="jarname" value="appserv-assemblytool.jar" />
        <property name="build.builddir" value="${buildroot}/build"/>
        <property name="build.package" value="${buildroot}/package"/>
        <property name="build.package.assemblyjar" value="${build.package}/assemblyjar"/>
        <property name="build.ship" value="${buildroot}/ship"/>
        <property name="build.ship.temp" value="${build.ship}/temp"/>
        <property name="build.make" value="com/sun/enterprise/tools/deployment/main/make"/>
        <property name="build.ship.assemblytool_w2k" value="${build.package}/assemblytool_w2k.zip"/>
        <property name="build.ship.assemblytool_sol" value="${build.package}/assemblytool_solaris.zip"/>
        <property name="assemblyjar" value="${build.package.assemblyjar}/${jarname}"/>
     
    <target name="init">
        <!-- You can set up any variables you want used throughout the script here. -->
        <tstamp/>
        <property name="done" value="assemblytool build complete. Please see ${build.package}"/>
        <mkdir dir="${build.builddir}"/>
        <mkdir dir="${build.package}"/>
        <mkdir dir="${build.package.assemblyjar}"/>
        <mkdir dir="${build.ship}"/>
        
        <!-- To use e.g. Jikes, uncomment this line. -->
        <!-- (Or make the same change in Tools | Options | Ant Settings | Properties.) -->
        <!-- <property name="build.compiler" value="jikes"/> -->
        <!-- You might like to set up some overridable paths, etc.: -->
        <!-- <property name="mylib" value="../lib/mylib.jar"/> -->
    </target>
    
    <target depends="init" name="compile">
        <!-- Both srcdir and destdir should be package roots. -->
        <!-- They could be different of course; in that case NetBeans can also be set -->
        <!-- up to compile to a different filesystem in the same way; see Compiler Types: -->
        
        <javac debug="true" deprecation="true" destdir="${build.builddir}" srcdir="." 
                excludesfile="${build.make}/javac.excl"  source="1.4"  >
                <include name="com/sun/enterprise/tools/deployment/**"/>
                <include name="com/sun/enterprise/deployment/**"/>
                <include name="com/iplanet/ias/deployment/Utils.java"/>
            <classpath>
                <pathelement location="${JARS}/appserv-rt.jar"/>
                <pathelement location="${JARS}/javaee.jar"/>
                <pathelement location="${JARS}/appserv-ext.jar"/>
                <pathelement location="${JARS}/appserv-cmp.jar"/>
                <pathelement location="${JARS}/appserv-admin.jar"/>
                
                <pathelement location="${HELP_JAR}"/>
                <pathelement location="${SCHEMA2BEANS_JAR}"/>
                <pathelement location="${MAILAPI_JAR}"/>
            </classpath>
            </javac>
    </target>

    
    <!-- Copy resource files to the build area -->
    <target depends="init" name="copyprop" >
        <copy todir="${build.builddir}" >
            <fileset dir="." includesfile="${build.make}/prop.incl"/>
        </copy>
    </target>
    
    <target depends="init,compile, copyprop" name="assemblyjar">
        <jar basedir="${build.builddir}" compress="true" excludesfile="${build.make}/javac.excl"  jarfile="${assemblyjar}" >
            <fileset dir="${build.builddir}">
                <include name="com/iplanet/ias/deployment/Utils.class"/>
                <include name="com/sun/enterprise/tools/deployment/ui/**"/>
                <include name="com/sun/enterprise/tools/deployment/main/**"/>
            </fileset>
        </jar>
    </target>
  
    <target depends="assemblyjar"  name="prepareForZip" >
        <delete dir="${build.ship.temp}" />
        <mkdir dir="${build.ship.temp}" />
        <mkdir dir="${build.ship.temp}/bin" />
        <mkdir dir="${build.ship.temp}/lib" />
        <copy file="${build.make}/deployhelp.jar" todir="${build.ship.temp}/lib"/>
        <copy file="${assemblyjar}" todir="${build.ship.temp}/lib"/>
    </target>
    
    <target depends="prepareForZip"  name="zipForSolaris" >
        <delete file="${build.ship.temp}/bin/assemblytool.bat" />
        <copy file="${build.make}/assemblytool" todir="${build.ship.temp}/bin"/>
        <zip zipfile="${build.ship.assemblytool_sol}" basedir="${build.ship.temp}" />
        <echo message="zipForSolaris done.  check ${build.ship.assemblytool_sol}" />
    </target>
    
    
    <!--target depends="prepareForZip"  name="zipForW2k" -->
    <target depends="prepareForZip"  name="zipForW2k" >
        <delete file="${build.ship.temp}/bin/assemblytool" />
        <copy file="${build.make}/assemblytool.bat" todir="${build.ship.temp}/bin"/>
        <zip zipfile="${build.ship.assemblytool_w2k}" basedir="${build.ship.temp}" />
        <echo message="zipForW2k done.  check ${build.ship.assemblytool_w2k}" />
    </target>
    
    
    <target depends="init" description="Clean all build products." name="clean">
        <delete dir="${build.builddir}" />
    </target>
    
    <target depends="zipForSolaris,zipForW2k" description="Build everything."  name="buildall" >
        <echo message="Built everything for both Solaris and  W2K."/>
    </target>

</project>
