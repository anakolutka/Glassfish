deploy(1)               Comandi secondari della utilit               deploy(1)

NOME
       deploy - distribuisce il componente specificato

SINTASSI
           deploy [--help]
           [--force={false|true}]
           [--virtualservers virtual_servers]
           [--contextroot context_root]
           [--precompilejsp={false|true}]
           [--verify={false|true}]
           [--name component_name]
           [--upload={true|false}]
           [--retrieve local_dirpath]
           [--dbvendorname dbvendorname]
           [--createtables={true|false}|--dropandcreatetables={true|false}]
           [--uniquetablenames={true|false}]
           [--deploymentplan deployment_plan]
           [--altdd alternate_deploymentdescriptor]
           [--runtimealtdd runtime_alternate_deploymentdescriptor]
           [--deploymentorder deployment_order]
           [--enabled={true|false}]
           [--generatermistubs={false|true}]
           [--availabilityenabled={false|true}]
           [--asyncreplication={true|false}]
           [--lbenabled={true|false}]
           [--keepstate={false|true}]
           [--libraries jar_file[,jar_file]*]
           [--target target]
           [--type pkg-type]
           [--properties(name=value)[:name=value]*]
           [file_archive|filepath]

DESCRIZIONE
       Il comando secondario deploy distribuisce le applicazioni nel server.
       Le applicazioni possono essere applicazioni enterprise, applicazioni
       Web, moduli Enterprise JavaBeans (EJB), moduli connettore e moduli
       client dell'applicazione. Se il componente esiste già o è già
       distribuito, la ridistribuzione viene forzata se l'opzione --force è
       impostata su true (il valore predefinito è false).

       Le opzioni --createtables e --dropandcreatetables sono flag booleani e
       accettano pertanto il valore true o false. Queste opzioni vengono
       utilizzate solo durante la distribuzione di bean con Persistenza
       gestita da contenitore che non sono stati mappati a un database (ovvero
       non è disponibile alcun descrittore sun-cmp-mappings.xml nella
       directory META-INF del modulo). Vengono ignorate negli altri casi.

       Le opzioni --createtables e --dropandcreatetables sono ad esclusione
       reciproca, pertanto è possibile utilizzare solo una delle due. Se il
       comando di rimozione e/o creazione delle tabelle non riesce, la
       distribuzione riesce, ma viene registrato un messaggio di avvertenza
       nel file di log.

       Questo comando secondario è supportato solo in modalità remota.

OPZIONI
       --help, -?
           Visualizza il testo della Guida per il comando secondario.

       --force
           Se si imposta true, il componente viene ridistribuito anche se è
           stato già distribuito o esiste già. Il valore predefinito è false.

       --virtualservers
           Uno o più ID di server virtuale. In caso di più ID, si usa la
           virgola come separatore.

       --contextroot
           Opzione valida solo se l'archivio è un modulo Web. Viene ignorata
           per gli altri tipi di archivio; l'impostazione predefinita è il
           nome file senza estensione.

       --precompilejsp
           Per impostazione predefinita, questa opzione non consente la
           precompilazione di pagine JSP durante la distribuzione. Le pagine
           JSP vengono compilate durante la fase di esecuzione. Il valore
           predefinito è false.

       --verify
           Se l'impostazione è true e i necessari package di verifica sono
           installati dallo strumento di aggiornamento, la sintassi e la
           semantica del descrittore di distribuzione vengono verificate. Il
           valore predefinito è false.

       --name
           Il nome del componente distribuibile.

           Il nome può includere un identificativo di versione opzionale, che
           segue il nome ed è separato dal nome mediante due punti (:).
           L'identificativo di versione deve iniziare con una lettera o un
           numero. Può contenere caratteri alfanumerici più caratteri di
           sottolineatura (_), lineette (-) e punti (.). Per ulteriori
           informazioni sulle versioni di moduli e applicazioni, vedere
           "Module and Application Versions" in Oracle GlassFish Server
           Application Deployment Guide.

       --upload
           Specifica se il comando secondario carica il file nel server DAS.
           Questa opzione può essere omessa nella maggior parte dei casi.

           Di seguito sono riportati i valori validi.

           false
               Il comando secondario non carica il file e tenta di accedervi
               tramite il nome file specificato. Se il server DAS non è in
               grado di accedere al file, il comando secondario non riesce.

               Ad esempio, il server DAS potrebbe essere in esecuzione come
               utente diverso dall'utente di amministrazione e non disporre
               dell'accesso di lettura al file. In questa situazione, il
               comando secondario non riesce se l'opzione --upload è impostata
               su false.

           true
               Il comando secondario carica il file nel server DAS utilizzando
               la connessione di rete.

           Il valore predefinito dipende da dove si trova il server DAS,
           ovvero sull'host nel quale viene eseguito il comando secondario
           oppure sull'host remoto.

           ·   Se il server DAS si trova sull'host nel quale viene eseguito il
               comando secondario, il valore predefinito è false.

           ·   Se il server DAS si trova su un host remoto, il valore
               predefinito è true.

           Se viene specificata una directory filepath, questa opzione viene
           ignorata.

       --retrieve
           Recupera il file JAR dello stub client dal computer server e lo
           inserisce nella directory locale.

       --dbvendorname
           Specifica il nome del fornitore del database per cui vengono create
           tabelle. I valori supportati includono db2, mssql, mysql, oracle,
           derby, javadb, postgresql e sybase. Questi valori non fanno
           distinzione tra maiuscole e minuscole. Se non viene specificato
           alcun valore, viene utilizzato il valore dell'attributo
           database-vendor-name in glassfish-ejb-jar.xml. Se non viene
           specificato alcun valore, viene stabilita una connessione alla
           risorsa specificata dall'elemento secondario jndi-name
           dell'elemento cmp-resource nel file glassfish-ejb-jar.xml e il nome
           del fornitore del database viene letto. Se non è possibile
           stabilire la connessione, o se il valore non viene riconosciuto, si
           presume la conformità a SQL-92.

       --createtables
           Se si specifica il valore true, le tabelle vengono create al
           momento della distribuzione di un'applicazione con bean CMP non
           mappati. Se si specifica false, le tabelle non vengono create. Se
           non viene specificato alcun valore, la creazione delle tabelle
           viene determinata dal valore della voce create-tables-at-deploy
           dell'elemento cmp-resource del file glassfish-ejb-jar.xml. Per le
           tabelle non viene creato alcun vincolo UNIQUE.

       --dropandcreatetables
           Se si specifica il valore true quando il componente viene
           ridistribuito, le tabelle create nella precedente distribuzione
           vengono eliminate prima della creazione delle nuove tabelle. Si
           applica alla distribuzione di applicazioni con bean CMP non
           mappati. Le tabelle preesistenti non vengono eliminate al momento
           della distribuzione iniziale di un'applicazione o di una
           distribuzione successiva all'annullamento esplicito di una
           distribuzione. Se si specifica false, le tabelle non vengono
           eliminate né create. Se non viene specificato alcun valore, le
           tabelle vengono eliminate se la voce drop-tables-at-undeploy
           dell'elemento cmp-resource del file glassfish-ejb-jar.xml è
           impostata su true e vengono create nuove tabelle se la voce
           create-tables-at-deploy dell'elemento cmp-resource del file
           glassfish-ejb-jar.xml è impostata su true.

       --uniquetablenames
           Garantisce nomi di tabella univoci per tutti i bean e determina
           l'aggiunta di un codice hash ai nomi delle tabelle. È utile nel
           caso di applicazioni con nomi bean che distinguono tra maiuscole e
           minuscole. Si applica alle applicazioni con bean CMP non mappati.

       --deploymentplan
           Distribuisce il piano di distribuzione, un file JAR contenente i
           descrittori di GlassFish Server. Specificare questa opzione per la
           distribuzione di un file EAR puro. Per file EAR puro si intende un
           file EAR senza descrittori di GlassFish Server.

       --altdd
           Distribuisce l'applicazione utilizzando il descrittore di
           distribuzione standard Java EE che risiede all'esterno
           dell'archivio dell'applicazione. Specificare il percorso assoluto o
           relativo del file del descrittore di distribuzione alternativo. Il
           descrittore di distribuzione alternativo sostituisce il descrittore
           di distribuzione di livello superiore all'interno di package
           nell'archivio. Ad esempio, per un file EAR, l'utilizzo dell'opzione
           --altdd comporta la sostituzione di application.xml. Per un modulo
           standalone, l'uso dell'opzione --altdd comporta la sostituzione del
           descrittore del modulo di livello superiore quale web.xml.

       --runtimealtdd
           Distribuisce l'applicazione utilizzando un descrittore di
           distribuzione runtime di GlassFish Server che risiede all'esterno
           dell'archivio dell'applicazione. Specificare il percorso assoluto o
           relativo del file del descrittore di distribuzione alternativo. Il
           descrittore di distribuzione alternativo sostituisce il descrittore
           di distribuzione di livello superiore all'interno di package
           nell'archivio. Ad esempio, per un file EAR, l'utilizzo dell'opzione
           --runtimealtdd comporta la sostituzione di
           glassfish-application.xml. Per un modulo standalone, l'uso
           dell'opzione --runtimealtdd comporta la sostituzione del
           descrittore del modulo di livello superiore quale
           glassfish-web.xml. Si applica solo ai descrittori di distribuzione
           di GlassFish Server (glassfish-*.xml); il nome del file del
           descrittore di distribuzione alternativo deve iniziare con
           glassfish-. Non si applica ai descrittori di distribuzione
           sun-*.xml, che non sono più validi.

       --deploymentorder
           Specifica l'ordine di distribuzione dell'applicazione. È utile se
           l'applicazione dispone di dipendenze e deve essere caricata secondo
           un ordine preciso all'avvio del server. L'ordine di distribuzione è
           rappresentato da un numero intero. Il valore predefinito è 100. Le
           applicazioni con numeri inferiori vengono caricate prima delle
           applicazioni con numeri superiori. Ad esempio, un'applicazione con
           il numero di ordine di distribuzione 102 viene caricata prima di
           un'applicazione con il numero di ordine di distribuzione 110. Se
           l'ordine di distribuzione non viene specificato, verrà assegnato
           l'ordine di distribuzione predefinito 100. Se due applicazioni
           dispongono dello stesso ordine di distribuzione, la prima
           applicazione da distribuire sarà la prima applicazione da caricare
           all'avvio del server.

           In genere l'ordine di distribuzione viene specificato alla prima
           distribuzione dell'applicazione, ma utilizzando il comando
           secondario set può essere specificato o modificato anche dopo la
           distribuzione iniziale. Pe visualizzare l'ordine di distribuzione
           di un'applicazione, eseguire il comando secondario get.

       --enabled
           Consente agli utenti di accedere all'applicazione. Se si imposta
           false, gli utenti non potranno accedere all'applicazione. Questa
           opzione abilita l'applicazione nell'istanza o nel cluster di
           destinazione specificati. Se la distribuzione viene eseguita nel
           dominio di destinazione, l'opzione viene ignorata, poiché in questo
           caso la distribuzione non avviene in un'istanza o in un cluster
           particolare. Il valore predefinito è true.

       --generatermistubs
           L'impostazione true determina la generazione di stub RMI-IIOP
           statici e il loro inserimento nel file client.jar. Se si imposta
           false, gli stub non vengono generati. Il valore predefinito è
           false.

       --availabilityenabled
           Questa opzione controlla se la funzione High Availability è
           abilitata per le sessioni Web e per la definizione di checkpoint e
           la passivazione potenziale dei bean di sessione con conservazione
           dello stato (SFSB). Se l'impostazione è false (predefinita), il
           salvataggio delle sessioni Web e la definizione di checkpoint SFSB
           vengono disabilitati per l'applicazione, l'applicazione Web o il
           modulo EJB specificato. Se l'impostazione è true, l'applicazione o
           il modulo specificato viene abilitato per la funzione High
           Availability. Impostare questa opzione su true solo se la funzione
           High Availability è configurata e abilitata ai livelli superiori,
           ad esempio a livello di server e di contenitore.

       --asyncreplication
           Questa opzione determina se la sessione Web e gli stati SFSB per
           cui è abilitata la funzione High Availability vengono prima
           memorizzati nel buffer e quindi replicati usando un thread
           asincrono separato. Se si imposta true (valore predefinito) le
           prestazioni migliorano, ma la disponibilità si riduce. Se l'istanza
           in cui gli stati sono memorizzati nel buffer ma non ancora
           replicati non riesce, gli stati vanno perduti. Se si imposta false,
           le prestazioni si riducono, ma la disponibilità è garantita. Gli
           stati non vengono memorizzati nel buffer, ma vengono immediatamente
           trasmessi alle altre istanze del cluster.

       --lbenabled
           Questa opzione determina se l'applicazione distribuita è
           disponibile per il bilanciamento del carico. Il valore predefinito
           è true.

       --keepstate
           Questa opzione controlla se le sessioni Web, le istanze SFSB e i
           timer EJB creati in modo persistente vengono conservati tra le
           ridistribuzioni.

           Il valore predefinito è false. È supportata solo nell'istanza
           server predefinita, denominata server. Non è supportata e viene
           ignorata per qualsiasi altra destinazione.

           Alcuni tipi di modifiche apportate a un'applicazione tra le
           ridistribuzioni impediscono a questa funzione di operare in modo
           corretto. Ad esempio, non modificare il set di variabili di istanza
           nella classe bean SFSB.

           Per le applicazioni Web, questa funzione è applicabile solo se nel
           file glassfish-web-app.xml l'attributo persistence-type
           dell'elemento session-manager è impostato su file.

           Per le istanze di bean di sessione con conservazione dello stato,
           il tipo di persistenza senza High Availability viene impostato nel
           server (attributo sfsb-persistence-type) e deve essere impostato su
           file, ovvero il valore predefinito e consigliato.

           Se un elemento attivo quale una sessione Web, un'istanza SFSB o un
           timer EJB non viene preservato o ripristinato, nessuno di tali
           elementi sarà disponibile una volta completata la ridistribuzione.
           Tuttavia la ridistribuzione prosegue e viene registrata
           un'avvertenza.

           Per preservare i dati con stato attivo, GlassFish Server li
           serializza e li salva nella memoria. Per ripristinare i dati, il
           classloader dell'applicazione appena ridistribuita deserializza i
           dati salvati in precedenza.

       --libraries
           Lista separata da virgole di file JAR di libreria. Specificare i
           file JAR di libreria mediante i rispettivi percorsi relativi o
           assoluti. Specificare percorsi relativi rispetto alla directory
           domain-dir/lib/applibs. Le librerie vengono rese disponibili per
           l'applicazione nell'ordine specificato.

       --target
           Specifica la destinazione della distribuzione. Di seguito sono
           riportati i valori validi.

           server
               Distribuisce il componente all'istanza server predefinita
               server ed è il valore predefinito.

           domain
               Distribuisce il componente al dominio. Se la destinazione per
               una distribuzione iniziale è domain, l'applicazione viene
               distribuita nel dominio, ma non è referenziata da alcuna
               istanza server o cluster. Se domain è la destinazione di una
               ridistribuzione (l'opzione --force è impostata su true), e per
               i cluster o le istanze server che fanno riferimento
               all'applicazione è abilitata la riconfigurazione dinamica, i
               cluster o le istanze server in questione ottengono
               automaticamente la nuova versione dell'applicazione. Se la
               configurazione dinamica è disabilitata, i cluster o le istanze
               server che fanno riferimento all'applicazione non acquisiscono
               la nuova versione dell'applicazione fino al riavvio delle
               istanze server in cluster o standalone.

           cluster_name
               Distribuisce il componente a ogni istanza server del cluster.

           instance_name
               Distribuisce il componente a un'istanza server standalone
               particolare.

       --type
           Il tipo di archivio di packaging del componente che viene
           distribuito. Di seguito sono riportati i valori possibili.

           car
               Il componente viene inserito all'interno di un package come
               file CAR.

           ear
               Il componente viene inserito all'interno di un package come
               file EAR.

           ejb
               Il componente viene inserito all'interno di un package EJB come
               file JAR.

           osgi
               Il componente viene inserito all'interno di un package come
               bundle OSGi.

           rar
               Il componente viene inserito all'interno di un package come
               file RAR.

           war
               Il componente viene inserito all'interno di un package come
               file WAR.

       --properties o --property
           Coppie parola chiave-valore facoltative che specificano proprietà
           aggiuntive per la distribuzione. Le proprietà disponibili sono
           determinate dall'implementazione del componente che viene
           distribuito o ridistribuito. Le opzioni --properties e --property
           sono equivalenti. È possibile usare l'una o l'altra
           indipendentemente dal numero di proprietà da specificare.

           Per una distribuzione è possibile specificare le proprietà
           riportate di seguito.

           jar-signing-alias
               Specifica l'alias per il certificato di sicurezza con cui è
               firmato il file JAR contenitore del client di applicazioni. In
               Java Web Start non verrà eseguito codice che richiede
               autorizzazioni elevate a meno che non risieda in un file JAR
               firmato con un certificato accettato come sicuro dal sistema
               dell'utente. Per maggiore praticità, GlassFish Server firma
               automaticamente il file JAR usando il certificato con questo
               alias dal keystore del dominio. Java Web Start chiede quindi
               all'utente se il codice deve essere accettato come sicuro e
               vengono visualizzate le informazioni sul certificato di
               GlassFish Server. Per firmare il file JAR con un certificato
               diverso, aggiungere il certificato al keystore del dominio,
               quindi usare questa proprietà. Ad esempio, è possibile usare un
               certificato di un'autorità sicura, che evita il prompt di Java
               Web Start, o della propria società, che può essere accettato
               come sicuro dagli utenti. Il valore predefinito è s1as, l'alias
               per il certificato autofirmato creato per ogni dominio.

           java-web-start-enabled
               Specifica se a un modulo di un client di applicazioni è
               consentito l'accesso a Java Web Start. Il valore predefinito è
               true.

           compatibility
               Specifica la release di GlassFish Server con cui è richiesta la
               compatibilità con versioni precedenti in termini di requisiti
               di visibilità JAR per le applicazioni. L'unico valore
               consentito è v2, che fa riferimento a Sun GlassFish Enterprise
               Server versione 2 o a Sun Java System Application Server
               versione 9.1 o 9.1.1. La specifica della piattaforma Java EE 6
               impone requisiti più rigorosi rispetto a quelli previsti dalla
               piattaforma Java EE 5 in base ai quali i file JAR possono
               essere visibili per diversi moduli in un file EAR. In
               particolare, i client di applicazione non devono avere accesso
               ai file JAR EJB o ad altri file JAR nel file EAR a meno che per
               i riferimenti non sia utilizzato il meccanismo Java SE standard
               (ad esempio, estensioni) o il meccanismo libreria-directory di
               Java EE. Se la proprietà viene impostata su v2 tali restrizioni
               Java EE 6 vengono rimosse.

           keepSessions={false|true}
               Sostituita dall'opzione --keepstate.

               Se l'opzione --force è impostata su true, è possibile usare
               questa proprietà per specificare se le sessioni attive
               dell'applicazione che viene ridistribuita devono essere
               preservate e quindi ripristinate al completamento della
               ridistribuzione. Si applica alle sessioni HTTP di un
               contenitore Web. Il valore predefinito è false.

               false
                   Le sessioni attive dell'applicazione non vengono preservate
                   e ripristinate (valore predefinito).

               true
                   Le sessioni attive dell'applicazione vengono preservate e
                   ripristinate.

                   Se non è possibile preservare o ripristinare una qualsiasi
                   delle sessioni attive dell'applicazione, nessuna delle
                   sessioni sarà disponibile al termine della ridistribuzione.
                   Tuttavia la ridistribuzione prosegue e viene registrata
                   un'avvertenza.

                   Per preservare le sessioni attive, GlassFish Server le
                   serializza e le salva nella memoria. Per ripristinare le
                   sessioni, il classloader dell'applicazione appena
                   ridistribuita deserializza tutte le sessioni salvate in
                   precedenza.

           preserveAppScopedResources
               Se si imposta true, le risorse con ambito a livello di
               applicazione vengono preservate e ripristinate durante la
               redistribuzione. Il valore predefinito è false.

           Le altre proprietà disponibili sono determinate
           dall'implementazione del componente ridistribuito.

           Per i componenti inclusi in package come bundle OSGi (--type=osgi),
           il comando secondario deploy accetta gli argomenti delle proprietà
           che consento di sottoporre a wrapping un file WAR come WAB (Web
           Application Bundle) durante la distribuzione. Il comando secondario
           cerca una chiave denominata UriScheme e, se presente, la utilizza
           come handler di flusso URL per aggiungere caratteristiche al flusso
           di input. Altre proprietà vengono utilizzate nel processo di
           aggiunta delle caratteristiche. Ad esempio, il contenitore Web OSGi
           GlassFish Server registra un handler di flusso URL denominato
           webbundle, che viene utilizzato per eseguire il wrapping di un file
           WAR non codificato come WAB. Per ulteriori informazioni
           sull'utilizzo, vedere l'esempio riportato in questa pagina della
           Guida.

OPERANDI
       file_archive|filepath
           Il percorso dell'archivio che contiene l'applicazione distribuita.
           Può essere un percorso relativo o assoluto.

           L'archivio può avere uno dei formati riportati di seguito.

           ·   Un file di archivio, ad esempio /export/JEE_apps/hello.war.

               Se l'opzione --upload è impostata su true, si tratta del
               percorso del file distribuibile nel computer client locale. Se
               l'opzione --upload è impostata su false, si tratta del percorso
               del file nel computer server.

           ·   Una directory che contiene il formato esploso dell'archivio
               distribuibile. Si tratta del percorso della directory nel
               computer server.

               Se si specifica una directory, l'opzione --upload viene
               ignorata.

ESEMPI
       Esempio 1, Distribuzione di un'applicazione enterprise
           In questo esempio l'applicazione enterprise all'interno di package
           nel file Cart.ear viene distribuita nell'istanza server predefinita
           server. È possibile usare l'opzione --target per effettuare la
           distribuzione in un'istanza server o in un cluster differente.

               asadmin> deploy Cart.ear
               Application deployed successfully with name Cart.
               Command deploy executed successfully

       Esempio 2, Distribuzione di un'applicazione Web con la radice contesto
       predefinita
           In questo esempio viene distribuita l'applicazione Web del file
           hello.war nell'istanza server predefinita server. È possibile usare
           l'opzione --target per effettuare la distribuzione in un'istanza
           server o in un cluster differente.

               asadmin> deploy hello.war
               Application deployed successfully with name hello.
               Command deploy executed successfully

       Esempio 3, Distribuzione forzata di un'applicazione Web con una radice
       contesto specifica
           In questo esempio viene forzata la distribuzione dell'applicazione
           Web del file hello.war. La radice contesto dell'applicazione Web
           distribuita è greetings. Se è stata già distribuita, l'applicazione
           viene ridistribuita.

               asadmin> deploy --force=true --contextroot greetings hello.war
               Application deployed successfully with name hello.
               Command deploy executed successfully

       Esempio 4, Distribuzione di un Enterprise Bean
           In questo esempio viene distribuito un componente basato sulla
           specifica EJB (Enterprise Bean) con Persistenza gestita da
           contenitore e vengono create le tabelle di database utilizzate dal
           bean.

           In questo esempio viene usata l'opzione --target. La destinazione
           in questo esempio è un cluster esistente, cluster1.

               asadmin> deploy --createtables=true --target cluster1 EmployeeEJB.jar
               Application deployed successfully with name EmployeeEJB.
               Command deploy executed successfully

       Esempio 5, Distribuzione di un modulo connettore
           In questo esempio viene distribuito un modulo connettore
           all'interno di package in un file RAR.

           In questo esempio viene usata l'opzione --target. La destinazione
           in questo esempio è un'istanza server standalone esistente che non
           appartiene a un cluster.

               asadmin> deploy --target myinstance jdbcra.rar
               Application deployed successfully with name jdbcra.
               Command deploy executed successfully

       Esempio 6, Specifica dell'ordine di distribuzione per un'applicazione
           In questo esempio viene specificato l'ordine di distribuzione per
           due applicazioni. L'applicazione cart viene caricata prima
           dell'applicazione horse all'avvio del server.

           Alcune righe di output sono state omesse dall'esempio per favorire
           la leggibilità.

               asadmin> deploy --deploymentorder 102 --name cart cart.war
               ...
               asadmin> deploy --deploymentorder 110 --name horse horse.war
               ...

       Esempio 7, Distribuzione di un'applicazione mediante un file
       descrittore di distribuzione Java EE 7 alternativo
           In questo esempio viene distribuita un'applicazione mediante un
           file descrittore di distribuzione standard Java EE che risiede
           all'esterno dell'archivio dell'applicazione.

               asadmin> deploy --altdd path_to_alternate_descriptor cart.ear
               Application deployed successfully with name cart.
               Command deploy executed successfully

       Esempio 8, Distribuzione di un'applicazione mediante un file
       descrittore di distribuzione GlassFish Server alternativo
           In questo esempio viene distribuita un'applicazione mediante un
           file descrittore di distribuzione runtime di GlassFish Server che
           risiede all'esterno dell'archivio dell'applicazione.

               asadmin> deploy --runtimealtdd path_to_alternate_runtime_descriptor horse.ear
               Application deployed successfully with name horse.
               Command deploy executed successfully

       Esempio 9, Wrapping di un file WAR come WAB
           In questo esempio viene eseguito il wrapping di un file WAR non
           codificato come WAB durante la distribuzione di un bundle OSGi; è
           specifico per i componenti inclusi in package come bundle OSGi.

           Il carattere barra rovesciata (\) viene utilizzato come carattere
           di escape nel comando. Per ulteriori informazioni sui caratteri di
           escape nelle opzioni per la utility asadmin, vedere la pagina della
           Guida asadmin(1M).

               asadmin deploy --type osgi \
               --properties "UriScheme=webbundle:Bundle-SymbolicName=bar:\
               Import-Package=javax.servlet;javax.servlet.http;
               %20version\\=3.0;resolution\\:
               =mandatory:Web-ContextPath=/foo" \
               /tmp/test_sample1.war
               Application deployed successfully with name sample1.
               Command deploy executed successfully

STATO DI USCITA
       0
           esecuzione del comando secondario riuscita

       1
           errore durante l'esecuzione del comando secondario

VEDERE ANCHE
       redeploy(1), list-components(1), undeploy(1), get(1), set(1)

       asadmin(1M)

       Oracle GlassFish Server Application Deployment Guide

Java EE 7                      12 febbraio 2013                      deploy(1)
