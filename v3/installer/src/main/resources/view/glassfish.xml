<?xml version="1.0" encoding="UTF-8"?>
<!-- 
/* 
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER. 
* 
* Copyright 2007-2008 Sun Microsystems, Inc. All rights reserved. 
* 
* The contents of this file are subject to the terms of either the GNU 
* General Public License Version 2 only ("GPL") or the Common Development 
* and Distribution License("CDDL") (collectively, the "License").  You 
* may not use this file except in compliance with the License. You can obtain 
* a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html 
* or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific 
* language governing permissions and limitations under the License. 
* 
* When distributing the software, include this License Header Notice in each 
* file and include the License file at glassfish/bootstrap/legal/LICENSE.txt. 
* Sun designates this particular file as subject to the "Classpath" exception 
* as provided by Sun in the GPL Version 2 section of the License file that 
* accompanied this code.  If applicable, add the following below the License 
* Header, with the fields enclosed by brackets [] replaced by your own 
* identifying information: "Portions Copyrighted [year] 
* [name of copyright owner]" 
* 
* Contributor(s): 
* 
* If you wish your version of this file to be governed by only the CDDL or 
* only the GPL Version 2, indicate your decision by adding "[Contributor] 
* elects to include this software in this distribution under the [CDDL or GPL 
* Version 2] license."  If you don't indicate a single choice of license, a 
* recipient has the option to distribute your version of this file under 
* either the CDDL, the GPL Version 2 or to extend the choice of license to 
* its licensees as provided above.  However, if you add GPL Version 2 code 
* and therefore, elected the GPL Version 2 license, then the option applies 
* only if the new code is made subject to such option by the copyright 
* holder. 
*/ 
--> 
<apt:template apt:name="glassfish"
    xmlns:apt="http://www.sun.com/jds/apoc/2004/template"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oor="http://openoffice.org/2001/registry"
    xsi:schemaLocation="http://www.sun.com/jds/apoc/2004/template ../../../consumables/schemas/config/apoc/policytemplate.xsd">
    <apt:category apt:name="glassfish" apt:label="GlassFishV3">
      <apt:page apt:name="Configuration_Item" apt:label="Configuration Settings">
        <apt:section apt:name="Administration" apt:label="Administration" >
          <apt:property apt:name="ADMINISTRATION_TEXT_TOP"
             apt:dataPath=""
             apt:type="xs:string">
            <apt:prop-value>$ADMINISTRATION_TOP_TEXT</apt:prop-value>
         <apt:visual>
            <apt:htmlPanel/>
         </apt:visual>
         </apt:property>

           <apt:property apt:name="A_HTTP_PORT"
              apt:label="HTTP Port"
              apt:dataPath="Administration.A_HTTP_PORT"
              apt:type="xs:string">
            <apt:visual>
                <apt:textField apt:columns="15" apt:toolTip="Enter the HTTP listener port" />
            </apt:visual>
	</apt:property>
	</apt:section>
      <apt:scriptHandler apt:scriptLanguage="beanshell">
	<apt:scriptCode><![CDATA[

import java.lang.String;
import java.io.*;
import java.net.*;
import org.openinstaller.provider.conf.ConfigHelper;
import org.openinstaller.util.*;

wizard.enableCancel(true);
wizard.enableNext(true);
wizard.enableBack(true);

validatePortValues(prop)  {
        String myValue = (String)prop.getUnconfirmedValue();
	// First check if the port is empty
        if ((myValue == null) || myValue.equals("")) {
            throw new EnhancedException("NULL_OR_EMPTY_VALUE", new String[]{});
        }

	// Check for non-numeric values
	int intPortNumber = 0;
	try {
		intPortNumber = Integer.parseInt(myValue);
	}catch(NumberFormatException dummy) {
		throw new EnhancedException("PORT_NOT_NUMERIC",new String[]{});
	}

	// Check for out of range values
	if (intPortNumber <=0 || intPortNumber > 65535) {
		throw new EnhancedException("PORT_OUT_OF_RANGE", new String[]{});
    }

	// Check if the port is free
	int retStat = isPortFree(intPortNumber);
	if (retStat == -1) {
		throw new EnhancedException("PORT_OCCUPIED", new String[]{});
    }
	if (retStat == -2) {
		throw new EnhancedException("HOST_NAME_CANNOT_BE_FOUND_WARNING", new String[]{});
    }
}

// Check if the port is free
isPortFree(int intportNumber) {
        // Get the hostname first.
        String hostName = getHostName();
        if (hostName.equals("null")) {
                return -2;
        }

        // use server socket method on Windows, client socket on other platforms.
        if (System.getProperty("os.name").indexOf("Windows")!=-1)
        {
            if (!isPortFreeServer(null, intportNumber)) {
                        return -1;
                }


        }
        else
        {
            if (!isPortFreeClient(hostName, intportNumber)) {
                return -1;
                }
        }
        return 0;
}

// Get the current hostname needed to attempt to establish a socket connection.
// Can use "localhost" instead??
getHostName() {
        String hostname = null;
        try
          {
            hostname = InetAddress.getLocalHost().getHostName();
          }
	// Return "null" and handle the rest in the calling method.
        catch (UnknownHostException hostError) { return "null"; }
        catch (SecurityException securityError) { return "null"; }
        return hostname;
}

//Use client socket
isPortFreeClient(String hostName, int port) {
        try {
            Socket socket = new Socket(hostName, port);
            OutputStream os = socket.getOutputStream();
            InputStream is = socket.getInputStream();
            os.close();
            os = null;
            is.close();
            is = null;
            socket.close();
            socket = null;
        } catch (Exception e) {
            return true;
       }
        return false;
}

//Use server socket
isPortFreeServer(InetAddress addr, int port) {

        boolean isPortFree = true;
        ServerSocket ss = null;
        try {
            ss = new ServerSocket(port, 0, addr);
        } catch (Exception e) {
           isPortFree = false;
        } finally {
            if (ss != null) {
                try {
                    ss.close();
                } catch (Exception e) {
                   isPortFree = false;
                }
            }
        }
        return isPortFree;
}
	]]></apt:scriptCode>
      </apt:scriptHandler>
    </apt:page>
  </apt:category>
</apt:template>
