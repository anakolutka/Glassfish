/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2008 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License. You can obtain
 * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.  If applicable, add the following below the License
 * Header, with the fields enclosed by brackets [] replaced by your own
 * identifying information: "Portions Copyrighted [year]
 * [name of copyright owner]"
 *
 * Contributor(s):
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */
package javax.persistence;

import java.lang.annotation.Target;
import java.lang.annotation.Retention;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

/**
 * The <code>MapKeyColumn</code> annotation is used to specify the mapping for
 * the key column of a map whose map key is a basic type. If the name element
 * is not specified, it defaults to the concatenation of the following: the name
 * of the referencing relationship field or property; "_"; "KEY".
 * If no <code>MapKeyColumn</code> annotation is specified, the default values
 * apply.
 *
 * <pre>
 * <p>Example:
 * 
 *   &#064;Entity
 *   public class Item {
 *     &#064;Id int id;
 *     ...
 *     &#064;ElementCollection
 *     &#064;MapKeyColumn(name="IMAGE_NAME")
 *     &#064;Column(name="IMAGE_FILENAME")
 *     &#064;CollectionTable(name="IMAGE_MAPPING")
 *     Map&#060;String, String> images; // map from image name to filename
 *     ...
 *   }
 *</pre>
 * 
 * @since Java Persistence 2.0
 *  
 */
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface MapKeyColumn {
    /**
     * (Optional) The name of the map key column. The table in which it is found
     *  depends upon the context. If the map key is for an element collection,
     *  the map key column is in the collection table for the map value.
     *  If the map key is for a ManyToMany entity relationship or for a
     *  OneToMany entity relationship using a join table, the map key column is
     *  in a join table. If the map key is for a OneToMany entity relationship
     *  using a foreign key mapping strategy, the map key column is in the table
     *  of the entity that is the value of the map.
     *  <p>Defaults to the concatenation of the following: the name of the
     *  referencing property or field name; "_"; "KEY".
     */
    String name() default "";

    /**
     * (Optional) Whether the column is a unique key. This is a shortcut for the
     *  UniqueConstraint annotation at the table level and is useful for when 
     *  the unique key constraint corresponds to only a single column. This
     *  constraint applies in addition to any constraint entailed by primary key
     *  mapping and to constraints specified at the table level.
     *  
     */
    boolean unique() default false;

    /**
     * (Optional) Whether the database column is nullable.
     */
    boolean nullable() default false;

    /**
     * (Optional) Whether the column is included in SQL INSERT statements
     *  generated by the persistence provider.
     */
    boolean insertable() default true;

    /**
     * (Optional) Whether the column is included in SQL UPDATE statements
     * generated by the persistence provider.
     */
    boolean updatable() default true;

    /**
     * (Optional) The SQL fragment that is used when generating the DDL for the
     * column.
     * <p>Defaults to generated SQL to create a column of the inferred type.
     */
    String columnDefinition() default "";

    /**
     * (Optional) The name of the table that contains the column.
     * <p>Defaults to the name of the collection table for the map value, if the
     * map key is for an element collection.
     * <p>If the map key is for a OneToMany or ManyToMany entity relationship
     * using a join table, the name of the join table for the map.
     * <p>If the map key is for a OneToMany entity relationship using a foreign
     * key mapping strategy, the name of the primary table of the entity that is
     * the value of the map
     */
    String table() default "";

    /**
     * (Optional) The column length. (Applies only if a
     * string-valued column is used.)
     */
    int length() default 255;

    /**
     * (Optional) The precision for a decimal (exact numeric)
     * column. (Applies only if a decimal column is used.)
     * <p>Default Value must be set by developer when a decimal (exact numeric)
     * is used.
     */
    int precision() default 0;

    /**
     * (Optional) The scale for a decimal (exact numeric) column.
     * (Applies only if a decimal column is used.)
     */
    int scale() default 0;
}