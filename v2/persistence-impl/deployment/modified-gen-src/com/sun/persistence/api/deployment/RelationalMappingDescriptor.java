/*
 * The contents of this file are subject to the terms 
 * of the Common Development and Distribution License 
 * (the "License").  You may not use this file except 
 * in compliance with the License.
 * 
 * You can obtain a copy of the license at 
 * glassfish/bootstrap/legal/CDDLv1.0.txt or 
 * https://glassfish.dev.java.net/public/CDDLv1.0.html. 
 * See the License for the specific language governing 
 * permissions and limitations under the License.
 * 
 * When distributing Covered Code, include this CDDL 
 * HEADER in each file and include the License file at 
 * glassfish/bootstrap/legal/CDDLv1.0.txt.  If applicable, 
 * add the following below this CDDL HEADER, with the 
 * fields enclosed by brackets "[]" replaced with your 
 * own identifying information: Portions Copyright [yyyy] 
 * [name of copyright owner]
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-1973 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// This file may need to modified upon recompilation of the source schema. 
// Generated on: 2005.04.20 at 08:27:00 IST 
//


package com.sun.persistence.api.deployment;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.AccessType;

import com.sun.persistence.api.deployment.CascadeType;
import com.sun.persistence.api.deployment.MappingDescriptor;

@XmlAccessorType(value = AccessType.FIELD)
@XmlType(name = "relational-mapping", namespace = "http://java.sun.com/xml/ns/persistence_ORM")
public abstract class RelationalMappingDescriptor
    extends MappingDescriptor
{

    @XmlElement(defaultValue = "", name = "target-entity", namespace = "http://java.sun.com/xml/ns/persistence_ORM", type = String.class)
    protected String targetEntity;
    @XmlElement(name = "cascade", namespace = "http://java.sun.com/xml/ns/persistence_ORM", type = CascadeType.class)
    protected List<CascadeType> cascade;
    @XmlElement(name = "mapped-by", namespace = "http://java.sun.com/xml/ns/persistence_ORM", type = String.class)
    protected String mappedBy;

    /**
     * Gets the value of the targetEntity property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public String getTargetEntity() {
        return targetEntity;
    }

    /**
     * Sets the value of the targetEntity property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setTargetEntity(String value) {
        this.targetEntity = value;
    }

    public boolean isSetTargetEntity() {
        return (this.targetEntity!= null);
    }

    public void unsetTargetEntity() {
        this.targetEntity = null;
    }

    protected List<CascadeType> _getCascade() {
        if (cascade == null) {
            cascade = new ArrayList<CascadeType>();
        }
        return cascade;
    }

    /**
     * Gets the value of the cascade property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cascade property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCascade().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link com.sun.persistence.api.deployment.CascadeType}
     * 
     */
    public List<CascadeType> getCascade() {
        return this._getCascade();
    }

    public boolean isSetCascade() {
        return (this.cascade!= null);
    }

    public void unsetCascade() {
        this.cascade = null;
    }

    /**
     * Gets the value of the mappedBy property.
     * 
     * @return
     *     possible object is
     *     {@link java.lang.String}
     */
    public String getMappedBy() {
        return mappedBy;
    }

    /**
     * Sets the value of the mappedBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link java.lang.String}
     */
    public void setMappedBy(String value) {
        this.mappedBy = value;
    }

    public boolean isSetMappedBy() {
        return (this.mappedBy!= null);
    }

    public void unsetMappedBy() {
        this.mappedBy = null;
    }

    // Added code

    // All derived fields are annotated as XmlTransient

    /* Represents inverse relationship. */
    @XmlTransient RelationalMappingDescriptor inverse;

    /* Used to avoid multiple initialization of inverse. */
    @XmlTransient boolean isInverseInitialized = false;

    /**
     * This method implementation assumes that the default values for the entity
     * model for this descriptor is already populated.
     *
     * @return true if this a bidirectional relationship, else false.
     */
    public boolean isBidirectional() {
        return getInverse() != null;
    }

    /**
     * This method implementation assumes that the default values for the entity
     * model for this descriptor is already populated.
     *
     * @return true if this a unidirectional relationship, else false.
     */
    public boolean isUnidirectional() {
        return !isBidirectional();
    }

    /**
     * This method implementation assumes that the default values for the entity
     * model for this descriptor is already populated.
     *
     * @return the inverse relationship if this is a bidirectional, else null.
     */
    public RelationalMappingDescriptor getInverse() {
        if (isInverseInitialized)
            return inverse;
        else
            return _getInverse();
    }

    private synchronized RelationalMappingDescriptor _getInverse() {
        if (isInverseInitialized) return inverse; // double if check
        PropertyDescriptor property = parent();
        String propertyName = property.getName();
        ClassDescriptor declaringClass = property.parent();
        String declaringClassName = declaringClass.getName();
        ClassDescriptor targetClass = declaringClass.parent()
                .getClassDescriptor(getTargetEntity());

        String mappedBy = getMappedBy();
        if(mappedBy!=null && mappedBy.length()!=0) {

            PropertyDescriptor propertyOnTargetSide =
                    targetClass.getProperty(mappedBy);
            /*
             * The following cast is OK b'cos, in earlier verification step,
             * we would have verified this already
             */
            inverse = RelationalMappingDescriptor.class.cast(
                    propertyOnTargetSide.getMapping());
        } else { // search in targetClass iff mappedBy is not set
            for (PropertyDescriptor propertyOnTargetSide : targetClass.getProperty()) {
                if (propertyOnTargetSide.isRelationshipProperty()) {
                    RelationalMappingDescriptor mappingOnTargetSide = RelationalMappingDescriptor.class.cast(propertyOnTargetSide.getMapping());
                    if (mappingOnTargetSide.getTargetEntity().equals(declaringClassName) &&
                            propertyName.equals(mappingOnTargetSide.getMappedBy())) {
                        inverse = mappingOnTargetSide;
                    }
                }
            }
        }
        isInverseInitialized = true;
        return inverse;
    }

    /**
     * @return true if this is the owning side of a relationship, else false.
     */
    public boolean isOwningSide(){
        return getMappedBy()==null || getMappedBy().length()==0;
    }


}
