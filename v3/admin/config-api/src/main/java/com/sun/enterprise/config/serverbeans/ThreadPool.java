//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.3-04/12/2007 12:08 AM(kohsuke)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.08.24 at 01:25:15 PM PDT 
//


package com.sun.enterprise.config.serverbeans;

import org.jvnet.hk2.config.Attribute;
import org.jvnet.hk2.config.Configured;

import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.io.Serializable;


/**
 *
 */

/* @XmlType(name = "") */
@Configured
public class ThreadPool
        implements Serializable {

	final transient private VetoableChangeSupport support = new VetoableChangeSupport(this);

    private final static long serialVersionUID = 1L;
    @Attribute(required = true)

    protected String threadPoolId;
    @Attribute

    protected String minThreadPoolSize;
    @Attribute

    protected String maxThreadPoolSize;
    @Attribute

    protected String idleThreadTimeoutInSeconds;
    @Attribute

    protected String numWorkQueues;



    /**
     * Gets the value of the threadPoolId property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getThreadPoolId() {
        return threadPoolId;
    }

    /**
     * Sets the value of the threadPoolId property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setThreadPoolId(String value) {
        try {
            support.fireVetoableChange("threadPoolId", this.threadPoolId, value);
        } catch (PropertyVetoException _x) {
            return;
        }
        this.threadPoolId = value;
    }

    /**
     * Gets the value of the minThreadPoolSize property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getMinThreadPoolSize() {
        if (minThreadPoolSize == null) {
            return "0";
        } else {
            return minThreadPoolSize;
        }
    }

    /**
     * Sets the value of the minThreadPoolSize property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setMinThreadPoolSize(String value) {
        try {
            support.fireVetoableChange("minThreadPoolSize", this.minThreadPoolSize, value);
        } catch (PropertyVetoException _x) {
            return;
        }
        this.minThreadPoolSize = value;
    }

    /**
     * Gets the value of the maxThreadPoolSize property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getMaxThreadPoolSize() {
        if (maxThreadPoolSize == null) {
            return "200";
        } else {
            return maxThreadPoolSize;
        }
    }

    /**
     * Sets the value of the maxThreadPoolSize property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setMaxThreadPoolSize(String value) {
        try {
            support.fireVetoableChange("maxThreadPoolSize", this.maxThreadPoolSize, value);
        } catch (PropertyVetoException _x) {
            return;
        }
        this.maxThreadPoolSize = value;
    }

    /**
     * Gets the value of the idleThreadTimeoutInSeconds property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getIdleThreadTimeoutInSeconds() {
        if (idleThreadTimeoutInSeconds == null) {
            return "120";
        } else {
            return idleThreadTimeoutInSeconds;
        }
    }

    /**
     * Sets the value of the idleThreadTimeoutInSeconds property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setIdleThreadTimeoutInSeconds(String value) {
        try {
            support.fireVetoableChange("idleThreadTimeoutInSeconds", this.idleThreadTimeoutInSeconds, value);
        } catch (PropertyVetoException _x) {
            return;
        }
        this.idleThreadTimeoutInSeconds = value;
    }

    /**
     * Gets the value of the numWorkQueues property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getNumWorkQueues() {
        if (numWorkQueues == null) {
            return "1";
        } else {
            return numWorkQueues;
        }
    }

    /**
     * Sets the value of the numWorkQueues property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setNumWorkQueues(String value) {
        try {
            support.fireVetoableChange("numWorkQueues", this.numWorkQueues, value);
        } catch (PropertyVetoException _x) {
            return;
        }
        this.numWorkQueues = value;
    }

    public void addVetoableChangeListener(VetoableChangeListener param0) {
        support.addVetoableChangeListener(param0);
    }

    public void addVetoableChangeListener(String param0, VetoableChangeListener param1) {
        support.addVetoableChangeListener(param0, param1);
    }

    public void removeVetoableChangeListener(String param0, VetoableChangeListener param1) {
        support.removeVetoableChangeListener(param0, param1);
    }

    public void removeVetoableChangeListener(VetoableChangeListener param0) {
        support.removeVetoableChangeListener(param0);
    }

}
