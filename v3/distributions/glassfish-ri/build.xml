<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the "License").  You may not use this file except
 in compliance with the License.

 You can obtain a copy of the license at
 glassfish/bootstrap/legal/CDDLv1.0.txt or
 https://glassfish.dev.java.net/public/CDDLv1.0.html.
 See the License for the specific language governing
 permissions and limitations under the License.

 When distributing Covered Code, include this CDDL
 HEADER in each file and include the License file at
 glassfish/bootstrap/legal/CDDLv1.0.txt.  If applicable,
 add the following below this CDDL HEADER, with the
 fields enclosed by brackets "[]" replaced with your
 own identifying information: Portions Copyright [yyyy]
 [name of copyright owner]
-->
<project name="glassfish reference implemation creation" default="create.ri" basedir=".">

    <property file="${basedir}/build.properties"/>
    <property name="stage" value="target/stage" />
    <property name="v3.stage" value="${stage}/v3" />
    <target name="ri.init">
        <mkdir dir="${v3.stage}"/>
    </target>

    <target name="create.ri" depends="ri.init">
        <echo message="v3 directory: ${v3.dir}"/>
        <copy file="${basedir}/README" todir="${stage}"/>
	<antcall target="module.copy" /> 
	<antcall target="hk2.project" />
	<antcall target="grizzly.project" />
	<antcall target="jsf.project" />
        <antcall target="gfcorba.project" />
        <antcall target="delete.files">
             <param name="dir" value="${stage}"/>
        </antcall>
	<zip destfile="${stage}/../glassfish-ri-src.zip"
             basedir="${stage}" 
             excludes="**/.svn/**,**/.hg*/**,glassfish" />
    </target>

	 
    <target name="module.copy" >
        <echo message="copy the following modules: ${module.list}"/>
        <copy todir="${v3.stage}" enablemultiplemappings="true" >  
            <fileset dir="${v3.dir}" casesensitive="yes" includes="${module.list}" excludes="**/.svn/**,**/target/**"/>
        </copy>
    </target>


    <target name="hk2.project" >
        <exec executable="svn" dir="${stage}" failonerror="true" >
	    <arg line="checkout" />
            <arg line="${hk2.svn.url}" />
            <arg line="hk2" />
	</exec>
    </target>


    <target name="grizzly.project" >
        <exec executable="svn" dir="${stage}" failonerror="true" >
	    <arg line="checkout" />
            <arg line="${grizzly.svn.url}" />
            <arg line="grizzly" />
	</exec>
    </target>


    <target name="jsf.project" >
        <exec executable="svn" dir="${stage}" failonerror="true" >
	    <arg line="checkout" />
            <arg line="${jsf.svn.url}" />
            <arg line="jsf" />
	</exec>
    </target>


    <target name="jsp.project" >
        <exec executable="svn" dir="${stage}" failonerror="true" >
	    <arg line="checkout" />
            <arg line="${jsp.svn.url}" />
            <arg line="jsp" />
	</exec>
    </target>


    <target name="uel.project" >
        <exec executable="svn" dir="${stage}" failonerror="true" >
	    <arg line="checkout" />
            <arg line="${uel.svn.url}" />
            <arg line="uel" />
	</exec>
    </target>


    <!-- requires hg (mercurial) installed and in the path -->
    <target name="gfcorba.project" >
        <exec executable="hg" dir="${stage}" failonerror="true" >
	    <arg line="clone" />
            <arg line="${gfcorba.hg.url}" />
            <arg line="glassfish-corba" />
	</exec>
    </target>


    <target name="delete.files" >
        <delete includeemptydirs="true">    
            <fileset dir="${dir}" includes="**/.svn/**,**/.hg*/**" defaultexcludes="false"/>
        </delete>
    </target>



    <target name="web.prepare">
        <mkdir dir="target/stage"/>

        <resolveArtifact artifactId="nucleus-base" property="nucleus-base.zip"/>
    </target>

    <!--
        Define a dependency graph for the web modules,
        and place the web modules into the modules/ dir.

        This part will be reused by other bundles that build on the web module.
    -->
    <target name="web.moduleDef">
        <moduleDef name="web" artifactId="webtier-all" />
    </target>

    <target name="ejb.moduleDef">
        <moduleDef name="ejb" artifactId="ejb-all" />
    </target>


    <target name="create.bundle" depends="web.prepare, web.moduleDef, ejb.moduleDef">
        <resolveAll todir="target/stage/glassfish/modules" tolerateBrokenPOMs="true" stripVersion="true">
            <fullGraph />
            <!-- then get rid of all the dependencies that are in the webtier -->
            <removeSpecificArtifacts>
                <scope level="compile,runtime"/>
                <artifact artifactId="webtier-all"/>
                <artifact artifactId="ejb-all" />
            </removeSpecificArtifacts>
        </resolveAll>

	<delete dir="target/stage/glassfish/modules" includes="*.zip"/>
	<delete dir="target/stage/glassfish/modules" includes="*.pom"/>

        <graphDef id="generate-picture" tolerateBrokenPOMs="true">
            <visualize file="modules.png">
                <scope level="compile,runtime">
                            <excludeArtifactsTransitively>
                                <artifact groupId="com.sun.enterprise" artifactId="hk2" />
                            </excludeArtifactsTransitively>
                </scope>
                <subGraph color="red">
                    <graphRef refid="web-modules"/>
                </subGraph>
                <subGraph color="blue">
                    <graphRef refid="ejb-modules"/>
                </subGraph>
            </visualize>
        </graphDef>

        <build-zip zipfile="target/glassfish-ri.zip" base="${nucleus-base.zip}"/>

        <!-- this build script will be reused elsewhere -->
        <attachArtifact file="build.xml" classifier="build"/>
    </target>


    <!--
        Macro for defining a module set rooted at the given node.
    -->
    <macrodef name="moduleDef">
        <!--
            The module subgraph will be placed under ID "<name>-modules",
            and the module jars are placed under "modules/<name>" sub directory.
        -->
        <attribute name="name"/>
        <!--
            ArtifactId of the root module of this module set.
        -->
        <attribute name="artifactId" />
        <sequential>
            <!--
              This filtering definition obtains a set of HK2 modules that are retained by webtier
              (that is, set of modules that won't be in the dependency list if webtier is not a part of the dependency;
              IOW, a dependency only reachable through webtier)

              The formula to compute this is non-trivial. We first compute a subgraph X which represents
              nodes that we *don't* want in webtier directory. That is, all dependencies that are reachable without going through
              webtier.

              We then finally compute the set of modules and jars that are not in X by one more subtraction.
            -->
            <graphDef id="@{name}-modules" tolerateBrokenPOMs="true">
                <scope level="compile,runtime">
                    <subtract>
                        <subGraph artifactId="@{artifactId}" />
                        <scope level="compile,runtime"><!-- = subgraph X -->
                            <excludeArtifactsTransitively>
                                <artifact artifactId="@{artifactId}" />
                            </excludeArtifactsTransitively>
                        </scope>
                    </subtract>
                </scope>
            </graphDef>

            <resolveAll todir="target/stage/glassfish/modules/@{name}" tolerateBrokenPOMs="true" stripVersion="true">
                <graphRef refid="@{name}-modules"/>
       	    </resolveAll>

	    <delete dir="target/stage/glassfish/modules/@{name}" includes="*.zip"/>
	    <delete dir="target/stage/glassfish/modules/@{name}" includes="*.pom"/>
	    <delete dir="target/stage/glassfish/modules/@{name}" includes="*.war"/>
        </sequential>
    </macrodef>

    <!--
        build the final zip file and attach that to Maven
    -->
    <macrodef name="build-zip">
        <attribute name="zipfile" />
        <attribute name="base" />
        <sequential>
            <!-- find all fragments -->
            <resolveAll todir="target/fragments" tolerateBrokenPOMs="true" stripVersion="true">
                <fullGraph/>
                <!-- now treat the full graph as the list and then do simple list filtering -->
                <packaging value="distribution-fragment"/>
            </resolveAll>
            <unzip dest="target/stage">
                <patternset>
                    <exclude name="META-INF/**"/>
                </patternset>
                <fileset dir="target/fragments" includes="*.zip"/>
            </unzip>

            <zip file="@{zipfile}" basedir="target/stage">
                <zipgroupfileset file="@{base}"/>
            </zip>
            <attachArtifact file="@{zipfile}"/>
        </sequential>
    </macrodef>

</project>

