<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="validator-usingvalidator">
  <title>Object validation</title>

  <para>TODO: outline of the chapter. Should this be placed before <link
  lang="" linkend="validator-customconstraints">"Creating custom
  constraints"</link>?</para>

  <section id="validator-usingvalidator-annotate" revision="1">
    <title>Annotating your model</title>

    <para>Using the Bean Validation API validation constraints are expressed
    via Java 5 annotations. In this section we show how to annotate your
    object model with Bean Validation constraint annotations.</para>

    <section>
      <title>Field level annotations</title>

      <para>One way for expressing constraints is to annotate the fields of a
      class with constraint annotations. The following listing shows a simple
      example:</para>

      <programlisting>package com.mycompany;

import javax.validation.constraints.NotNull;

public class Car {

    <emphasis role="bold">@NotNull</emphasis>
    private String manufacturer;

    public Car(String manufacturer) {

        this.manufacturer = manufacturer;
    }
}</programlisting>
    </section>

    <section>
      <title>Property level annotations</title>

      <para>If your model class adheres to the <ulink type=""
      url="http://java.sun.com/javase/technologies/desktop/javabeans/index.jsp">JavaBeans</ulink>
      standard (meaning basically, there are getter and setter methods for the
      properties of the class), it is also possible to annotate the properties
      of a bean class instead of its fields. Note that the property's getter
      method has to be annotated, not its setter method:</para>

      <programlisting>package com.mycompany;

import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;

public class Car {

    private String manufacturer;

    private boolean isRegistered;
    
    
    public Car(String manufacturer, boolean isRegistered) {
        super();
        this.manufacturer = manufacturer;
        this.isRegistered = isRegistered;
    }

    <emphasis role="bold">@NotNull</emphasis>
    public String getManufacturer() {
        return manufacturer;
    }

    public void setManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
    }

    <emphasis role="bold">@AssertTrue</emphasis>
    public boolean isRegistered() {
        return isRegistered;
    }

    public void setRegistered(boolean isRegistered) {
        this.isRegistered = isRegistered;
    }
}</programlisting>

      <para>Generally it is considered a good practice to stick either with
      field <emphasis>or</emphasis> with property annotation within one model
      class for the sake of readability. It is not recommended to annotate a
      field <emphasis>and</emphasis> the accompanying getter method as this
      would cause the field to be validated twice.</para>

      <para>TODO: Make it explcit that where the difference lies between filed
      and property level annotations. Depending where I place the annotation
      the value to be validated gets accessed in different ways!</para>
    </section>

    <section>
      <title>Class-level annotations</title>

      <para>TODO</para>
    </section>

    <section>
      <title>Annotated interfaces and super-classes</title>

      <para>When validating an object that implements an interface or extends
      another class, all constraint annotations on the implemented interface
      and parent class apply in the same manner as the constraints specified
      on the validated object itself. To make things clearer let's have a look
      at the following example:</para>

      <programlisting>//class Car
package com.mycompany;

import javax.validation.constraints.NotNull;

public class Car {

    private String manufacturer;
    
    public Car(String manufacturer) {
        this.manufacturer = manufacturer;
    }

    @NotNull
    public String getManufacturer() {
        return manufacturer;
    }

    public void setManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
    }

}

//class RentalCar
package com.mycompany;

import javax.validation.constraints.NotNull;

public class RentalCar extends Car {

    private String rentalStation;
    
    public RentalCar(String manufacturer, String rentalStation) {
        super(manufacturer);
        this.rentalStation = rentalStation;
    }
    
    @NotNull
    public String getRentalStation() {
        return rentalStation;
    }

    public void setRentalStation(String rentalStation) {
        this.rentalStation = rentalStation;
    }

}</programlisting>

      <para>Our well-known class <classname>Car</classname> is now extended by
      <classname>RentalCar</classname> with an additional property,
      <property>rentalStation</property>. If an instance of
      <classname>RentalCar</classname> is validated now, not only the
      <classname>@NotNull</classname> constraint at the
      <property>rentalStation</property> property would be validated, but also
      the constraint at <property>manufacturer</property> from the parent
      class.</para>

      <para>The same would hold true, if <classname>Car</classname> was an
      interface, that is implemented by
      <classname>RentalCar</classname>.</para>

      <para>Constraint annotations are aggregated if methods are overridden.
      If <classname>RentalCar</classname> would override the
      <methodname>getManufacturer()</methodname> method from
      <classname>Car</classname> any constraints annotated at the overriding
      method would be evaluated in addition to the
      <classname>@NotNull</classname> constraint from the super-class.</para>
    </section>

    <section>
      <title>Validating object graphs</title>

      <para>The Bean Validation API does not only allow to validate single
      objects but also complete object graphs. To do so just annotate a field
      or property representing a reference to another object with
      <classname>@Valid</classname>. If the parent object is validated, all
      objects referenced by a field/property annotated with
      <classname>@Valid</classname> will be validated as well (as will be
      their children etc.). The following shows a simple example:</para>

      <programlisting>//class Person
package com.mycompany;

import javax.validation.constraints.NotNull;

public class Person {

    @NotNull
    private String name;
    
    public Person(String name) {
        super();
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
    
}

//class car
package com.mycompany;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

public class Car {

    @NotNull
    @Valid
    private Person driver;
    
    public Car(Person driver) {

        this.driver = driver;
    }

    //getters and setters ...

}</programlisting>

      <para>If an instance of <classname>Car</classname> is validated, the
      referenced <classname>Person</classname> object will be validated as
      well, as the <property>driver</property> field is annotated with
      <classname>@Valid</classname>. Therefore the validation of a
      <classname>Car</classname> will fail if the <property>name</property>
      field of the referenced <classname>Person</classname> instance is
      <code>null</code>.</para>

      <para>Object graph validation also works for collection-typed fields.
      That means any attributes that are</para>

      <itemizedlist>
        <listitem>
          <para>arrays</para>
        </listitem>

        <listitem>
          <para>of type<classname> java.lang.Iterable</classname> (and
          therfore its direct or indirect derivations
          <classname>Collection</classname>, <classname>List</classname> and
          <classname>Set</classname>)</para>
        </listitem>

        <listitem>
          <para>of type <classname>java.util.Map</classname></para>
        </listitem>
      </itemizedlist>

      <para>can be annotated with <classname>@Valid</classname>, which will
      cause each contained element to be validated, when the parent object is
      validated.</para>

      <programlisting>package com.mycompany;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validation.constraints.NotEmpty;

public class Car {

    @NotNull
    @Valid
    private List&lt;Person&gt; passengers = new ArrayList&lt;Person&gt;();
    
    public Car(List&lt;Person&gt; passengers) {

        this.passengers = passengers;
    }

    //getters and setters ...

}</programlisting>

      <para>If a <classname>Car</classname> instance is validated now, a
      <classname>ConstraintValidation</classname> will be raised, if any of
      the <classname>Person</classname> objects contained in the
      <property>passengers</property> list has a <code>null</code>
      name.</para>
    </section>
  </section>

  <section id="validator-usingvalidator-validate" revision="1">
    <title>Validating your model</title>

    <para>The <classname>Validator</classname> interface is the main entry
    point to the Bean Validation API. In the following we first will show how
    to obtain <classname>Validator</classname> instances using the
    bootstrapping mechanism that the API provides. Afterwards you'll learn how
    to use the different methods of the <classname>Validator</classname>
    interfaces followed by an overview of the information that
    <classname>ConstraintViolation</classname> instances offer.</para>

    <section>
      <title>Obtaining Validator instances</title>

      <para>TODO: DefaultFactory, customization, note on thread safety</para>
    </section>

    <section>
      <title>Validator methods</title>

      <para>The <classname>Validator</classname> interface contains three
      methods that can be used to validate entire objects or only single
      object properties.</para>

      <para>All of these methods return a
      <classname>Set&lt;ConstraintViolation&gt;</classname>, which will be
      empty, if the validation succeeded. Otherwise a
      <classname>ConstraintViolation</classname> object for each violated
      constraint will be contained.</para>

      <para>All the validation methods have a var-args parameter which can be
      used to specify, which validation groups shall be considered when
      performing the validation. If the parameter is not specified (as in the
      following examples) the default validation group will be used. We will
      go into more detail on the topic of validation groups in the <link
      linkend="validator-usingvalidator-validationgroups">following
      section</link>.</para>

      <section>
        <title>validate()</title>

        <para>Use the <methodname>validate()</methodname> method to perform
        validation of all constraints of a given object. The following listing
        shows an example:</para>

        <programlisting>ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
Validator validator = factory.getValidator();

Car car = new Car(null);

Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
    validator.validate(car);

assertEquals(1, constraintViolations.size());
assertEquals(
    "may not be null", constraintViolations.iterator().next().getMessage());</programlisting>
      </section>

      <section>
        <title>validateProperty()</title>

        <para>With help of the <methodname>validateProperty()</methodname> a
        single named property of a given object can be validated:</para>

        <programlisting>Validator validator = Validation.buildDefaultValidatorFactory().getValidator();

Car car = new Car(null);

Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
    validator.validateProperty(car, "manufacturer");

assertEquals(1, constraintViolations.size());
assertEquals(
    "may not be null", constraintViolations.iterator().next().getMessage());</programlisting>
      </section>

      <section>
        <title>validateValue()</title>

        <para>Using the <methodname>validateValue() </methodname>method you
        can check, whether a single property of a given class can be validated
        successfully, if the property had the specified value:</para>

        <programlisting>Validator validator = Validation.buildDefaultValidatorFactory().getValidator();

Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
    validator.validateValue(Car.class, "manufacturer", null);

assertEquals(1, constraintViolations.size());
assertEquals(
    "may not be null", constraintViolations.iterator().next().getMessage());</programlisting>
      </section>

      <section>
        <title>getConstraintsForClass()</title>

        <para>TODO</para>
      </section>
    </section>

    <section>
      <title>Working with ConstraintViolations</title>

      <para>TODO: Message interpolation?</para>
    </section>
  </section>

  <section id="validator-usingvalidator-validationgroups" revision="1">
    <title>Validation groups</title>

    <section revision="1">
      <title>Group sequences</title>

      <para></para>
    </section>
  </section>

  <section id="validator-usingvalidator-methodparameters" revision="1">
    <para />
  </section>
</chapter>
