<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: integration.xml 17620 2009-10-04 19:19:28Z hardy.ferentschik $ -->
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2009, Red Hat, Inc. and/or its affiliates  or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat, Inc.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="validator-checkconstraints">
  <title>Integration with other frameworks</title>

  <para>Hibernate Validator is intended to be used to implement multi-layered
  data validation, where constraints are expressed in a single place (the
  annotated domain model) and checked in various different layers of the
  application.</para>

  <section id="validator-checkconstraints-db" revision="2">
    <title>Database schema-level validation</title>

    <para>Out of the box, Hibernate Annotations (as of Hibernate 3.5.x) will
    translate the constraints you have defined for your entities into mapping
    metadata. For example, if a property of your entity is annotated
    <literal>@NotNull</literal>, its columns will be declared as <literal>not
    null</literal> in the DDL schema generated by Hibernate.</para>

    <para>If, for some reason, the feature needs to be disabled, set
    <literal>hibernate.validator.apply_to_ddl</literal> to
    <literal>false</literal>. See also <xref
    linkend="table-builtin-constraints" />.</para>

    <para>You can also limit the DDL constraint generation to a subset of the
    defined constraints by setting the property
    <property>org.hibernate.validator.group.ddl</property>. The property
    specifies the comma seperated, fully specified classnames of the groups a
    constraint has to be part of in order to be considered for DDL schema
    generation.</para>
  </section>

  <section id="validator-checkconstraints-orm">
    <title>ORM integration</title>

    <para>Hibernate Validator integrates with both Hibernate and all pure Java
    Persistence providers.</para>

    <section id="validator-checkconstraints-orm-hibernateevent" revision="1">
      <title>Hibernate event-based validation</title>

      <para>Hibernate Validator has a built-in Hibernate event listener -
      <ulink
      url="http://fisheye.jboss.org/browse/Hibernate/core/trunk/annotations/src/main/java/org/hibernate/cfg/beanvalidation/BeanValidationEventListener.java"><classname>org.hibernate.cfg.beanvalidation.BeanValidationEventListener</classname></ulink>
      - which is part of Hibernate Annotations (as of Hibernate 3.5.x).
      Whenever a <literal>PreInsertEvent</literal>,
      <literal>PreUpdateEvent</literal> or
      <classname>PreDeleteEvent</classname> occurs, the listener will verify
      all constraints of the entity instance and throw an exception if any
      constraint is violated. Per default objects will be checked before any
      inserts or updates are made by Hibernate. Pre deletion events will per
      default not trigger a validation. You can configure the groups to be
      validated per event type using the properties
      <property>javax.persistence.validation.group.pre-persist</property>,
      <property>javax.persistence.validation.group.pre-update</property> and
      <property>javax.persistence.validation.group.pre-remove</property>. The
      values of these properties are the comma seperated, fully specified
      class names of the groups to validate. <xref
      linkend="example-beanvalidationeventlistener-config" /> shows the
      default values for these properties. In this case they could also be
      omitted.</para>

      <para>On constraint violation, the event will raise a runtime
      <classname>ConstraintViolationException</classname> which contains a set
      of <literal>ConstraintViolation</literal>s describing each
      failure.</para>

      <para>If Hibernate Validator is present in the classpath, Hibernate
      Annotations (or Hibernate EntityManager) will use it transparently. To
      avoid validation even though Hibernate Validator is in the classpath set
      <property>javax.persistence.validation.mode</property> to
      <constant>none</constant>.</para>

      <para><note>
          <para>If the beans are not annotated with validation annotations,
          there is no runtime performance cost.</para>
        </note></para>

      <para>In case you need to manually set the event listeners for Hibernate
      Core, use the following configuration in
      <literal>hibernate.cfg.xml</literal>:</para>

      <example id="example-beanvalidationeventlistener-config">
        <title>Manual configuration of
        <classname>BeanValidationEvenListener</classname></title>

        <programlisting>&lt;hibernate-configuration&gt;
    &lt;session-factory&gt;
       ...
       &lt;property name="javax.persistence.validation.group.pre-persist"&gt;javax.validation.Default&lt;/property&gt;
       &lt;property name="javax.persistence.validation.group.pre-update"&gt;javax.validation.Default&lt;/property&gt;
       &lt;property name="javax.persistence.validation.group.pre-remove"&gt;&lt;/property&gt;
    &lt;/session-factory&gt;
    &lt;event type="pre-update"&gt;
       &lt;listener class="<classname>org.hibernate.cfg.beanvalidation.BeanValidationEventListener</classname>"/&gt;
    &lt;/event&gt;
    &lt;event type="pre-insert"&gt;
        &lt;listener class="<classname>org.hibernate.cfg.beanvalidation.BeanValidationEventListener</classname>"/&gt;
    &lt;/event&gt;
    &lt;event type="pre-delete"&gt;
        &lt;listener class="<classname>org.hibernate.cfg.beanvalidation.BeanValidationEventListener</classname>"/&gt;
    &lt;/event&gt;
&lt;/hibernate-configuration&gt;</programlisting>
      </example>
    </section>

    <section>
      <title>JPA </title>

      <para>If you are using JPA 2 and Hibernate Validator is in the classpath
      the JPA2 specification requires that Bean Validation gets enabled. The
      properties
      <property>javax.persistence.validation.group.pre-persist</property>,
      <property>javax.persistence.validation.group.pre-update</property> and
      <property>javax.persistence.validation.group.pre-remove</property> as
      described in <xref
      linkend="validator-checkconstraints-orm-hibernateevent" /> can in this
      case be configured in <filename>persistence.xml</filename>.
      <filename>persistence.xml</filename> also defines a node validation-mode
      while can be set to <constant>AUTO</constant>,
      <constant>CALLBACK</constant>, <constant>NONE</constant>. The default is
      <constant>AUTO</constant>. </para>

      <para>In a JPA 1 you will have to create and register Hibernate
      Validator yourself. In case you are using Hibernate EntityManager you
      can add a customized version of the
      <classname>BeanValidationEventListener</classname> described in <xref
      linkend="validator-checkconstraints-orm-hibernateevent" /> to your
      project and register it manually.</para>
    </section>
  </section>

  <section id="section-presentation-layer">
    <title>Presentation layer validation</title>

    <para>When working with JSF2 or <productname>JBoss Seam</productname> and
    Hibernate Validator (Bean Validation) is present in the runtime
    environment validation is triggered for every field in the application.
    <xref linkend="example-jsf" /> shows an example of the f:validateBean tag
    in a JSF page. For more information refer to the Seam documentation or the
    JSF 2 specification.</para>

    <example id="example-jsf2">
      <title>Usage of Bean Validation within JSF2</title>

      <programlisting>&lt;h:form&gt;
  <emphasis role="bold">&lt;f:validateBean&gt;</emphasis>
    &lt;h:inputText value=”#{model.property}” /&gt;
    &lt;h:selectOneRadio value=”#{model.radioProperty}” &gt; ... &lt;/h:selectOneRadio&gt;
    &lt;!-- other input components here --&gt;
  <emphasis role="bold">&lt;/f:validateBean&gt;</emphasis>
&lt;/h:form&gt;
</programlisting>
    </example>
  </section>
</chapter>
