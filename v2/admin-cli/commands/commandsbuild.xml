<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<project name="Admin CLI Framework" default="all" basedir=".">  

<!-- ========== Initialize Properties =================================== -->

    <property file="./commandsbuild.properties"/>

    <!-- all -->
    <target name="all" depends="compile, assemble"
        description="Build entire ${component.name}">
    </target>

    <!-- build -->
    <target name="build" depends="compile, assemble"
        description="Build entire ${component.name}">
    </target>


    <!-- init. Initialization involves creating publishing directories and
         OS specific targets. --> 
    <target name="init" description="${component.name} initialization">
        <tstamp>
            <format property="start.time" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>    
        <mkdir dir="${component.classes.dir}"/>
        <mkdir dir="${component.jars.dir}"/>    
	<mkdir dir="${component.javah.home}"/>
	<!--mkdir dir="${javadoc.dir}"/-->
    </target>


    <!-- compile: compile the sources --> 
    <target name="compile" depends="init" 
        description="Compile ${component.name} sources">  

        <echo message="xercesImpl = ${xercesImpl.jar}"/>

        <javac srcdir="${src.dir}" 
               destdir="${component.classes.dir}"
               debug="${javac.debug}" 
               optimize="${javac.optimize}"
               source="${javac.source}" 
	       deprecation="${javac.deprecation}"
	       listfiles="${javac.listfiles}"
               failonerror="true">
            <classpath>
                <!--pathelement location="${dependencies.lib}/xercesImpl.jar"/-->
                <pathelement location="${dependencies.lib}/framework.jar"/>
                <pathelement location="${dependencies.lib}/appserv-deployment-client.jar"/>
                <pathelement location="${dependencies.lib}/appserv-admin.jar"/>
                <pathelement location="${dependencies.lib}/appserv-rt.jar"/>
                <pathelement location="${dependencies.lib}/javaee.jar"/>
                <!-- jaxb-libs.jar now jarred in jaxr-impl.jar -->
                <pathelement location="${dependencies.lib}/jaxr-impl.jar"/>
            </classpath>
            <include name="**/*.java"/>
	    <!-- Although JCov talks about using this flag for
increased resolution of coverage points, using it causes an error for
some classes: (Invalid pc in line number table) - hence I've
discontinued using this flag.
	    <compilerarg value="-Xjcov"/>
	    -->
        </javac>
	<!-- antcall target="do.javah"/-->
    </target>

    <!-- Creating Javadoc -->
    <target name="createdoc" depends="init">
        <javadoc packagenames="com.sun.enterprise.cli.commands.*"
	         sourcepath="${src.dir}"
                 destdir="${javadoc.dir}" />
    </target>

    
    <!--  Calling javah utitility to create C header file -->
    <!--target name="do.javah"
            depends="tools.init.platform">
        <echo message="Generating JNI headers for the CLI Password and Environment interface"/>
        <exec executable="${JAVAH}">
            <arg line="-classpath ${component.classes.dir}"/>
            <arg line="-d ${component.javah.home}"/>
            <arg line="-force"/>
            <arg line="com.sun.enterprise.cli.framework.CliUtil"/>
        </exec>
    </target-->


    <!-- assemble: create jar files and jar files containing localized
    content -->
    <target name="assemble" depends="compile,copymanpages"
        description="Create ${component.name} jar files">               

        <copy todir="${component.classes.dir}">
            <fileset dir="${src.dir}" >
		<include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>

        <copy todir="${component.classes.dir}" flatten="true">
            <fileset dir="${src.dir}" >
                <include name="**/CLIDescriptor.xml" />
            </fileset>
        </copy>

        <!-- need to call createserializedfile file here before archiving -->
        <antcall target="createserializedfile"/>

        <jar jarfile="${component.jars.dir}/admin-cli.jar" update="yes" manifest="commands.mf">
            <fileset dir="${component.classes.dir}">
                <include name="**/*.class"/>
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/help/**"/>
                <include name="**/cli/**"/>
                <exclude name="**/*Test.class"/>
            </fileset>
        </jar>

        <!--jar jarfile="${component.jars.dir}/\cli-${component.name}-doc.jar"
	     basedir="${javadoc.dir}" /-->
    </target>

    <target name="copymanpages" depends="init" >
        <!-- location of manpage files -->
        <property name="docs.publish.dir" value="../../appserv-docs/build"/>
        <property name="manpage.dir" value="${docs.publish.dir}/help"/>
        <property name="help.dir" value="${component.classes.dir}/help"/>

        <echo message="manpage.dir ${manpage.dir}"/>
        <echo message="help.dir ${help.dir}"/>

        <!-- Copy files from help/locale directory to the default directory -->
        <copy todir="${help.dir}">
            <fileset dir="${manpage.dir}"/>
        </copy>
    </target>

    <target name="createserializedfile" depends="init" >
        <!-- location of manpage files -->
        <property name="cli.dir" value="${component.classes.dir}/cli"/>

        <echo message="cli.dir ${cli.dir}"/>
        <mkdir dir="${cli.dir}"/>

        <!-- create the serialized files -->
        <echo message="create serialized files"/>
        <java classname="com.sun.enterprise.cli.framework.CLIDescriptorsReader"
              fork = "true"
              dir = "${component.classes.dir}"
        >
            <classpath>
                <pathelement location="admin-cli.jar"/>
                <pathelement location="${dependencies.lib}/framework.jar"/>
                <pathelement location="${dependencies.lib}/appserv-rt.jar"/>
                <pathelement path="${component.classes.dir}"/>
            </classpath>
       </java>

    </target>

    <target name="compile-tests" depends="compile">
      <javac srcdir="${test.dir}" 
	destdir="${component.classes.dir}"
	debug="${javac.debug}" 
	optimize="${javac.optimize}"
	source="${javac.source}" 
	deprecation="${javac.deprecation}"
	listfiles="${javac.listfiles}"
	failonerror="true"
	classpathref="test.classpath">
        <classpath>
            <pathelement location="admin-cli.jar"/>
            <pathelement location="${dependencies.lib}/framework.jar"/>
            <pathelement location="${dependencies.lib}/appserv-rt.jar"/>
            <pathelement path="${component.classes.dir}"/>
        </classpath>
	<include name="**/*Test.java"/>
	<include name="**/*Tests.java"/>
      </javac>
    </target>

    <path id="coverage.classpath">
      <path location="${component.instrument.dir}"/>
      <path refid="test.classpath"/>
      <path location="${jcov.jar}"/>
    </path>

    <path id="test.classpath">
      <!-- ${test.dir} is used to find test specific resources which
	aren't copied into the classes dir this is first in the
	classpath because we use the same file names as for the real
	deployment, so rather than relying on the properties in those
	files we use test specific properties in test specific files
	on this part of the classpath
	-->
      <path location="${test.dir}"/>
      <path location="${component.classes.dir}"/>
      <path location="${dependencies.lib}/admin-cli.jar"/>
      <path location="${component.jars.dir}/\{component.name}.jar"/>
      <path location="${dependencies.lib}/appserv-rt.jar"/>
      <path location="${dependencies.lib}/appserv-ext.jar"/>
      <path location="${dependencies.lib}/javaee.jar"/>
      <path location="${dependencies.lib}/appserv-admin.jar"/>
      <path location="${dependencies.lib}/commons-launcher.jar"/>
      <path location="${dependencies.lib}/appserv-cmp.jar"/>
      <path location="${junit.jar}"/>
    </path>

    <target name="test" depends="compile-tests">
      <java fork="true" failonerror="false" 
	classname="${package}.${cut}"    
	classpathref="test.classpath">
	<jvmarg value="-Djcov.file=${jcov.file}"/>
        <jvmarg value="-Dcom.sun.aas.configRoot=${AS_CONFIG}"/>
        <!--jvmarg value="-DDebug"/-->
        <!--jvmarg value="-XDebug"/-->
        <!--jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8008"/-->
	<!--jvmarg value="-Djcov.file=${jcov.file} -Dcom.sun.aas.instanceRoot=${AS_INSTALL} -Dcom.sun.aas.instanceName=server -Djava.library.path=${AS_INSTALL}\bin;${AS_ICU_LIB} -Dcom.sun.aas.configRoot=${AS_CONFIG} -Djava.endorsed.dirs=${AS_INSTALL}\lib\endorsed -Dcom.sun.aas.processLauncher=SE"/-->
      </java>
    </target>

    <target name="S1ASCommandTest"
      depends="compile-tests"
      description="Test the S1ASCommandTest - gmake ANT_TARGETS=S1ASCommandTest"
>
      <antcall target="test">
	<param name="cut" value="S1ASCommandTest"/>
      </antcall>

    </target>

    <!-- Only need to instrument the classes once - then for any test
run that we want to generated instrumentation for we simply run the
test with the instrumented classes, rather than the normal ones.

-->

    <target name="instrument" depends="compile-tests, init-data"
      description="Instrument the classes in ${component.classes.dir}
ready for coverage into ${component.instrument.dir}">
      <java fork="yes" dir="${component.classes.dir}" classpath="${jcov.jar}" classname="${jcov.instrument}">
	<arg value="-output=${instrument.dir}"/>
	<arg value="-savebefore=java.lang.System.exit"/>
	<arg value="-saveatend=${package}.${cover.class}Test.main"/>
	<!-- relative path for the directory to be instrumented - JCov
doesn't work the way you'd expect if you give it an absolute path! -->
	<arg value="."/> 
      </java>
    </target>

    <target name="jcov.dynamic" depends="compile-tests, init-data"
description="Generate JCov data dynamically, for the parameter class
'cover.class' (assumed to be in the package $package), putting the
coverage data in ${jcov.file}">
      <java fork="true" failonerror="true" 
	classname="${jcov.dynamic}"
	classpathref="coverage.classpath">
	<jvmarg value="-Djcov.file=${jcov.file}"/>
	<arg value="-savebefore=java.lang.System.exit"/>
	<arg value="-saveatend=${package}.${cover.class}Test.main"/>
	<arg value="${package}.${cover.class}Test"/>
      </java>
    </target>

    <target name="jcov.static" depends ="instrument, assemble"
      description="Generate JCov data statically, for the parameter
class 'cover.class' (assumed to be in the package $package), putting
the coverage data in ${jcov.file}" >
      <antcall target="test">
	<param name="cut" value="${cover.class}Test"/>
	<reference refid="coverage.classpath" torefid="test.classpath"/>
      </antcall>
      <echo message="coverage data in ${jcov.file}"/>
    </target>

    <target name="init-data">
      <delete dir="${component.jcov.dir}"/>
      <mkdir dir="${component.instrument.dir}"/>
      <mkdir dir="${component.report.dir}"/>
    </target>

    <target name="jcov.report"
      description="Generate a coverage report in
      ${component.report.dir}/report.html for the class given by the
      parameter 'cover.class' (assumed to be in package ${package})">
      <echo message="Generating report from coverage data in ${jcov.file}"/>
      <java fork="true" failonerror="true" 
	classname="${jcov.report}"
	classpathref="coverage.classpath">
	  <arg value="-output=${component.report.dir}"/>
	  <arg value="-fmt=html_ns"/>
	  <arg value="-src_root=${src.dir}${path.separator}${test.dir}"/>
	  <arg value="-exclude=junit*"/>
	  <arg value="-exclude=*Test"/>
	  <arg value="-exclude=${package}.TestCommand"/>
	  <arg value="${jcov.file}"/>
      </java>
      <echo message="JCov report in: ${user.dir}/${component.report.dir}/report.html"/>
    </target>
    <target name="CommandLineParserTest"
      depends="compile-tests, assemble"
      description="Test the CommandLineParser - gmake ANT_TARGETS=CommandLineParserTest">
      <java fork="true" failonerror="true" 
	classname="com.sun.enterprise.cli.framework.CommandLineParserTest"    
	classpathref="test.classpath">
      </java>
    </target>

    <target name="CommandTest"
      depends="compile-tests, assemble"
      description="Test the Command - gmake ANT_TARGETS=CommandTest">
      <java fork="true" failonerror="true" 
	classname="com.sun.enterprise.cli.framework.CommandTest"    
	classpathref="test.classpath">
      </java>
    </target>

    <target name="CLITokenizerTest"
      depends="compile-tests, assemble"
      description="Test the CLITokenizer class - gmake ANT_TARGETS=CLITokenizerTest">
      <java fork="true" failonerror="true" 
	classname="com.sun.enterprise.cli.framework.CLITokenizerTest"    
	classpathref="test.classpath">
      </java>
    </target>


    <!-- clean -->
    <target name="clean">
        <delete dir="${component.publish.home}"/>
    </target>


    <target name="tools.init">
    <condition property="windows">
        <os family="windows" />
    </condition>
    <condition property="unix">
        <os family="unix" />
    </condition>
    <condition property="solaris">
        <os name="SunOS"/>
    </condition>
    <condition property="linux">
        <os name="Linux"/>
    </condition>
    <condition property="mac">
        <os name="Mac OS X"/>
    </condition>
</target>
<target name="tools.init.windows" if="windows">
    <property name="JAVAH" value="${java.home}/../bin/javah.exe"/>
    <property name="MAKE" value="gmake"/>
</target>
<target name="tools.init.unix" if="unix" unless="mac">
    <property name="JAVAH" value="${java.home}/../bin/javah"/>
    <property name="MAKE" value="gmake"/>
</target>
    <target name="tools.init.mac" if="mac">
    <property name="JAVAH" value="${java.home}/bin/javah"/>
    <property name="MAKE" value="make"/>
</target>
<target name="tools.init.platform" 
    depends="tools.init, tools.init.windows, tools.init.unix, tools.init.mac">
</target>

</project>
