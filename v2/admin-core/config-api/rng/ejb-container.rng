<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
         xmlns:sch="http://www.ascc.net/xml/schematron"
         xmlns="http://relaxng.org/ns/structure/1.0"
         xmlns:x="http://www.w3.org/1999/xhtml"
         xmlns:ias="http://www.sun.com/ias/validation"
         datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

  <define name="ejb-container">
    <element name="ejb-container">
      <x:div class='dtd'>
        Configuration of EJB Container. 
      </x:div>
      <ref name="ejb-container-attlist"/>
      <optional>
        <ref name="ejb-timer-service">
          <x:div class='dtd'>
            The ejb-timer-service element contains the configuration
            for the ejb timer service.  There is at most one ejb timer
            service per server instance.
          </x:div>
        </ref>
      </optional>
      <zeroOrMore>
        <ref name="property"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="ejb-container-attlist" combine="interleave">
    <x:div class='dtd'>
      Properties apply to all beans in all deployed applications,
      unless different parameters are specified in Sun ONE Application
      Server specific deployment descriptors. Applicability is
      indicated in parentheses, using the following acronyms:
      <x:dl>
        <x:dt>slsb</x:dt><x:dd>stateless session bean</x:dd>
        <x:dt>sfsb</x:dt><x:dd>stateful session bean</x:dd>
        <x:dt>eb</x:dt><x:dd>entity bean (incl. read-only)</x:dd>
      </x:dl>
      <x:p>

      </x:p>
    </x:div>
    <optional>
      <attribute name="steady-pool-size" a:defaultValue="32" ias:le-than="@max-pool-size">
        <x:div class='dtd'>
          (slsb,eb) number of bean instances normally maintained in
          pool. When a pool is first created, it will be populated
          with size equal to steady-pool-size. When an instance is
          removed from the pool, it is replenished asynchronously, so
          that the pool size is at or above the steady-pool-size. This
          additions will be in multiples of pool-resize-quantity. When
          a bean is disassociated from a method invocation, it is put
          back in the pool, subject to max-pool-size limit. If the max
          pool size is exceeded the bean id destroyed immediately. A
          pool cleaning thread, executes at an interval defined by
          pool-idle-timeout-in-seconds. This thread reduces the pool
          size to steady-pool-size, in steps defined by
          pool-resize-quantity. If the pool is empty, the required
          object will be created and returned immediately. This
          prevents threads from blocking till the pool is replenished
          by the background thread. steady-pool-size must be greater
          than 1 and at most equal to the max-pool-size.
        </x:div>
	<data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="pool-resize-quantity" a:defaultValue="16" ias:le-than="@max-pool-size">
        <x:div class='dtd'>
          (slsb,eb) size of bean pool grows (shrinks) in steps
          specified by pool-resize-quantity, subject to max-pool-size
          (steady-pool-size) limit.
        </x:div>
	<data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="max-pool-size" a:defaultValue="64" ias:ge-than="@steady-pool-size">
        <x:div class='dtd'>
          (slsb,eb) maximum size, a pool can grow to. A value of 0
          implies an unbounded pool. Unbounded pools eventually shrink
          to the steady-pool-size, in steps defined by
          pool-resize-quantity.
        </x:div>
	<data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="cache-resize-quantity" a:defaultValue="32" ias:le-than="@max-cache-size">
        <x:div class='dtd'>
          (eb,sfsb) Cache elements have identity, hence growth is in
          unit steps and created on demand. Shrinking of cache happens
          <x:p>
            when cache-idle-timeout-in-seconds timer expires and a
            cleaner thread passivates beans which have been idle for
            longer than cache-idle-timeout-in-seconds. All idle
            instances are passivated at once.  cache-resize-quantity
            does not apply in this case.
          </x:p>
          <x:p>
            when max cache size is reached, an asynchronous task is
            created to bring the size back under the max-cache-size
            limit. This task removes cache-resize-quantity elements,
            consulting the victim-selection-policy.
          </x:p>
          <x:p>
            Must be greater than 1 and less than max-cache-size.          
          </x:p>
        </x:div>
	<data type="nonNegativeInteger">
	  <param name="minInclusive">1</param>
	</data>
      </attribute>
    </optional>
    <optional>
      <attribute name="max-cache-size" a:defaultValue="512">
        <x:div class='dtd'>
          (sfsb,eb) specifies the maximum number of instances that can
          be cached.  For entity beans, internally two caches are
          maintained for higher concurrency: (i) Ready (R$) (ii)
          Active in an Incomplete Transaction (TX$). The TX$ is
          populated with instances from R$ or from the Pool
          directly. When an instance in TX$ completes the transaction,
          it is placed back in the R$ (or in pool, in case an instance
          with same identity already is in R$). max-cache-size only
          specifies the upper limit for R$. The container computes an
          appropriate size for TX$. For SFSBs, after the 
          max-cache-size is reached, beans (as determined by
          the victim-selection-policy) get passivated.
        </x:div>
	<data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="pool-idle-timeout-in-seconds" a:defaultValue="600">
        <x:div class='dtd'>
          (slsb,eb) defines the rate at which the pool cleaning thread
          is executed.  this thread checks if current size is greater
          than steady pool size, it removes pool-resize-quantity
          elements. If the current size is less than steady-pool-size
          it is increased by pool-resize-quantity, with a ceiling of
          min (current-pool-size + pool-resize-quantity,
          max-pool-size) Only objects that have not been accessed for
          more than pool-idle-timeout-in-seconds are candidates for
          removal.
        </x:div>
	<data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="cache-idle-timeout-in-seconds" a:defaultValue="600">
        <x:div class='dtd'>
          (eb, sfsb) specifies the rate at which the cache cleaner thread is
          scheduled.  All idle instances are passivated at once.
        </x:div>
	<data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="removal-timeout-in-seconds" a:defaultValue="5400">
        <x:div class='dtd'>
          (sfsb) Instance is removed from cache or passivation store, if
          it is not accesed within this time. All instances that can
          be removed, will be removed.
        </x:div>
	<data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="victim-selection-policy" a:defaultValue="nru">
        <x:div class='dtd'>
          (sfsb) Victim selection policy when cache needs to
          shrink. Victims are passivated. Entity Bean Victims are
          selected always using fifo discipline. Does not apply to
          slsb because it does not matter, which particular instances
          are removed.
        </x:div>
        <choice>
          <value x:desc="method picks victims, oldest instance first.">fifo</value>
          <value x:desc="algorithm picks least recently accessed instances. ">lru</value>
          <value x:desc="policy tries to pick 'not recently used' instances and is a pseudo-random selection process.">nru</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="commit-option" a:defaultValue="B">
        <x:div class='dtd'>
          (eb) Entity Beans caching is controlled by this
          setting. Commit Option C implies that no caching is
          performed in the container.
        </x:div>
        <choice>
          <value>B</value>
          <value>C</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="session-store">
        <x:div class='dtd'>
          specifies the directory where passivated beans and persisted
          HTTP sessions are stored on the file system.  Defaults to
          $INSTANCE-ROOT/session-store
        </x:div>
	<ref name="file-type"/>
      </attribute>
    </optional>
  </define>
  
</grammar>
