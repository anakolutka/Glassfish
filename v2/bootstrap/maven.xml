<project default="all"
    xmlns:maven="jelly:maven"
    xmlns:j="jelly:core"
    xmlns:define="jelly:define"
    xmlns:util="jelly:util"
    xmlns:i="jelly:interaction"
    xmlns:http="jelly:http"
    xmlns:ant="jelly:ant">
<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->
    
    <goal name="all">
        <attainGoal name="bootstrap"/>
        <attainGoal name="build"/>
        <attainGoal name="configure-runtime"/>
    </goal>


    <!-- Explode Glassfish installation image under the glassfish.home folder-->
    <goal name="bootstrap">
        <attainGoal name="pre-bootstrap"/>
        <ant:mkdir dir="${glassfish.home}"/>
        <ant:unzip src="${maven.repo.local}/${glassfish.image.name}/jars/${glassfish.jar}" dest="${glassfish.home}"/>
        <ant:ant dir="${glassfish.home}" antfile="setup-cluster.xml" target="glassfish-jarunpack"/>
        <j:set var="ant.file" value="setup-cluster.xml" />
        <attainGoal name="copy-setup-file"/>
        <ant:ant dir="." target="do.chmod"/>
    </goal>

    <goal name="pre-bootstrap">
        <maven:reactor basedir="${glassfish.maven}"
               includes="**/project-bootstrap.xml"
               banner="Downloading SNAPSHOT jar files now"
               ignoreFailures="false"/>
    </goal>

    <!-- Explode Glassfish installation image under the glassfish.home folder-->
    <goal name="bootstrap-pe">
        <attainGoal name="pre-bootstrap-pe"/>
        <ant:mkdir dir="${glassfish.home}"/>
        <ant:unzip src="${maven.repo.local}/${glassfish.image.name}/jars/${glassfish_pe.jar}" dest="${glassfish.home}"/>
        <ant:ant dir="${glassfish.home}" antfile="setup.xml" target="glassfish-jarunpack"/>
        <ant:ant dir="." target="do.chmod"/>
    </goal>

    <goal name="pre-bootstrap-pe">
        <maven:reactor basedir="${glassfish.maven}"
               includes="**/project-bootstrap-pe.xml"
               banner="Downloading SNAPSHOT jar file for GlassFish V1 now"
               ignoreFailures="false"/>
    </goal>

    <!-- Bootstrap binaries required for building from source-->
    <goal name="bootstrap-all-pe">
        <maven:reactor basedir="${glassfish.maven}"
               includes="**/project-src.xml"
               banner="Downloading binaries for building from source project"
               ignoreFailures="false"/>
    </goal>

    <postGoal name="bootstrap-all-pe">
        <ant:ant dir="." target="post-bootstrap-pe"/>
    </postGoal>

    <!-- Bootstrap binaries required for building from source-->
    <goal name="bootstrap-all">
        <attainGoal name="clobber"/>
        <attainGoal name="checkout-bootstrap"/>
        <maven:reactor basedir="${glassfish.maven}"
               includes="**/project-src.xml"
               banner="Downloading binaries for building from source project"
               ignoreFailures="false"/>
    </goal>

    <postGoal name="bootstrap-all">
        <ant:ant dir="." target="post-bootstrap"/>
    </postGoal>

    <!-- Bootstrap binaries required for building from source-->
    <goal name="bootstrap-pwc">
        <attainGoal name="clobber"/>
        <maven:reactor basedir="${glassfish.maven}"
               includes="**/project-pwc.xml"
               banner="Downloading binaries for building from source project"
               ignoreFailures="false"/>
    </goal>

    <postGoal name="bootstrap-pwc">
        <ant:ant dir="." target="post-bootstrap-pwc"/>
    </postGoal>

    <goal name="bootstrap-cmp">
        <maven:reactor basedir="${glassfish.root}/${glassfish.cvs.project}/cmp"
           includes="project.xml"
           banner="Downloading binary dependencies for cmp module"
           ignoreFailures="false"/>
    </goal>

    <goal name="bootstrap-admin-ee">
        <maven:reactor basedir="${glassfish.maven}/../admin-ee"
           includes="project.xml"
           banner="Downloading binary dependencies for"
           ignoreFailures="true"/>

        <maven:reactor basedir="${glassfish.maven}/../admin-ee"
           includes="maven.xml"
           banner="Invoking Post-bootstrap for admin-ee"
           goals="bootstrap"
           ignoreFailures="true"/>
    </goal>

    <goal name="bootstrap-docs">
        <maven:reactor basedir="${glassfish.maven}/../appserv-docs"
           includes="project.xml"
           banner="Downloading binary dependencies for"
           ignoreFailures="true"/>

        <maven:reactor basedir="${glassfish.maven}/../appserv-docs"
           includes="maven.xml"
           banner="Invoking Post-bootstrap for appserv-docs"
           goals="resolve-docs"
           ignoreFailures="true"/>
    </goal>

    <goal name="bootstrap-hadb">
        <maven:reactor basedir="${glassfish.maven}/../appserv-core-ee"
           includes="project.xml"
           banner="Downloading compile time dependencies for hadb"
           ignoreFailures="true"/>

        <maven:reactor basedir="${glassfish.maven}/../appserv-core-ee"
           includes="maven.xml"
           banner="Invoking Post-bootstrap for hadb"
           goals="bootstrap"
           ignoreFailures="true"/>
    </goal>

    <!-- Browse source module and invoke ant all -->
    <goal name="build-pe">
        <ant:echo>------------------------------</ant:echo>
        <ant:echo>- Building GlassFish modules -</ant:echo>
        <ant:echo>------------------------------</ant:echo>
        <j:if test="${context.getVariable('native.build').contains('true')}">
            <ant:echo>Adding native module.</ant:echo>
            <j:set var="glassfish_pe.build.dependency.order" value="${glassfish_pe.build.dependency.order},appserv-native"/>
            <ant:echo>New build module-list: ${glassfish_pe.build.dependency.order}</ant:echo>
        </j:if>

        <j:if test="${modules == null}">
            <j:set var="modules" value="${glassfish_pe.build.dependency.order}"/>
        </j:if>

        <j:set var="modules.build" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.build}
        </util:tokenize>

        <j:if test="${context.getVariable('modulesList').contains('cmp') == 'true'}">
           <util:available file="${glassfish.root}/${glassfish.cvs.project}/cmp">
              <ant:echo>Resolving cmp binary dependency</ant:echo>
              <attainGoal name="bootstrap-cmp"/>
           </util:available>
        </j:if>

        <j:if test="${context.getVariable('modulesList').contains('admin-ee') == 'true'}">
            <ant:echo>Resolving admin-ee binary dependency </ant:echo>
            <attainGoal name="bootstrap-admin-ee"/>
        </j:if>

        <j:if test="${context.getVariable('modulesList').contains('appserv-docs') == 'true'}">
            <ant:echo>Resolving appserv-docs binary dependency </ant:echo>
            <attainGoal name="bootstrap-docs"/>
        </j:if>

        <j:if test="${context.getVariable('modulesList').contains('appserv-core-ee') == 'true'}">
            <ant:echo>Resolving hadb compile-time dependency </ant:echo>
            <attainGoal name="bootstrap-hadb"/>
        </j:if>

        <j:set var="path" value="${glassfish.root}/${glassfish.cvs.project}"/>
        <attainGoal name="resolve-addons"/>
        <j:forEach var="module" items="${modulesList}">
            <util:available file="${path}/${module}">
                <j:set var="module.dir" value="${path}/${module}"/>
                <j:set var="glassfish.module.name" value="${module}"/>
                <j:set var="ant.target" value="all"/>
                <attainGoal name="invoke-ant"/>
            </util:available>
        </j:forEach>
    </goal>
    <goal name="resolve-addons">
        <util:available file="${glassfish.root}/${glassfish.cvs.project}/appserv-addons">
            <maven:reactor basedir="${glassfish.root}/${glassfish.cvs.project}/appserv-addons"
              includes="maven.xml"
              goals="resolve"
              ignoreFailures="true"/>
        </util:available>
    </goal>

    <goal name="build-pwc">
        <ant:echo>------------------------</ant:echo>
        <ant:echo>- Building PWC modules -</ant:echo>
        <ant:echo>------------------------</ant:echo>
        <j:if test="${modules == null}">
            <j:set var="modules" value="${pwc.build.dependency.order}"/>
        </j:if>

        <j:set var="modules.build" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.build}
        </util:tokenize>

        <j:set var="path" value="${glassfish.root}/${glassfish.cvs.project}"/>
        <j:forEach var="module" items="${modulesList}">
            <util:available file="${path}/${module}">
                <j:set var="module.dir" value="${path}/${module}"/>
                <j:set var="glassfish.module.name" value="${module}"/>
                <j:set var="ant.target" value="build-pwc"/>
                <attainGoal name="invoke-ant"/>
            </util:available>
        </j:forEach>
    </goal>
    
    <!-- Browse source module and invoke ant all -->
    <goal name="build">

        <maven:reactor basedir="${glassfish.maven}"
               includes="maven.xml"
               goals="build-pe"
               banner="Building SJSAS PE first."
               ignoreFailures="false"/>

        <ant:echo>------------------------------</ant:echo>
        <ant:echo>- Building GlassFish EE modules -</ant:echo>
        <ant:echo>------------------------------</ant:echo>
        <j:if test="${context.getVariable('native.build').contains('true')}">
            <ant:echo>Adding native module.</ant:echo>
            <j:set var="glassfish.build.dependency.order" value="${glassfish.build.dependency.order},appserv-native-ee"/>
            <ant:echo>New build module-list: ${glassfish.build.dependency.order}</ant:echo>
        </j:if>

        <j:if test="${modules == null}">
            <j:set var="modules" value="${glassfish.build.dependency.order}"/>
        </j:if>

        <j:set var="modules.build" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.build}
        </util:tokenize>

        <j:if test="${context.getVariable('modulesList').contains('admin-ee') == 'true'}">
            <ant:echo>Resolving admin-ee binary dependency </ant:echo>
            <attainGoal name="bootstrap-admin-ee"/>
        </j:if>

        <j:if test="${context.getVariable('modulesList').contains('appserv-docs') == 'true'}">
            <ant:echo>Resolving appserv-docs binary dependency </ant:echo>
            <attainGoal name="bootstrap-docs"/>
        </j:if>

        <j:if test="${context.getVariable('modulesList').contains('appserv-core-ee') == 'true'}">
            <ant:echo>Resolving hadb compile-time dependency </ant:echo>
            <attainGoal name="bootstrap-hadb"/>
        </j:if>

        <j:set var="path" value="${glassfish.root}/${glassfish.cvs.project}"/>
        <j:forEach var="module" items="${modulesList}">
            <util:available file="${path}/${module}">
                <j:set var="module.dir" value="${path}/${module}"/>
                <j:set var="glassfish.module.name" value="${module}"/>
                <j:set var="ant.target" value="all"/>
                <attainGoal name="invoke-ant"/>
            </util:available>
        </j:forEach>
    </goal>

    <!-- Checkout bootstrap module -->
    <goal name="checkout-bootstrap">
        <ant:echo>Checking out: ${glassfish.cvs.project}/${glassfish.cvs.module} </ant:echo>
        <ant:cvs cvsRoot="${glassfish.cvsroot}"
                 tag="${glassfish.cvstag}"
                 failonerror="true"
                 package="${glassfish.cvs.project}/${glassfish.cvs.module}"
                 dest="${glassfish.root}"/>
    </goal>

    <!-- Checkout every module -->
    <goal name="checkout-pe">
        <attainGoal name="checkout-bootstrap"/>
        <ant:echo>----------------------------------</ant:echo>
        <ant:echo>- Checking out GlassFish modules -</ant:echo>
        <ant:echo>----------------------------------</ant:echo>
        <j:if test="${context.getVariable('native.build').contains('true')}">
            <ant:echo>Adding native module.</ant:echo>
            <j:set var="glassfish_pe.build.dependency.order" value="${glassfish_pe.build.dependency.order},appserv-native"/>
            <ant:echo>New checkout module-list: ${glassfish_pe.build.dependency.order}</ant:echo>
        </j:if>
        <j:if test="${modules == null}">
            <j:set var="modules" value="${glassfish_pe.build.dependency.order}"/>
        </j:if>

        <j:set var="modules.checkout" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.checkout}
        </util:tokenize>

        <j:forEach var="module" items="${modulesList}">
            <j:choose>
                <j:when test="${context.getVariable('glassfish_pe.build.dependency.order').contains(context.getVariable('module'))}">
                    <ant:echo>Checking out from source: ${module}</ant:echo>
                    <ant:cvs cvsRoot="${glassfish.cvsroot}" 
                             tag="${glassfish.cvstag}"
                             package="${glassfish.cvs.project}/${module}"
                             failonerror="true"
                             dest="${glassfish.root}"/>
                </j:when>
                <j:otherwise>
                    <ant:echo>WARNING: Invalid CVS module: ${module}</ant:echo>
                </j:otherwise>
            </j:choose>
        </j:forEach>
    </goal>

    <!-- Checkout GlassFish module -->
    <goal name="checkout">

	<maven:reactor basedir="${glassfish.maven}"
               includes="maven.xml"
               goals="checkout-pe"
               banner="Checking out SJSAS PE first."
               ignoreFailures="false"/>

        <ant:echo>----------------------------------</ant:echo>
        <ant:echo>- Checking out GlassFish modules -</ant:echo>
        <ant:echo>----------------------------------</ant:echo>
        <j:if test="${context.getVariable('native.build').contains('true')}">
            <ant:echo>Adding native module.</ant:echo>
            <j:set var="glassfish.build.dependency.order" value="${glassfish.build.dependency.order},appserv-native-ee"/>
            <ant:echo>New checkout module-list: ${glassfish.build.dependency.order}</ant:echo>
        </j:if>
        <j:if test="${modules == null}">
            <j:set var="modules" value="${glassfish.build.dependency.order}"/>
        </j:if>

        <j:set var="modules.checkout" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.checkout}
        </util:tokenize>

        <j:forEach var="module" items="${modulesList}">
            <j:choose>
                <j:when test="${context.getVariable('glassfish.build.dependency.order').contains(context.getVariable('module'))}">
                    <ant:echo>Checking out from source: ${module}</ant:echo>
                    <ant:cvs cvsRoot="${glassfish.cvsroot}" 
                             tag="${glassfish.cvstag}"
                             package="${glassfish.cvs.project}/${module}"
                             failonerror="true"
                             dest="${glassfish.root}"/>
                </j:when>
                <j:otherwise>
                    <ant:echo>WARNING: Invalid CVS module: ${module}</ant:echo>
                </j:otherwise>
            </j:choose>
        </j:forEach>
    </goal>
    
    <!-- Checkout quicklook module -->
    <goal name="checkout-quicklook">
        <ant:echo>Checking out Quicklook Tests: </ant:echo>
        <ant:cvs cvsRoot="${glassfish.cvsroot}"
                 tag="${glassfish.cvstag}"
                 failonerror="true"
                 package="${glassfish.cvs.project}/appserv-tests/config
                 ${glassfish.cvs.project}/appserv-tests/eeconfig
                 ${glassfish.cvs.project}/appserv-tests/lib
                 ${glassfish.cvs.project}/appserv-tests/sqetests
                 ${glassfish.cvs.project}/appserv-tests/util
                 ${glassfish.cvs.project}/appserv-tests/QuickLook-README.txt
                 ${glassfish.cvs.project}/appserv-tests/config.properties
                 ${glassfish.cvs.project}/appserv-tests/project.properties
                 ${glassfish.cvs.project}/appserv-tests/project.xml
                 ${glassfish.cvs.project}/appserv-tests/maven.xml
                 ${glassfish.cvs.project}/appserv-tests/build.xml"
                 dest="${glassfish.root}"/>
    </goal>
   

    <!-- Browse source module and invoke ant clean -->
    <goal name="clean-pe">
        <j:if test="${modules == null}">
            <j:set var="modules" value="${glassfish_pe.build.dependency.order}"/>
        </j:if>

        <j:set var="modules.build" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.build}
        </util:tokenize>
        <j:set var="path" value="${glassfish.root}/${glassfish.cvs.project}"/>
        <j:forEach var="module" items="${modulesList}">
            <util:available file="${path}/${module}">
                <j:set var="module.dir" value="${path}/${module}"/>
                <j:set var="glassfish.module.name" value="${module}"/>
                <j:set var="ant.target" value="clean"/>
                <attainGoal name="invoke-ant"/>
            </util:available>
        </j:forEach>
    </goal>

    <!-- Browse GlassFish source module and invoke ant clean -->
    <goal name="clean">
	<maven:reactor basedir="${glassfish.maven}"
               includes="maven.xml"
               goals="clean-pe"
               banner="Cleaning SJSAS PE first."
               ignoreFailures="false"/>

        <j:if test="${modules == null}">
            <j:set var="modules" value="${glassfish.build.dependency.order}"/>
        </j:if>

        <j:set var="modules.build" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.build}
        </util:tokenize>
        <j:set var="path" value="${glassfish.root}/${glassfish.cvs.project}"/>
        <j:forEach var="module" items="${modulesList}">
            <util:available file="${path}/${module}">
                <j:set var="module.dir" value="${path}/${module}"/>
                <j:set var="glassfish.module.name" value="${module}"/>
                <j:set var="ant.target" value="clean"/>
                <attainGoal name="invoke-ant"/>
            </util:available>
        </j:forEach>
    </goal>

    <!-- Configure the server image based on project.properties -->
    <goal name="configure-runtime">
        <j:choose>
            <j:when test="${interactive != null}">
                <ant:echo>Supply the admin user's password and override any of the other initial configuration settings as necessary.</ant:echo>
                <i:ask question="Admin User:" default="admin" answer="adminUser"/>
                <j:if test="${empty(adminUser)}">
                    <j:set var="adminUser" value="admin"/>
                </j:if>
                
                <i:ask question="Admin User's Password (8 chars minimum):" answer="adminPassword"/>
                <i:ask question="Re-enter Password:" answer="adminPassword2"/>
                <j:if test="${adminPassword != adminPassword2}">
                    <ant:fail>#### Passwords do not match.  ####</ant:fail>
                </j:if>

                <i:ask question="Admin Port" default="4848" answer="adminPort"/>

                <j:catch var="exception">
                    <http:get uri="http://localhost:${adminPort}"/>
                </j:catch>    

                <j:if test="${exception == null}">
                    <ant:fail>#### Admin Port in use  ####</ant:fail>
                </j:if>

                <i:ask question="HTTP Port" default="8080" answer="httpPort"/>

                <j:catch var="exception">
                    <http:get uri="http://localhost:${httpPort}"/>
                </j:catch>    

                <j:if test="${exception == null}">
                    <ant:fail>#### HTTP Port in use  ####</ant:fail>
                </j:if>

                <i:ask question="HTTPS Port" default="8181" answer="httpsPort"/>

                <j:catch var="exception">
                    <http:get uri="http://localhost:${httpsPort}"/>
                </j:catch>    

                <j:if test="${exception == null}">
                    <ant:fail>#### HTTPS Port in use  ####</ant:fail>
                </j:if>
                <ant:echo>Please wait while configuring....</ant:echo>
            </j:when>
        </j:choose>
        
        <ant:copy file="${glassfish.maven}/setup.xml" todir="${glassfish.home}" overwrite="true"/>
        <ant:ant dir="${glassfish.home}" antfile="setup.xml" target="all"/>
    </goal>
  
    <!-- Configures GlassFish -->
    <goal name="configure-cluster">
        <ant:copy file="${glassfish.maven}/setup-cluster.xml" todir="${glassfish.home}" overwrite="true"/>
        <ant:ant dir="${glassfish.home}" antfile="setup-cluster.xml" target="all"/>
    </goal>

    <!-- Delete the GlassFish image completely -->
    <goal name="clobber">
        <ant:echo>Deleting Glassfish Image under ${glassfish.home} </ant:echo>
        <ant:delete dir="${glassfish.home}"/>
    </goal>


    <!-- Cleanup the domains in server image -->
    <goal name="clean-config">
        <ant:copy file="${glassfish.maven}/setup.xml" todir="${glassfish.home}" overwrite="true"/>
        <ant:ant dir="${glassfish.home}" antfile="setup.xml" target="clean-runtime">
        </ant:ant>
    </goal>


    <goal name="create-pe-snapshot">
        <ant:echo>Creating Glassfish SNAPSHOT under ${glassfish.home}/.. </ant:echo>
        <j:set var="ant.file" value="setup.xml" />
        <attainGoal name="compress-jars"/>
        <ant:zip destfile="${glassfish.home}/../${glassfish_pe.jar}">
            <fileset dir="${glassfish.home}">
                <exclude name="samples/**"/>
                <include name="**"/>
            </fileset>
        </ant:zip>
        <attainGoal name="uncompress-jars"/>
    </goal>

    <goal name="create-snapshot">
        <j:set var="ant.file" value="setup-cluster.xml" />
        <attainGoal name="copy-setup-file"/>
        <attainGoal name="compress-jars"/>
        <ant:echo>Creating Glassfish SNAPSHOT under ${glassfish.home}/.. </ant:echo>
        <ant:zip destfile="${glassfish.home}/../${glassfish.jar}">
            <fileset dir="${glassfish.home}">
                <include name="**"/>
            </fileset>
        </ant:zip>
        <attainGoal name="uncompress-jars"/>
    </goal>

    <goal name="copy-setup-file">
        <ant:copy file="${glassfish.maven}/${ant.file}" todir="${glassfish.home}" overwrite="true"/>
    </goal>

    <goal name="create-persistence-snapshot">
        <ant:echo>Creating EJB 3.0 Persistence SNAPSHOT under ${glassfish.home}/..</ant:echo>
        <ant:jar jarfile="${glassfish.home}/../${persistence.jar}">
            <fileset dir="${glassfish.home}/lib" includes="toplink-essentials.jar"/>
            <fileset dir="${glassfish.home}/lib" includes="toplink-essentials-agent.jar"/>
            <fileset dir="${glassfish.maven}/legal" includes="CDDLv1.0.txt"/>
        </ant:jar>
    </goal>

    <goal name="create-native-snapshot">
        <ant:ant dir="." target="create-native-image"/>
    </goal>

    <!-- When invoking ant:ant, ant's task rmic and xslt are broken due to
         a null classloader. This will only be fixed in Maven 2.0, so 
         below is a workaround -->
    <goal name="invoke-ant" description="execute ant">
        <j:set var="log.name" value="${glassfish.module.name}.log"/>
        <ant:delete file="${log.name}" failonerror="false"/>
        <j:catch>
            <ant:record name="${log.name}" loglevel="verbose" action="start"/>
        </j:catch>

        <j:set var="build.file" value="${module.dir}/build.xml"/>

        <j:if test="${context.getVariable('ant.file').contains('') == 'true'}">
            <util:available file="${module.dir}/${ant.file}">
                <ant:echo>Setting Build file to ${module.dir}/${ant.file}</ant:echo>
                <j:set var="build.file" value="${module.dir}/${ant.file}"/>
            </util:available>
        </j:if>

        <java classname="org.apache.tools.ant.Main" fork="true" failonerror="false" maxmemory="256M">
            <classpath>
                <fileset dir="${glassfish.home}/lib/ant/lib">
                    <include name="*.jar" />
                </fileset>
                <pathelement path="${java.home}/../lib/tools.jar" />
            </classpath>
            <sysproperty key="ant.home" value="${glassfish.home}/lib/ant" />
            <j:if test='${maven.debugOn}'>
              <arg value='-debug' />
            </j:if>
            <arg value="-f"/>
            <arg value="${build.file}"/>
            <arg value="-Dglassfish.maven=${glassfish.maven}"/>
            <arg value="-Dglassfish.home=${glassfish.home}"/>
            <arg value="${ant.target}"/>
            <arg value="-Dbuild_id=${build_id}"/> 
            <arg value="-Dmaven.proxy.host=${maven.proxy.host}"/> 
            <arg value="-Dmaven.proxy.port=${maven.proxy.port}"/> 
            <arg value="-Dnative.build=${native.build}"/> 
            <arg value="-Duse.jks=${use.jks}"/> 
            <arg value="${ant.verbose}"/>
        </java>
        
        <!-- If an error occured, make sure we reports it -->
        <j:catch>
            <util:loadText var="logs" file="${log.name}"/>
        </j:catch>

        <!-- Check for build failure -->
        <j:if test="${logs.contains('BUILD FAILED')}">
            <j:choose>
                <j:when test="${logs.contains('Unable to rename')}">
                    <j:invokeStatic className="java.lang.System" method="gc"/>
                    <attainGoal name="win32lock"/>
                </j:when>
                <j:otherwise>
                    <fail/>
                </j:otherwise>
            </j:choose>
        </j:if>
        <j:catch>
            <ant:record name="${log.name}" action="stop"/>
        </j:catch>
    </goal>


    <!-- On Windows, file locking is intermitently occuring,
         preventing the build of some modules (jar locking).
         Below is a workaround that sleep 30 seconds and then
         try again
    -->
    <goal name="win32lock">
        <!-- Ask the VM to free the lock -->
        <j:invokeStatic className="java.lang.System" method="gc"/>
        <j:forEach var="i" begin="1" end="5" varStatus="status">
            <j:if test="${logs.contains('BUILD SUCCESSFUL')}">
                <j:break/> 
            </j:if>
            <ant:echo> Sleeping 5 seconds to clean and wait for files to unlock</ant:echo>
            <j:invokeStatic className="java.lang.System" method="gc"/>
            <ant:sleep seconds="5"/>
            <j:invokeStatic className="java.lang.System" method="gc"/>
            <attainGoal name="invoke-ant"/>
            <util:loadText var="logs" file="${log.name}"/>
        </j:forEach>
        
        <j:if test="${!logs.contains('BUILD SUCCESSFUL')}">
            <fail/>
        </j:if>
    </goal>

    <goal name="compress-jars">
        <j:set var="ant.target" value="compress-jars" />
        <j:set var="module.dir" value="${glassfish.home}" />
        <j:set var="ant.file" value="${ant.file}" />
        <attainGoal name="invoke-ant"/>
    </goal>

    <goal name="uncompress-jars">
        <j:set var="ant.target" value="uncompress-jars" />
        <j:set var="module.dir" value="${glassfish.home}" />
        <j:set var="ant.file" value="${ant.file}" />
        <attainGoal name="invoke-ant"/>
    </goal>

    <goal name="build-jarinstaller">
        <ant:copy file="${glassfish.maven}/setup-cluster.xml" todir="${glassfish.home}" overwrite="true"/>
        <j:set var="ant.file" value="setup-cluster.xml" />
        <attainGoal name="compress-jars"/>
        <ant:ant dir="${glassfish.home}" antfile="setup-cluster.xml" target="build-jarinstaller">
        </ant:ant>
        <attainGoal name="uncompress-jars"/>
    </goal>

    <goal name="build-jarinstaller-pe">
        <ant:copy file="${glassfish.maven}/setup.xml" todir="${glassfish.home}" overwrite="true"/>
        <j:set var="ant.file" value="setup.xml" />
        <attainGoal name="compress-jars"/>
        <ant:ant dir="${glassfish.home}" antfile="setup.xml" target="build-jarinstaller-pe" >
        </ant:ant>
        <attainGoal name="uncompress-jars"/>
    </goal>

    <goal name="build-persistence-jarinstaller">
        <ant:copy file="${glassfish.maven}/setup.xml" todir="${glassfish.home}" overwrite="true"/>
        <ant:mkdir dir="${glassfish.home}/../glassfish-persistence"/>
        <ant:copy file="${glassfish.maven}/legal/README-persistence" 
             tofile="${glassfish.home}/../glassfish-persistence/README" overwrite="true"/>
        <ant:copy file="${glassfish.maven}/legal/3RD-PARTY-LICENSE-persistence.txt" 
             tofile="${glassfish.home}/../glassfish-persistence/3RD-PARTY-LICENSE.txt" 
             overwrite="true"/>
        <ant:concat destfile="${glassfish.home}/../glassfish-persistence/LICENSE.txt" force="yes">
             <filelist dir="${glassfish.maven}/legal" 
                 files="CDDLHeader.txt,CDDLv1.0.txt"/>
             </ant:concat>
        <ant:ant dir="${glassfish.home}" antfile="setup.xml" target="build-persistence-jarinstaller">
        </ant:ant>
    </goal>

    <!-- Checkout every module -->
    <goal name="checkout-pwc">
        <ant:echo>----------------------------</ant:echo>
        <ant:echo>- Checking out PWC modules -</ant:echo>
        <ant:echo>----------------------------</ant:echo>
        
        <j:if test="${modules == null}">
            <j:set var="modules" value="${pwc.build.dependency.order}"/>
        </j:if>

        <j:set var="modules.checkout" value="${modules}"/>
        <util:tokenize var="modulesList" delim="," trim="true">
            ${modules.checkout}
        </util:tokenize>
        <j:forEach var="module" items="${modulesList}">
            <j:choose>
                <j:when test="${context.getVariable('pwc.build.dependency.order').contains(context.getVariable('module'))}">
                    <ant:echo>Checking out from source: ${module}</ant:echo>
                    <ant:cvs cvsRoot="${glassfish.cvsroot}" 
                             tag="${glassfish.cvstag}"
                             package="${glassfish.cvs.project}/${module}"
                             failonerror="true"
                             dest="${glassfish.root}"/>
                </j:when>
                <j:otherwise>
                    <ant:echo>WARNING: Invalid CVS module: ${module}</ant:echo>
                </j:otherwise>
            </j:choose>
        </j:forEach>
    </goal>

    <goal name="build-javaee">
        <ant:ant dir="." target="build-javaee"/>
    </goal>
</project>
