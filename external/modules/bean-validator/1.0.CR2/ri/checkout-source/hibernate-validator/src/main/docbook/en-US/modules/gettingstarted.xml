<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: gettingstarted.xml 16459 2009-04-27 14:19:31Z hardy.ferentschik $ -->
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="validator-gettingstarted">
  <title id="getting-started">Getting started</title>

  <para>This chapter will show you how to quickly get started with the
  reference implementation (RI) of the Bean Validation API as specified by JSR
  303. Be sure to fulfill the following prerequisites in order to
  proceed:</para>

  <itemizedlist>
    <listitem>
      <para>As the Bean Validation API expresses constraints by the means of
      annotations, Java version 5 or later must be installed</para>
    </listitem>

    <listitem>
      <para>As <ulink url="http://maven.apache.org/">Apache Maven</ulink> will
      be used as build tool in the following, Maven must be installed (help
      can be found <ulink
      url="http://maven.apache.org/download.html">here</ulink>) and a
      functioning internet connection is required to allow Maven for the
      download of all dependent libraries</para>
    </listitem>

    <listitem>
      <para>Once Maven is installed you should configure your remote
      repository by adding the following to your
      <filename>settings.xml</filename>: <programlisting>&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;jboss&lt;/id&gt;
        &lt;url&gt;http://repository.jboss.com/maven2&lt;/url&gt;
        &lt;releases&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;/releases&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
        &lt;/snapshots&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;</programlisting>More information about
      <filename>settings.xml</filename> can be found in the <ulink
      url="http://maven.apache.org/ref/2.0.8/maven-settings/settings.html">Maven
      Local Settings Model</ulink>.</para>
    </listitem>
  </itemizedlist>

  <section id="validator-gettingstarted-createproject" revision="1">
    <title>Setting up a new Maven project</title>

    <para>Start by creating new Maven project using the Maven archetype plugin
    as follows:</para>

    <para><programlisting>mvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart</programlisting></para>

    <para>and specify the requested properties:</para>

    <itemizedlist>
      <listitem>
        <para>groupId: An identifier for your company, e.g.
        com.mycompany</para>
      </listitem>

      <listitem>
        <para>artifactId: An identifier for the new project, e.g.
        beanvalidation-gettingstarted</para>
      </listitem>

      <listitem>
        <para>version: Initial version for the new project, e.g.
        1.0-SNAPSHOT</para>
      </listitem>

      <listitem>
        <para>package: The top-level package for the new project, e.g.
        com.mycompany</para>
      </listitem>
    </itemizedlist>

    <para>Finally confirm all entered values and change into the newly created
    project directory. All properties of a Maven project (such as its
    dependencies to other libraries, the steps to be performed during build
    etc.) are described in a file called pom.xml (<emphasis
    role="bold">p</emphasis>roject <emphasis role="bold">o</emphasis>bject
    <emphasis role="bold">m</emphasis>odel), located in the project's root
    directory. Now open the project's pom.xml and perform the following
    changes:</para>

    <itemizedlist>
      <listitem>
        <para>Add the dependency to hibernate-validator</para>
      </listitem>

      <listitem>
        <para>Add an SLF4J binding. As Hibernate Validator uses the logging
        facade <ulink url="http://www.slf4j.org/">SLF4J</ulink>, it can make
        use of your preferred logging API. In the following the binding to
        <ulink url="http://logging.apache.org/log4j/">log4j</ulink> is
        used.</para>
      </listitem>

      <listitem>
        <para>Set the compiler level to 1.5 (as we want to use
        annotations)</para>
      </listitem>

      <listitem>
        <para>Use JUnit 4 as testing framework</para>
      </listitem>
    </itemizedlist>

    <para>Having done this, your pom.xml should look like this:</para>

    <programlisting>&lt;project 
    xmlns="http://maven.apache.org/POM/4.0.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.mycompany&lt;/groupId&gt;
    &lt;artifactId&gt;beanvalidation-gettingstarted&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
            &lt;version&gt;4.0.0.Beta1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
            &lt;version&gt;1.4.2&lt;/version&gt;
            &lt;scope&gt;runtime&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.5&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.5&lt;/source&gt;
                    &lt;target&gt;1.5&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</programlisting>
  </section>

  <section id="validator-gettingstarted-createmodel" revision="1">
    <title>Applying constraints to a model class</title>

    <para>Having set up the project, it's time now to actually make use of the
    Bean Validation API. Therefore, open the project in the IDE of your choice
    (for Eclipse, you may type mvn eclipse:eclipse to create a standard
    Eclipse project configuration OR you may use the <ulink
    url="http://m2eclipse.codehaus.org/">M2Eclipse</ulink> plugin. NetBeans
    has great Maven support too, as described <ulink
    url="http://wiki.netbeans.org/MavenBestPractices">here</ulink>) and create
    the following class as an exemplary domain object:</para>

    <para><programlisting>package com.mycompany;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

public class Car {

    @NotNull
    private String manufacturer;

    @NotNull
    @Size(min = 2, max = 14)
    private String licensePlate;

    @Min(2)
    private int seatCount;
    
    public Car(String manufacturer, String licencePlate, int seatCount) {

        this.manufacturer = manufacturer;
        this.licensePlate = licencePlate;
        this.seatCount = seatCount;
    }

    //getters and setters ...

}</programlisting></para>

    <para><classname>@NotNull</classname>, <classname>@Size</classname> and
    <classname>@Min</classname> are so-called constraint annotions, that we
    use to declare constraints, which shall be applied to the fields of a
    <classname>Car</classname> instance:</para>

    <itemizedlist>
      <listitem>
        <para><property>manufacturer</property> shall never be null</para>
      </listitem>

      <listitem>
        <para><property>licensePlate</property> shall never be null and must
        be between 2 and 14 characters long</para>
      </listitem>

      <listitem>
        <para><property>seatCount</property> shall be at least 2.</para>
      </listitem>
    </itemizedlist>

    <para>To perform a validation of these constraints, we use the
    <classname>Validator</classname> interface defined by the specification.
    Let's try it in a test for our <classname>Car</classname> class:</para>

    <para><programlisting>package com.mycompany;

import static org.junit.Assert.*;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import org.junit.BeforeClass;
import org.junit.Test;

public class CarTest {

    private static Validator validator;

    @BeforeClass
    public static void setUp() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    public void manufacturerIsNull() {

        Car car = new Car(null, "DD-AB-123", 4);

        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
            validator.validate(car);

        assertEquals(1, constraintViolations.size());
        assertEquals(
            "may not be null", constraintViolations.iterator().next().getMessage());
    }

    @Test
    public void licensePlateTooShort() {

        Car car = new Car("Morris", "D", 4);

        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = 
            validator.validate(car);

        assertEquals(1, constraintViolations.size());
        assertEquals(
            "size must be between 2 and 14", constraintViolations.iterator().next().getMessage());
    }
    
    @Test
    public void seatCountTooLow() {

        Car car = new Car("Morris", "DD-AB-123", 1);

        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
            validator.validate(car);

        assertEquals(1, constraintViolations.size());
        assertEquals(
            "must be greater than or equal to 2", constraintViolations.iterator().next().getMessage());
    }

    @Test
    public void carIsValid() {

        Car car = new Car("Morris", "DD-AB-123", 2);

        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
            validator.validate(car);

        assertEquals(0, constraintViolations.size());
    }
}</programlisting></para>

    <para>In the <methodname>setUp()</methodname> method we get a
    <classname>Validator</classname> object from the
    <classname>ValidatorFactory</classname>. A
    <classname>Validator</classname> instance is thread-safe and may be reused
    multiple times, therefore we store it as field of our test class. We can
    use the validator now to validate the different car objects in the test
    methods.</para>

    <para>The <methodname>validate()</methodname> method returns a set of
    <classname>ConstraintViolation</classname> objects, which we can iterate
    through in order to see which validation errors occured. The first three
    test methods show some expected constraint violations:</para>

    <itemizedlist>
      <listitem>
        <para>The <classname>@NotNull</classname> constraint on manufacturer
        is violated in <methodname>manufacturerIsNull()</methodname></para>
      </listitem>

      <listitem>
        <para>The <classname>@Size</classname> constraint on licensePlate is
        violated in <methodname>licensePlateTooShort()</methodname></para>
      </listitem>

      <listitem>
        <para>The <classname>@Min</classname> constraint on seatCount is
        violated in <methodname>seatCountTooLow()</methodname></para>
      </listitem>
    </itemizedlist>

    <para>If the object could be validated successfully (as in
    <methodname>carIsValid()</methodname>),
    <methodname>validate()</methodname> returns an empty set.</para>

    <para>Note that we only use classes from the package
    <package>javax.validation</package>, which stems from the Bean Validation
    standard API. As we don't reference any classes of the RI directly, it
    would be no problem to switch to another implementation of the API, should
    that need arise.</para>
  </section>

  <section id="validator-gettingstarted-whatsnext" revision="1">
    <title>Where to go next?</title>

    <para>That concludes our 5 minute tour through the world of the Bean
    Validation RI. We will complete this documentation in our coming releases.
    For now we recommend to refer to the JSR 303 specification directly for
    more examples. The 1.0.CR2 version of this specification is available
    <ulink url="http://in.relation.to/service/File/11150">here</ulink>.</para>
  </section>
</chapter>
