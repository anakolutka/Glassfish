<?xml version="1.0" encoding="iso-8859-1"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<!--
 Copyright 2004-2005 Sun Microsystems, Inc.  All rights reserved.
 Use is subject to license terms.
-->
<project name="Monitoring Infrastructure" default="all" basedir=".">  

<!-- ========== Initialize Properties =================================== -->

    <property file="../../bootstrap/project.properties"/>
    <property file="./build.properties"/>

    <!-- all -->
    <target name="all" depends="compile, assemble"
        description="Build entire ${component.name}">
    </target>

    <!-- build -->
    <target name="build" depends="compile, assemble"
        description="Build entire ${component.name}">
    </target>

    <!-- init. Initialization involves creating publishing directories and
         OS specific targets. --> 
    <target name="init" description="${component.name} initialization">
        <tstamp>
            <format property="start.time" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>    
        <mkdir dir="${component.classes.dir}"/>
    </target>

    <path id="compile.classpath">
      <pathelement location="${javaee.jar}"/>
      <pathelement location="${appserv-rt.jar}"/>
    </path>

    <!-- compile: compile the sources --> 
    <target name="compile" depends="init" 
        description="Compile ${component.name} sources">  
     
        <javac srcdir="${src.dir}" 
               destdir="${component.classes.dir}"
               debug="${javac.debug}"
               optimize="${javac.optimize}"
               source="${javac.source}"
               deprecation="${javac.deprecation}"
               failonerror="true">
            <classpath>
	      <path refid="compile.classpath"/>
	    </classpath>
            <include name="**/*.java"/>
            <exclude name="com/sun/enterprise/admin/monitor/tests/**"/>
        </javac>
    </target>
    
    <!-- assemble: create jar files and jar files containing localized content -->
      <target name="assemble" depends="compile"
        description="Create ${component.name} jar files">               

        <copy todir="${component.classes.dir}">
	  <fileset dir="${src.dir}"
                     includes="**/*.properties"/>
        </copy>

        <jar jarfile="${appserv-admin.jar}" update="yes">
            <fileset dir="${component.classes.dir}">
                <include name="**/*.class"/>
                <include name="**/*.properties"/>
            </fileset>
        </jar>                        
    </target>

    <!-- clean -->
    <target name="clean">
        <delete dir="${component.classes.dir}"/>
    </target>


   <!--                                                -->
   <!--       Junit and Jcov Targets                   -->
   <!--                                                --> 
    

    <path id="coverage.classpath">
      <path location="${component.instrument.dir}"/>
      <path refid="test.classpath"/>
      <path location="${jcov.jar}"/>
    </path>

    <path id="test.classpath">
      <!-- ${test.dir} is used to find test specific resources which
     aren't copied into the classes dir this is first in the
     classpath because we use the same file names as for the real
     deployment, so rather than relying on the properties in those
     files we use test specific properties in test specific files
     on this part of the classpath
     -->
      <path location="${test.dir}"/>
      <path location="${component.classes.dir}"/>
      <path location="${appserv-rt.jar}"/>
      <path location="${cw-core.jar}"/>
      <path location="${javaee.jar}"/>
      <path location="${junit.jar}"/>
    </path>

    <target name="instrument" depends="compile-tests, init-data"
      description="Instrument the classes in ${component.classes.dir}
ready for coverage into ${component.instrument.dir}">
      <java fork="yes" dir="${component.classes.dir}" classpath="${jcov.jar}" classname="${jcov.instrument}" >
     <arg value="-output=${instrument.dir}"/>
     <arg value="-savebefore=java.lang.System.exit"/>
     <!-- <arg value="-saveatend=${package}.${COVER.class}Test.main"/> -->
     <arg value="-saveatend=${package}.MonitorSuite.main"/>
     <!-- relative path for the directory to be instrumented - JCov
doesn't work the way you'd expect if you give it an absolute path! -->
     <arg value="."/>
      </java>
    </target>

    <target name="jcov.dynamic" depends="compile-tests, init-data"
description="Generate JCov data dynamically, for the parameter class
'cover.class' (assumed to be in the package $package), putting the
coverage data in ${jcov.file}">
      <java fork="true" failonerror="true"
     classname="${jcov.dynamic}"
     classpathref="coverage.classpath">
     <jvmarg value="-Djcov.file=${jcov.file}"/>
     <arg value="-savebefore=java.lang.System.exit"/>
     <arg value="-saveatend=${package}.${cover.class}Test.main"/>
     <arg value="${package}.${cover.class}Test"/>
      </java>
    </target>

    <target name="jcov.static" depends ="instrument, assemble"
      description="Generate JCov data statically, for the parameter
class 'cover.class' (assumed to be in the package $package), putting
the coverage data in ${jcov.file}" >
      <antcall target="test">
     <param name="cut" value="MonitorSuite"/>
     <reference refid="coverage.classpath" torefid="test.classpath"/>
      </antcall>
      <echo message="coverage data in ${jcov.file}"/>
    </target>    

    <target name="init-data">
      <delete dir="${component.jcov.dir}"/>
      <mkdir dir="${component.instrument.dir}"/>
      <mkdir dir="${component.report.dir}"/>
    </target>

    <target name="jcov.report"
      description="Generate a coverage report in
      ${component.report.dir}/report.html for the class given by the
      parameter 'cover.class' (assumed to be in package ${package})">
      <echo message="Generating report from coverage data in ${jcov.file}"/>
      <java fork="true" failonerror="true"
     classname="${jcov.report}"
     classpathref="coverage.classpath">
       <arg value="-output=${component.report.dir}"/>
       <arg value="-fmt=html_ns"/>
       <arg value="-src_root=${src.dir}${path.separator}${test.dir}"/>
       <arg value="-exclude=junit*"/>
       <arg value="-exclude=*Test"/>
       <arg value="-exclude=*Mock"/>
       <arg value="-exclude=*Suite"/>
       <arg value="-exclude=*StatisticFactory"/>
       <arg value="-exclude=${package}.TestCommand"/>
       <arg value="${jcov.file}"/>
      </java>
      <echo message="JCov report in: ${user.dir}/${component.report.dir}/report.html"/>
    </target>
 
    <target name="compile-tests" depends="compile">
      <javac srcdir="${test.dir}"
     destdir="${component.classes.dir}"
     debug="${javac.debug}"
     optimize="${javac.optimize}"
     source="${javac.source}"
     deprecation="${javac.deprecation}"
     listfiles="${javac.listfiles}"
     failonerror="true"
     classpathref="test.classpath">
     <include name="**/*Test.java"/>
     <include name="**/*Tests.java"/>
     <include name="**/*Suite.java"/>
     <include name="**/*Mock.java"/>
     <include name="**/*Factory.java"/>
      </javac>
    </target>

    <target name="test" depends="compile-tests">
     <echo message="Test classpath: ${test.classpath}" />
      <java fork="true" failonerror="false"
     classname="${package}.${cut}"
     classpathref="test.classpath">
     <jvmarg value="-Djcov.file=${jcov.file}"/>
    <!--  <jvmarg value="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5555"/> -->
      </java>
    </target>

    <!-- Tests -->
    <target name="GenericStatsImplTest"
      depends="compile-tests, assemble"
      description="Test Monitoring - gmake ANT_TARGETS=ValueListMapTest">
      <java fork="true" failonerror="true"
     classname="com.sun.enterprise.admin.monitor.registry.ValueListMapTest"
     classpathref="test.classpath">
      </java>
    </target>     
 
    <target name="jcov.clean">
        <delete dir="${component.report.dir}"/>
    </target>

</project>
