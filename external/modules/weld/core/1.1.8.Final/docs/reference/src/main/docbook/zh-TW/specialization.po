# translation of specialization.po to Traditional Chinese
# Language zh-TW translations for Introduction_to_Web_Beans package.
# 
# Automatically generated, 2009.
# Terry Chuang <tchuang@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-01-20 11:42+1000\n"
"Last-Translator: Terry Chuang <tchuang@redhat.com>\n"
"Language-Team: Traditional Chinese <zh@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#, no-c-format
msgid "Specialization, inheritance and alternatives"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"When you first start developing with CDI, you'll likely be dealing only with"
" a single bean implementation for each bean type. In this case, it's easy to"
" understand how beans get selected for injection. As the complexity of your "
"application grows, multiple occurrences of the same bean type start "
"appearing, either because you have multiple implementations or two beans "
"share a common (Java) inheritance. That's when you have to begin studying "
"the specialization, inheritance and alternative rules to work through "
"unsatisfied or ambiguous dependencies or to avoid certain beans from being "
"called."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The CDI specification recognizes two distinct scenarios in which one bean "
"extends another:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The second bean <emphasis>specializes</emphasis> the first bean in certain "
"deployment scenarios. In these deployments, the second bean completely "
"replaces the first, fulfilling the same role in the system."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The second bean is simply reusing the Java implementation, and otherwise "
"bears no relation to the first bean. The first bean may not even have been "
"designed for use as a contextual object."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The second case is the default assumed by CDI. It's possible to have two "
"beans in the system with the same part bean type (interface or parent "
"class). As you've learned, you select between the two implementations using "
"qualifiers."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The first case is the exception, and also requires more care. In any given "
"deployment, only one bean can fulfill a given role at a time. That means one"
" bean needs to be enabled and the other disabled. There are a two modifiers "
"involved: <literal>@Alternative</literal> and "
"<literal>@Specializes</literal>. We'll start by looking at alternatives and "
"then show the guarantees that specialization adds."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Using alternative stereotypes"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"CDI lets you <emphasis>override</emphasis> the implementation of a bean type"
" at deployment time using an alternative. For example, the following bean "
"provides a default implementation of the <literal>PaymentProcessor</literal>"
" interface:"
msgstr ""
"我們已經看過了 Web Bean 的依賴注入模型如何讓我們在建置時<emphasis>置換（override）</emphasis>了一個 API "
"的實做。比方說，下列企業級的 Web Bean 在生產時提供了 <literal>PaymentProcessor</literal> 這個 API "
"的一個實做："

#. Tag: programlisting
#, no-c-format
msgid ""
"public class DefaultPaymentProcessor \n"
"      implements PaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"But in our staging environment, we don't really want to submit payments to "
"the external system, so we override that implementation of "
"<literal>PaymentProcessor</literal> with a different bean:"
msgstr ""
"不過在我們的中繼環境（staging environment）中，我們利用了不同的 Web Bean 來置換了 "
"<literal>PaymentProcessor</literal> 的實做："

#. Tag: programlisting
#, no-c-format
msgid ""
"public @Alternative\n"
"class StagingPaymentProcessor \n"
"      implements PaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "or"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public @Alternative\n"
"class StagingPaymentProcessor \n"
"      extends DefaultPaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"We've already seen how we can enable this alternative by listing its class "
"in the <literal>beans.xml</literal> descriptor."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"But suppose we have many alternatives in the staging environment. It would "
"be much more convenient to be able to enable them all at once. So let's make"
" <literal>@Staging</literal> an <literal>@Alternative</literal> stereotype "
"and annotate the staging beans with this stereotype instead. You'll see how "
"this level of indirection pays off. First, we create the stereotype:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Alternative\n"
"@Stereotype\n"
"@Retention(RUNTIME)\n"
"@Target(TYPE)\n"
"public @interface Staging {}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Then we replace the <literal>@Alternative</literal> annotation on our bean "
"with <literal>@Staging</literal>:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Staging\n"
"public class StagingPaymentProcessor \n"
"      implements PaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Finally, we activate the <literal>@Staging</literal> stereotype in the "
"<literal>beans.xml</literal> descriptor:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&lt;beans\n"
"   xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"   xsi:schemaLocation=\"\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd\"&gt;\n"
"   &lt;alternatives&gt;\n"
"         &lt;stereotype&gt;org.mycompany.myapp.Staging&lt;/stereotype&gt;\n"
"   &lt;/alternatives&gt;\n"
"&lt;/beans&gt;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now, no matter how many staging beans we have, they will all be enabled at "
"once."
msgstr ""

#. Tag: title
#, no-c-format
msgid "A minor problem with alternatives"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"When we enable an alternative, does that mean the default implementation is "
"disabled? Well, not exactly. If the default implementation has a qualifier, "
"for instance <literal>@LargeTransaction</literal>, and the alternative does "
"not, you could still inject the default implementation."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @LargeTransaction PaymentProcessor paymentProcessor;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"So we haven't completely replaced the default implementation in this "
"deployment of the system. The only way one bean can completely override a "
"second bean at all injection points is if it implements all the bean types "
"and declares all the qualifiers of the second bean. However, if the second "
"bean declares a producer method or observer method, then even this is not "
"enough to ensure that the second bean is never called! We need something "
"extra."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"CDI provides a special feature, called <emphasis>specialization</emphasis>, "
"that helps the developer avoid these traps. Specialization is a way of "
"informing the system of your intent to completely replace and disable an "
"implementation of a bean."
msgstr ""
"Web Bean 提供了一項特殊的功能稱為 "
"<emphasis>specialization</emphasis>，它可協助開發人員避免發生這些錯誤。Specialization "
"一開始看起來似乎有些難懂，不過實際上卻相當易於使用，並且您將會慶幸擁有它所提供的額外安全性。"

#. Tag: title
#, no-c-format
msgid "Using specialization"
msgstr "使用 specialization"

#. Tag: para
#, no-c-format
msgid ""
"When the goal is to replace one bean implementation with a second, to help "
"prevent developer error, the first bean may:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "directly extend the bean class of the second bean, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"directly override the producer method, in the case that the second bean is a"
" producer method, and then"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"explicitly declare that it <emphasis>specializes</emphasis> the second bean:"
msgstr "優先權較高的 Web Bean 會 <emphasis>specializes</emphasis> 它的 superclass。"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Alternative @Specializes\n"
"public class MockCreditCardPaymentProcessor \n"
"      extends CreditCardPaymentProcessor {\n"
"   ...\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"When an enabled bean specializes another bean, the other bean is never "
"instantiated or called by the container. Even if the other bean defines a "
"producer or observer method, the method will never be called."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"So why does specialization work, and what does it have to do with "
"inheritance?"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Since we're informing the container that our alternative bean is meant to "
"stand in as a replacement for the default implementation, the alternative "
"implementation automatically inherits all qualifiers of the default "
"implementation. Thus, in our example, "
"<literal>MockCreditCardPaymentProcessor</literal> inherits the qualifiers "
"<literal>@Default</literal> and <literal>@CreditCard</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Furthermore, if the default implementation declares a bean EL name using "
"<literal>@Named</literal>, the name is inherited by the specialized "
"alternative bean."
msgstr ""
