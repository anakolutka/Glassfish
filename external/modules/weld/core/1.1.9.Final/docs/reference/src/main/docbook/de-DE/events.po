# translation of events.po to
# Language de-DE translations for Introduction_to_Web_Beans package.
# Automatically generated, 2009.
# 
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-02-13 08:17+1100\n"
"Last-Translator: \n"
"Language-Team: <en@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: \n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#, no-c-format
msgid "Events"
msgstr "Ereignisse"

#. Tag: para
#, no-c-format
msgid ""
"Dependency injection enables loose-coupling by allowing the implementation "
"of the injected bean type to vary, either a deployment time or runtime. "
"Events go one step further, allowing beans to interact with no compile time "
"dependency at all. Event <emphasis>producers</emphasis> raise events that "
"are delivered to event <emphasis>observers</emphasis> by the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This basic schema might sound like the familiar observer/observable pattern,"
" but there are a couple of twists:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"not only are event producers decoupled from observers; observers are "
"completely decoupled from producers,"
msgstr ""
"nicht nur sind Ereignis-Producer von Observern abgekoppelt, Observer sind "
"auch komplett von Producern abgekoppelt, "

#. Tag: para
#, no-c-format
msgid ""
"observers can specify a combination of \"selectors\" to narrow the set of "
"event notifications they will receive, and"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"observers can be notified immediately, or can specify that delivery of the "
"event should be delayed until the end of the current transaction."
msgstr ""
"Observer können sofort benachrichtigt werden oder sie können festlegen, dass"
" die Lieferung des Ereignisses bis zum Abschluss der aktuellen Transaktion "
"verschoben wird "

#. Tag: para
#, no-c-format
msgid ""
"The CDI event notification facility uses more or less the same typesafe "
"approach that we've already seen with the dependency injection service."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Event payload"
msgstr "Ereignis-Producer"

#. Tag: para
#, no-c-format
msgid ""
"The event object carries state from producer to consumer. The event object "
"is nothing more than an instance of a concrete Java class. (The only "
"restriction is that an event type may not contain type variables). An event "
"may be assigned qualifiers, which allows observers to distinguish it from "
"other events of the same type. The qualifiers function like topic selectors,"
" allowing an observer to narrow the set of events it observes."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"An event qualifier is just a normal qualifier, defined using "
"<literal>@Qualifier</literal>. Here's an example:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Target({FIELD, PARAMETER})\n"
"@Retention(RUNTIME)\n"
"public @interface Updated {}"
msgstr ""
"<![CDATA[@BindingType\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Updated { ... }]]>"

#. Tag: title
#, no-c-format
msgid "Event observers"
msgstr "Ereignis-Observer"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"An <emphasis>observer method</emphasis> is a method of a bean with a "
"parameter annotated <literal>@Observes</literal>."
msgstr ""
"Eine <emphasis>Observer-Methode</emphasis> ist eine Methode eines Web Beans "
"mit einem Parameter, der <literal>@Observes</literal> annotiert ist."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void onAnyDocumentEvent(@Observes Document document) { ... }"
msgstr ""
"<![CDATA[public void onAnyDocumentEvent(@Observes Document document) { ... "
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The annotated parameter is called the <emphasis>event parameter</emphasis>. "
"The type of the event parameter is the observed <emphasis>event "
"type</emphasis>, in this case <literal>Document</literal>. The event "
"parameter may also specify qualifiers."
msgstr ""
"Der annotierte Parameter heißt <emphasis>Ereignisparameter</emphasis>. Der "
"Typ des Ereignisparameter ist der beobachtete "
"<emphasis>Ereignistyp</emphasis>. Observer-Methoden können auch "
"\"Selektoren\" festlegen, die nur Instanzen von von Web Beans Binding-Typen "
"sind. Wird ein Binding-Typ als Ereignis-Selektor verwendet, so wird dies als"
" <emphasis>Ereignis Binding-Typ</emphasis>."

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void afterDocumentUpdate(@Observes @Updated Document document) { ... "
"}"
msgstr ""
"<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document "
"document) { ... }]]>"

#. Tag: para
#, no-c-format
msgid ""
"An observer method need not specify any event qualifiers&mdash;in this case "
"it is interested in <emphasis>only unqualified</emphasis> events of a "
"particular type. If it does specify qualifiers, it's only interested in "
"events which have those qualifiers."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The observer method may have additional parameters, which are injection "
"points:"
msgstr ""
"Die Observer-Methode kann zusätzliche Parameter besitzen, die gemäß der "
"üblichen Einspeisungssemantik Web Beans Methodenparameter eingespeist "
"werden:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void afterDocumentUpdate(@Observes @Updated Document document, User "
"user) { ... }"
msgstr ""
"<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document "
"document, User user) { ... }]]>"

#. Tag: title
#, no-c-format
msgid "Event producers"
msgstr "Ereignis-Producer"

#. Tag: para
#, no-c-format
msgid ""
"Event producers fire events using an instance of the parameterized "
"<literal>Event</literal> interface. An instance of this interface is "
"obtained by injection:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @Any Event&lt;Document&gt; documentEvent;"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A producer raises events by calling the <literal>fire()</literal> method of "
"the <literal>Event</literal> interface, passing the event object:"
msgstr ""
"Ein Producer bringt durch Aufruf der <literal>fire()</literal>-Methode des "
"<literal>Event</literal>-Interface Ereignisse auf, wobei ein "
"<emphasis>Ereignisobjekt</emphasis> weitergegeben wird:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "documentEvent.fire(document);"
msgstr "<![CDATA[documentEvent.fire(document);]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "This particular event will be delivered to every observer method that:"
msgstr "Das Ereignis wird an jede Observer-Methode geliefert, die:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"has an event parameter to which the event object (the "
"<literal>Document</literal>) is assignable, and"
msgstr ""
"einen Ereignisparameter besitzt, dem das Ereignisobjekt zugeschrieben werden"
" kann und "

#. Tag: para
#, fuzzy, no-c-format
msgid "specifies no qualifiers."
msgstr "keine Ereignis-Bindings festlegt."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The container simply calls all the observer methods, passing the event "
"object as the value of the event parameter. If any observer method throws an"
" exception, the container stops calling observer methods, and the exception "
"is rethrown by the <literal>fire()</literal> method."
msgstr ""
"Der Web Bean Manager ruft einfach alle Observer-Methoden auf und gibt das "
"Ereignis-Objekt als den Wert des Ereignisparameters weiter. Meldet eine "
"Observer-Methode eine Ausnahme, so stoppt der Web Bean Manager den Aufruf "
"von Observer-Methoden und die Ausnahme wird durch die "
"<literal>fire()</literal>-Methode erneut gemeldet."

#. Tag: para
#, no-c-format
msgid "Qualifiers can be applied to an event in one of two ways:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "by annotating the <literal>Event</literal> injection point, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"by passing qualifiers to the <literal>select()</literal> of "
"<literal>Event</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Specifying the qualifiers at the injection point is far simpler:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @Updated Event&lt;Document&gt; documentUpdatedEvent;"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Then, every event fired via this instance of <literal>Event</literal> has "
"the event qualifier <literal>@Updated</literal>. The event is delivered to "
"every observer method that:"
msgstr ""
"Dann besitzt jedes über diese Instanz abgegebene Ereignis das "
"<literal>Event</literal> annotierte Ereignis-Binding. Das Ereignis wird an "
"jede Observer-Methode geliefert, die: "

#. Tag: para
#, no-c-format
msgid "has an event parameter to which the event object is assignable, and"
msgstr ""
"einen Ereignisparameter besitzt, dem das Ereignisobjekt zugeschrieben werden"
" kann und "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"does not have any event qualifier <emphasis>except</emphasis> for the event "
"qualifiers that match those specified at the <literal>Event</literal> "
"injection point."
msgstr ""
"kein Ereignis-Binding festlegt <emphasis>außer</emphasis> für die an "
"<literal>fire()</literal> weitergegebenen Ereignis-Bindings."

#. Tag: para
#, no-c-format
msgid ""
"The downside of annotating the injection point is that we can't specify the "
"qualifier dynamically. CDI lets us obtain a qualifier instance by "
"subclassing the helper class <literal>AnnotationLiteral</literal>. That way,"
" we can pass the qualifier to the <literal>select()</literal> method of "
"<literal>Event</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"documentEvent.select(new "
"AnnotationLiteral&lt;Updated&gt;(){}).fire(document);"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Events can have multiple event qualifiers, assembled using any combination "
"of annotations at the <literal>Event</literal> injection point and qualifier"
" instances passed to the <literal>select()</literal> method."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Conditional observer methods"
msgstr "Transaktionale Observer"

#. Tag: para
#, no-c-format
msgid ""
"By default, if there is no instance of an observer in the current context, "
"the container will instantiate the observer in order to deliver an event to "
"it. This behavior isn't always desirable. We may want to deliver events only"
" to instances of the observer that already exist in the current contexts."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A conditional observer is specified by adding <literal>receive = "
"IF_EXISTS</literal> to the <literal>@Observes</literal> annotation."
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void refreshOnDocumentUpdate(@Observes(receive = IF_EXISTS) @Updated "
"Document d) { ... }"
msgstr ""
"<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document "
"document) { ... }]]>"

#. Tag: para
#, no-c-format
msgid ""
"A bean with scope <literal>@Dependent</literal> cannot be a conditional "
"observer, since it would never be called!"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Event qualifiers with members"
msgstr "Ereignis-Bindings mit Mitgliedern"

#. Tag: para
#, fuzzy, no-c-format
msgid "An event qualifier type may have annotation members:"
msgstr "Ein Ereignis-Binding-Typ kann Annotationsmitglieder besitzen:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Role {\n"
"   RoleType value();\n"
"}"
msgstr ""
"<![CDATA[@BindingType\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Role {\n"
"    RoleType value();\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"The member value is used to narrow the messages delivered to the observer:"
msgstr ""
"Der Mitgliederwert dient der Eingrenzung von an den Observer gelieferten "
"Nachrichten: "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void adminLoggedIn(@Observes @Role(ADMIN) LoggedIn event) { ... }"
msgstr ""
"<![CDATA[public void adminLoggedIn(@Observes @Role(ADMIN) LoggedIn event) { "
"... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Event qualifier type members may be specified statically by the event "
"producer, via annotations at the event notifier injection point:"
msgstr ""
"Typenmitglieder von Ereignis-Bindings können durch den Ereignis-Producer "
"statisch festgelegt werden - dies erfolgt über Annotationen am "
"Einspeisungspunkt der Ereignisbenachrichtigungen:"

#. Tag: programlisting
#, no-c-format
msgid "@Inject @Role(ADMIN) Event&lt;LoggedIn&gt; loggedInEvent;"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Alternatively, the value of the event qualifier type member may be "
"determined dynamically by the event producer. We start by writing an "
"abstract subclass of <literal>AnnotationLiteral</literal>:"
msgstr ""
"Alternativ kann der Wert des Typenmitglieds des Ereignis-Bindings dynamisch "
"durch den Ereignis-Producer bestimmt werden. Wir beginnen durch Schreiben "
"einer abstrakten Unterklasse von <literal>AnnotationLiteral</literal>:"

#. Tag: programlisting
#, no-c-format
msgid ""
"abstract class RoleBinding \n"
"   extends AnnotationLiteral&lt;Role&gt; \n"
"   implements Role {}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The event producer passes an instance of this class to "
"<literal>select()</literal>:"
msgstr ""
"Der Ereignis-Producer gibt eine Instanz dieser Klasse an "
"<literal>fire()</literal> weiter:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"documentEvent.select(new RoleBinding() {\n"
"   public void value() { return user.getRole(); }\n"
"}).fire(document);"
msgstr ""
"<![CDATA[documentEvent.fire( document, new RoleBinding() { public void "
"value() { return user.getRole(); } } );]]>"

#. Tag: title
#, fuzzy, no-c-format
msgid "Multiple event qualifiers"
msgstr "Multiple Ereignis-Bindings"

#. Tag: para
#, fuzzy, no-c-format
msgid "Event qualifier types may be combined, for example:"
msgstr "Typen von Ereignis-Bindings können kombiniert werden, zum Beispiel:"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Inject @Blog Event&lt;Document&gt; blogEvent;\n"
"...\n"
"if (document.isBlog()) blogEvent.select(new AnnotationLiteral&lt;Updated&gt;(){}).fire(document);"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Observers must completely match the final qualified type of the event. "
"Assume the following observers in this example:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void afterBlogUpdate(@Observes @Updated @Blog Document document) { "
"... }"
msgstr ""
"<![CDATA[public void afterBlogUpdate(@Observes @Updated @Blog Document "
"document) { ... }]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void onAnyBlogEvent(@Observes @Blog Document document) { ... }"
msgstr ""
"<![CDATA[public void onAnyBlogEvent(@Observes @Blog Document document) { ..."
" }]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void onAnyDocumentEvent(@Observes Document document) { ... }}}"
msgstr ""
"<![CDATA[public void onAnyDocumentEvent(@Observes Document document) { ... "
"}}}]]>"

#. Tag: para
#, no-c-format
msgid "The only observer notified will be:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "However, if there were also an observer:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void afterBlogUpdate(@Observes @Any Document document) { ... }"
msgstr ""
"<![CDATA[public void afterBlogUpdate(@Observes @Updated @Blog Document "
"document) { ... }]]>"

#. Tag: para
#, no-c-format
msgid ""
"It would also be notified, as <literal>@Any</literal> acts as an alias for "
"any and all qualifiers."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Transactional observers"
msgstr "Transaktionale Observer"

#. Tag: para
#, no-c-format
msgid ""
"Transactional observers receive their event notifications during the before "
"or after completion phase of the transaction in which the event was raised. "
"For example, the following observer method needs to refresh a query result "
"set that is cached in the application context, but only when transactions "
"that update the <literal>Category</literal> tree succeed:"
msgstr ""
"Transaktionale Observers erhalten ihre Ereignisbenachrichtigungen vor oder "
"nach der Abschlussphase der Transaktion während derer das Ereignis "
"aufgegekommen ist. Zum Beispiel muss die folgende Observer-Methode einen "
"Satz von Abfrageergebnissen neu laden, der im Applikationskontext gecacht "
"ist, jedoch nur dann, wenn die den  <literal>Category</literal>-Baum "
"aktualisierenden Transaktionen erfolgreich sind: "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void refreshCategoryTree(@Observes(during = AFTER_SUCCESS) "
"CategoryUpdateEvent event) { ... }"
msgstr ""
"<![CDATA[public void refreshCategoryTree(@AfterTransactionSuccess @Observes "
"CategoryUpdateEvent event) { ... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "There are five kinds of transactional observers:"
msgstr "Es gibt drei Arten von transaktionalen Observern:"

#. Tag: para
#, no-c-format
msgid ""
"<literal>IN_PROGESS</literal> observers are called immediately (default)"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>AFTER_SUCCESS</literal> observers are called during the after "
"completion phase of the transaction, but only if the transaction completes "
"successfully"
msgstr ""
"<literal>@AfterTransactionSuccess</literal>-Observers werden während der "
"Abschlussphase der Transaktion aufgerufen, jedoch nur bei erfolgreichem "
"Abschluss der Transaktion"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>AFTER_FAILURE</literal> observers are called during the after "
"completion phase of the transaction, but only if the transaction fails to "
"complete successfully"
msgstr ""
"<literal>@AfterTransactionFailure</literal>-Observer werden während der "
"Abschlussphase der Transaktion aufgerufen, jedoch nur, wenn der erfolgreiche"
" Abschluss der Transaktion fehlschlägt"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>AFTER_COMPLETION</literal> observers are called during the after "
"completion phase of the transaction"
msgstr ""
"<literal>@AfterTransactionCompletion</literal>-Observer werden während der "
"Nach-Abschlussphase der Transaktion aufgerufen "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>BEFORE_COMPLETION</literal> observers are called during the before "
"completion phase of the transaction"
msgstr ""
"<literal>@BeforeTransactionCompletion</literal>-Observer werden während der "
"Vor-Abschlussphase der Transaktion aufgerufen"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Transactional observers are very important in a stateful object model "
"because state is often held for longer than a single atomic transaction."
msgstr ""
"Transaktional Observer sind in einem \"stateful\" Objektmodell wie Web Beans"
" sehr wichtig, da der Status oft länger bestehen bleibt als eine einzelne "
"atomare Transaktion."

#. Tag: para
#, no-c-format
msgid ""
"Imagine that we have cached a JPA query result set in the application scope:"
msgstr ""
"Stellen wir uns vor, wir besitzen einen gecachten Satz von JPA-"
"Abfrageergebnissen im Geltungsbereich der Anwendung:"

#. Tag: programlisting
#, no-c-format
msgid ""
"@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"   @PersistenceContext EntityManager em;\n"
"    \n"
"   List&lt;Product&gt; products;\n"
"\n"
"   @Produces @Catalog \n"
"   List&lt;Product&gt; getCatalog() {\n"
"      if (products==null) {\n"
"         products = em.createQuery(\"select p from Product p where p.deleted = false\")\n"
"            .getResultList();\n"
"      }\n"
"      return products;\n"
"   }\n"
"    \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"From time to time, a <literal>Product</literal> is created or deleted. When "
"this occurs, we need to refresh the <literal>Product</literal> catalog. But "
"we should wait until <emphasis>after</emphasis> the transaction completes "
"successfully before performing this refresh!"
msgstr ""
"Von Zeit zu Zeit wird ein <literal>Product</literal> erstellt oder gelöscht."
" Ist dies der Fall, so müssen wir den <literal>Product</literal>-Katalog neu"
" laden. Wir sollten damit aber bis <emphasis>nach</emphasis> dem "
"erfolgreichen Abschluss der Transaktion warten!"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The bean that creates and deletes <literal>Product</literal>s could raise "
"events, for example:"
msgstr ""
"Das Web Bean, das <literal>Product</literal>s erstellt oder löscht könnte "
"Ereignisse aufrufen, zum Beispiel:"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Stateless\n"
"public class ProductManager {\n"
"   @PersistenceContext EntityManager em;\n"
"   @Inject @Any Event&lt;Product&gt; productEvent;\n"
"\n"
"   public void delete(Product product) {\n"
"      em.delete(product);\n"
"      productEvent.select(new AnnotationLiteral&lt;Deleted&gt;(){}).fire(product);\n"
"   }\n"
"    \n"
"   public void persist(Product product) {\n"
"      em.persist(product);\n"
"      productEvent.select(new AnnotationLiteral&lt;Created&gt;(){}).fire(product);\n"
"   }\n"
"   ...\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"And now <literal>Catalog</literal> can observe the events after successful "
"completion of the transaction:"
msgstr ""
"Und jetzt kann <literal>Catalog</literal> die Ereignisse nach erfolgreichem "
"Abschluss der Transaktion beobachten:"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"   ...\n"
"   void addProduct(@Observes(during = AFTER_SUCCESS) @Created Product product) {\n"
"      products.add(product);\n"
"   }\n"
"    \n"
"   void removeProduct(@Observes(during = AFTER_SUCCESS) @Deleted Product product) {\n"
"      products.remove(product);\n"
"   }\n"
"}"
msgstr ""
"<![CDATA[@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"    ...\n"
"    \n"
"    void addProduct(@AfterTransactionSuccess @Observes @Created Product product) {\n"
"        products.add(product);\n"
"    }\n"
"    \n"
"    void addProduct(@AfterTransactionSuccess @Observes @Deleted Product product) {\n"
"        products.remove(product);\n"
"    }\n"
"    \n"
"}]]>"
