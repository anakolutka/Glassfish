Index: nucleus/admin/rest/rest-client/src/main/java/org/glassfish/admin/rest/client/ClientWrapper.java
===================================================================
--- nucleus/admin/rest/rest-client/src/main/java/org/glassfish/admin/rest/client/ClientWrapper.java	(revision 57623)
+++ nucleus/admin/rest/rest-client/src/main/java/org/glassfish/admin/rest/client/ClientWrapper.java	(working copy)
@@ -47,9 +47,9 @@
 import javax.ws.rs.client.Client;
 import javax.ws.rs.client.ClientRequestContext;
 import javax.ws.rs.client.ClientRequestFilter;
-import javax.ws.rs.client.Configuration;
 import javax.ws.rs.client.Invocation.Builder;
 import javax.ws.rs.client.WebTarget;
+import javax.ws.rs.core.Configuration;
 import javax.ws.rs.core.Link;
 import javax.ws.rs.core.UriBuilder;
 
@@ -82,13 +82,13 @@
 
     public ClientWrapper(final Map<String, String> headers, String userName, String password) {
         realClient = JerseyClientFactory.newClient();
-        realClient.configuration().register(new MultiPartFeature());
-        realClient.configuration().register(new JettisonFeature());
-        realClient.configuration().register(new CsrfProtectionFilter());
+        realClient.register(new MultiPartFeature());
+        realClient.register(new JettisonFeature());
+        realClient.register(new CsrfProtectionFilter());
         if ((userName != null) && (password != null)) {
-            realClient.configuration().register(new HttpBasicAuthFilter(userName, password));
+            realClient.register(new HttpBasicAuthFilter(userName, password));
         }
-        realClient.configuration().register(new ClientRequestFilter() {
+        realClient.register(new ClientRequestFilter() {
 
             @Override
             public void filter(ClientRequestContext rc) throws IOException {
@@ -105,10 +105,6 @@
         realClient.close();
     }
 
-    @Override
-    public Configuration configuration() {
-        return realClient.configuration();
-    }
 
     @Override
     public WebTarget target(String uri) throws IllegalArgumentException, NullPointerException {
@@ -134,4 +130,69 @@
     public Builder invocation(Link link) throws NullPointerException {
         return realClient.invocation(link);
     }
+
+    @Override
+    public Configuration getConfiguration() {
+        return realClient.getConfiguration();
+    }
+
+    @Override
+    public Client setProperty(String name, Object value) {
+        realClient.setProperty(name, value);
+        return this;
+    }
+
+    @Override
+    public Client register(Class<?> componentClass) {
+        realClient.register(componentClass);
+        return this;
+    }
+
+    @Override
+    public Client register(Class<?> componentClass, int bindingPriority) {
+        realClient.register(componentClass, bindingPriority);
+        return this;
+    }
+
+    @Override
+    public Client register(Class<?> componentClass, Class<?>... contracts) {
+        realClient.register(componentClass, contracts);
+        return this;
+    }
+
+    @Override
+    public Client register(Class<?> componentClass, Map<Class<?>, Integer> contracts) {
+        realClient.register(componentClass, contracts);
+        return this;
+    }
+
+    @Override
+    public Client register(Object component) {
+        realClient.register(component);
+        return this;
+    }
+
+    @Override
+    public Client register(Object component, int bindingPriority) {
+        realClient.register(component, bindingPriority);
+        return this;
+    }
+
+    @Override
+    public Client register(Object component, Class<?>... contracts) {
+        realClient.register(component, contracts);
+        return this;
+    }
+
+    @Override
+    public Client register(Object component, Map<Class<?>, Integer> contracts) {
+        realClient.register(component, contracts);
+        return this;
+    }
+
+    @Override
+    public Client replaceWith(Configuration config) {
+        realClient.replaceWith(config);
+        return this;
+    }
 }
Index: nucleus/admin/rest/rest-client/src/main/java/org/glassfish/admin/rest/client/RestClient.java
===================================================================
--- nucleus/admin/rest/rest-client/src/main/java/org/glassfish/admin/rest/client/RestClient.java	(revision 57623)
+++ nucleus/admin/rest/rest-client/src/main/java/org/glassfish/admin/rest/client/RestClient.java	(working copy)
@@ -70,9 +70,9 @@
         this.useSsl = useSsl;
         client = ClientFactory.newClient();
 
-        client.configuration().register(new CsrfProtectionFilter());
+        client.register(new CsrfProtectionFilter());
         if(user != null) {
-            client.configuration().register(new HttpBasicAuthFilter(user, password));
+            client.register(new HttpBasicAuthFilter(user, password));
         }
     }
 
Index: nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/adapter/AbstractRestResourceProvider.java
===================================================================
--- nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/adapter/AbstractRestResourceProvider.java	(revision 57623)
+++ nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/adapter/AbstractRestResourceProvider.java	(working copy)
@@ -110,7 +110,7 @@
 
         UriConnegFilter.enableFor(rc, getMimeMappings(), null);
 
-        rc.addClasses(CsrfProtectionFilter.class);
+        rc.register(CsrfProtectionFilter.class);
 
 
 //        TODO - JERSEY2
@@ -130,11 +130,11 @@
 //                 rc.getFeatures().put(ResourceConfig.FEATURE_DISABLE_WADL, Boolean.TRUE);
 //        }
 //
-        rc.addSingletons(r);
-        rc.addClasses(ReloadResource.class);
+        rc.register(r);
+        rc.register(ReloadResource.class);
         rc.register(new MultiPartFeature());
         //rc.register(getJsonFeature());
-        rc.addBinders(new AbstractBinder() {
+        rc.register(new AbstractBinder() {
 
             @Override
             protected void configure() {
@@ -157,7 +157,7 @@
             }
         });
 
-        rc.addBinders(additionalBinders.toArray(new Binder[additionalBinders.size()]));
+        rc.register(additionalBinders.toArray(new Binder[additionalBinders.size()]));
 
         rc.setProperty(MessageProperties.LEGACY_WORKERS_ORDERING, true);
 
Index: nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/adapter/RestManagementResourceProvider.java
===================================================================
--- nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/adapter/RestManagementResourceProvider.java	(revision 57623)
+++ nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/adapter/RestManagementResourceProvider.java	(working copy)
@@ -93,7 +93,7 @@
                                             final Set<? extends Binder> additionalBinders)
             throws EndpointRegistrationException {
         ResourceConfig rc = super.getResourceConfig(classes, sc, habitat, additionalBinders);
-        rc.addClasses(ExceptionFilter.class);
+        rc.register(ExceptionFilter.class);
         return rc;
     }
 
Index: nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/utils/ProxyImpl.java
===================================================================
--- nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/utils/ProxyImpl.java	(revision 57623)
+++ nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/utils/ProxyImpl.java	(working copy)
@@ -137,7 +137,7 @@
     private void addAuthenticationInfo(Client client, WebTarget resourceBuilder, Server server, ServiceLocator habitat) {
         SecureAdmin secureAdmin = habitat.getService(SecureAdmin.class);
         //Instruct Jersey to use HostNameVerifier and SSLContext provided by us.
-        client.configuration().setProperty(ClientProperties.SSL_CONFIG, new SslConfig(new BasicHostnameVerifier(server.getAdminHost()),
+        client.setProperty(ClientProperties.SSL_CONFIG, new SslConfig(new BasicHostnameVerifier(server.getAdminHost()),
                 habitat.<SSLUtils>getService(SSLUtils.class).getAdminSSLContext(SecureAdmin.Util.DASAlias(secureAdmin), "TLS" ))); //TODO need to get hardcoded "TLS" from corresponding ServerRemoteAdminCommand constant);
     }
 
Index: nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/resources/admin/CommandResource.java
===================================================================
--- nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/resources/admin/CommandResource.java	(revision 57623)
+++ nucleus/admin/rest/rest-service/src/main/java/org/glassfish/admin/rest/resources/admin/CommandResource.java	(working copy)
@@ -467,7 +467,7 @@
         if (model != null ) {
             ExecuteOn executeOn = model.getClusteringAttributes();
             if ((executeOn != null) && (executeOn.value().length ==1) &&
-                    executeOn.value()[0].equals(RuntimeType.SINGLE_INSTANCE)) {
+                    executeOn.value()[0].equals(org.glassfish.api.admin.RuntimeType.SINGLE_INSTANCE)) {
                 return true;
             }
         }
Index: nucleus/admin/util/src/main/java/com/sun/enterprise/admin/remote/RemoteRestAdminCommand.java
===================================================================
--- nucleus/admin/util/src/main/java/com/sun/enterprise/admin/remote/RemoteRestAdminCommand.java	(revision 57623)
+++ nucleus/admin/util/src/main/java/com/sun/enterprise/admin/remote/RemoteRestAdminCommand.java	(working copy)
@@ -830,8 +830,7 @@
 
     private static Client createClient() {
         Client c = JerseyClientFactory.newClient();
-        c.configuration()
-            .register(new MultiPartFeature())
+        c.register(new MultiPartFeature())
             .register(new CsrfProtectionFilter("CLI"))
             .register(new ActionReportJsonReader())
             .register(new ParameterMapFormWriter())
@@ -898,7 +897,7 @@
             Metrix.event("doRestCommand() - about to create target");
             WebTarget target = createTarget(uri);
             Metrix.event("doRestCommand() - about to configure security");
-            target.configuration().setProperty(ClientProperties.SSL_CONFIG, new SslConfig(new BasicHostnameVerifier(host), getSslContext()));
+            target.setProperty(ClientProperties.SSL_CONFIG, new SslConfig(new BasicHostnameVerifier(host), getSslContext()));
             /*
              * Any code that wants to trigger a retry will say so explicitly.
              */
@@ -912,7 +911,7 @@
                 final AuthenticationInfo authInfo = authenticationInfo();
                 if (authInfo != null) {
                     HttpBasicAuthFilter besicAuth = new HttpBasicAuthFilter(authInfo.getUser(), authInfo.getPassword() == null ? "" : authInfo.getPassword());
-                    target.configuration().register(besicAuth);
+                    target.register(besicAuth);
                 }
                 Metrix.event("doRestCommand() - about to prepare request builder");
                 Builder request = target.request(acceptedResponseTypes);
Index: nucleus/pom.xml
===================================================================
--- nucleus/pom.xml	(revision 57623)
+++ nucleus/pom.xml	(working copy)
@@ -115,8 +115,8 @@
         <woodstox.version>4.1.2</woodstox.version>
         <jaxb.version>2.2.7-b41</jaxb.version>
         <antlr.version>2.7.6</antlr.version>
-        <jersey.version>2.0-m10</jersey.version>
-        <jax-rs-api.version>2.0-m12</jax-rs-api.version>
+        <jersey.version>2.0-SNAPSHOT</jersey.version>
+        <jax-rs-api.version>2.0-m15</jax-rs-api.version>
         <mimepull.version>1.8</mimepull.version>
         <jbi.version>1.0</jbi.version>
         <glassfish-management-api.version>3.2.0-b001</glassfish-management-api.version>
