//  
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.3-04/12/2007 12:08 AM(kohsuke)-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2007.08.24 at 01:25:15 PM PDT
//
    
   
package com.sun.enterprise.config.serverbeans;

import org.jvnet.hk2.config.Attribute;
import org.jvnet.hk2.config.Configured;
import org.jvnet.hk2.config.Element;
import org.glassfish.api.admin.ConfigBean;

import java.beans.PropertyVetoException;
import java.beans.VetoableChangeSupport;
import java.io.Serializable;
import java.util.List;


/**
 *
 */

/* @XmlType(name = "", propOrder = {
    "description",
    "securityMap",
    "property"
}) */
@Configured
public class ConnectorConnectionPool extends ConfigBean implements Resource, Serializable {

    final transient private VetoableChangeSupport support = new VetoableChangeSupport(this);

    private final static long serialVersionUID = 1L;
    @Attribute(required = true)

    protected String name;
    @Attribute(required = true)

    protected String resourceAdapterName;
    @Attribute(required = true)

    protected String connectionDefinitionName;
    @Attribute

    protected String steadyPoolSize;
    @Attribute

    protected String maxPoolSize;
    @Attribute

    protected String maxWaitTimeInMillis;
    @Attribute

    protected String poolResizeQuantity;
    @Attribute

    protected String idleTimeoutInSeconds;
    @Attribute

    protected String failAllConnections;
    @Attribute

    protected String transactionSupport;
    @Attribute

    protected String isConnectionValidationRequired;
    @Attribute

    protected String validateAtmostOncePeriodInSeconds;
    @Attribute

    protected String connectionLeakTimeoutInSeconds;
    @Attribute

    protected String connectionLeakReclaim;
    @Attribute

    protected String connectionCreationRetryAttempts;
    @Attribute

    protected String connectionCreationRetryIntervalInSeconds;
    @Attribute

    protected String lazyConnectionEnlistment;
    @Attribute

    protected String lazyConnectionAssociation;
    @Attribute

    protected String associateWithThread;
    @Attribute

    protected String matchConnections;
    @Attribute

    protected String maxConnectionUsageCount;
    protected String description;
    @Element
    protected List<SecurityMap> securityMap = new ConstrainedList<SecurityMap>(this, "securityMap", support);
    protected List<Property> property = new ConstrainedList<Property>(this, "property", support);



    /**
     * Gets the value of the name property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setName(String value) throws PropertyVetoException {
        support.fireVetoableChange("name", this.name, value);

        this.name = value;
    }

    /**
     * Gets the value of the resourceAdapterName property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getResourceAdapterName() {
        return resourceAdapterName;
    }

    /**
     * Sets the value of the resourceAdapterName property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setResourceAdapterName(String value) throws PropertyVetoException {
        support.fireVetoableChange("resourceAdapterName", this.resourceAdapterName, value);

        this.resourceAdapterName = value;
    }

    /**
     * Gets the value of the connectionDefinitionName property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getConnectionDefinitionName() {
        return connectionDefinitionName;
    }

    /**
     * Sets the value of the connectionDefinitionName property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setConnectionDefinitionName(String value) throws PropertyVetoException {
        support.fireVetoableChange("connectionDefinitionName", this.connectionDefinitionName, value);

        this.connectionDefinitionName = value;
    }

    /**
     * Gets the value of the steadyPoolSize property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getSteadyPoolSize() {
        if (steadyPoolSize == null) {
            return "8";
        } else {
            return steadyPoolSize;
        }
    }

    /**
     * Sets the value of the steadyPoolSize property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setSteadyPoolSize(String value) throws PropertyVetoException {
        support.fireVetoableChange("steadyPoolSize", this.steadyPoolSize, value);

        this.steadyPoolSize = value;
    }

    /**
     * Gets the value of the maxPoolSize property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getMaxPoolSize() {
        if (maxPoolSize == null) {
            return "32";
        } else {
            return maxPoolSize;
        }
    }

    /**
     * Sets the value of the maxPoolSize property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setMaxPoolSize(String value) throws PropertyVetoException {
        support.fireVetoableChange("maxPoolSize", this.maxPoolSize, value);

        this.maxPoolSize = value;
    }

    /**
     * Gets the value of the maxWaitTimeInMillis property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getMaxWaitTimeInMillis() {
        if (maxWaitTimeInMillis == null) {
            return "60000";
        } else {
            return maxWaitTimeInMillis;
        }
    }

    /**
     * Sets the value of the maxWaitTimeInMillis property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setMaxWaitTimeInMillis(String value) throws PropertyVetoException {
        support.fireVetoableChange("maxWaitTimeInMillis", this.maxWaitTimeInMillis, value);

        this.maxWaitTimeInMillis = value;
    }

    /**
     * Gets the value of the poolResizeQuantity property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getPoolResizeQuantity() {
        if (poolResizeQuantity == null) {
            return "2";
        } else {
            return poolResizeQuantity;
        }
    }

    /**
     * Sets the value of the poolResizeQuantity property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setPoolResizeQuantity(String value) throws PropertyVetoException {
        support.fireVetoableChange("poolResizeQuantity", this.poolResizeQuantity, value);

        this.poolResizeQuantity = value;
    }

    /**
     * Gets the value of the idleTimeoutInSeconds property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getIdleTimeoutInSeconds() {
        if (idleTimeoutInSeconds == null) {
            return "300";
        } else {
            return idleTimeoutInSeconds;
        }
    }

    /**
     * Sets the value of the idleTimeoutInSeconds property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setIdleTimeoutInSeconds(String value) throws PropertyVetoException {
        support.fireVetoableChange("idleTimeoutInSeconds", this.idleTimeoutInSeconds, value);

        this.idleTimeoutInSeconds = value;
    }

    /**
     * Gets the value of the failAllConnections property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getFailAllConnections() {
        if (failAllConnections == null) {
            return "false";
        } else {
            return failAllConnections;
        }
    }

    /**
     * Sets the value of the failAllConnections property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setFailAllConnections(String value) throws PropertyVetoException {
        support.fireVetoableChange("failAllConnections", this.failAllConnections, value);

        this.failAllConnections = value;
    }

    /**
     * Gets the value of the transactionSupport property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getTransactionSupport() {
        return transactionSupport;
    }

    /**
     * Sets the value of the transactionSupport property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setTransactionSupport(String value) throws PropertyVetoException {
        support.fireVetoableChange("transactionSupport", this.transactionSupport, value);

        this.transactionSupport = value;
    }

    /**
     * Gets the value of the isConnectionValidationRequired property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getIsConnectionValidationRequired() {
        if (isConnectionValidationRequired == null) {
            return "false";
        } else {
            return isConnectionValidationRequired;
        }
    }

    /**
     * Sets the value of the isConnectionValidationRequired property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setIsConnectionValidationRequired(String value) throws PropertyVetoException {
        support.fireVetoableChange("isConnectionValidationRequired", this.isConnectionValidationRequired, value);

        this.isConnectionValidationRequired = value;
    }

    /**
     * Gets the value of the validateAtmostOncePeriodInSeconds property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getValidateAtmostOncePeriodInSeconds() {
        if (validateAtmostOncePeriodInSeconds == null) {
            return "0";
        } else {
            return validateAtmostOncePeriodInSeconds;
        }
    }

    /**
     * Sets the value of the validateAtmostOncePeriodInSeconds property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setValidateAtmostOncePeriodInSeconds(String value) throws PropertyVetoException {
        support.fireVetoableChange("validateAtmostOncePeriodInSeconds", this.validateAtmostOncePeriodInSeconds, value);

        this.validateAtmostOncePeriodInSeconds = value;
    }

    /**
     * Gets the value of the connectionLeakTimeoutInSeconds property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getConnectionLeakTimeoutInSeconds() {
        if (connectionLeakTimeoutInSeconds == null) {
            return "0";
        } else {
            return connectionLeakTimeoutInSeconds;
        }
    }

    /**
     * Sets the value of the connectionLeakTimeoutInSeconds property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setConnectionLeakTimeoutInSeconds(String value) throws PropertyVetoException {
        support.fireVetoableChange("connectionLeakTimeoutInSeconds", this.connectionLeakTimeoutInSeconds, value);

        this.connectionLeakTimeoutInSeconds = value;
    }

    /**
     * Gets the value of the connectionLeakReclaim property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getConnectionLeakReclaim() {
        if (connectionLeakReclaim == null) {
            return "false";
        } else {
            return connectionLeakReclaim;
        }
    }

    /**
     * Sets the value of the connectionLeakReclaim property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setConnectionLeakReclaim(String value) throws PropertyVetoException {
        support.fireVetoableChange("connectionLeakReclaim", this.connectionLeakReclaim, value);

        this.connectionLeakReclaim = value;
    }

    /**
     * Gets the value of the connectionCreationRetryAttempts property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getConnectionCreationRetryAttempts() {
        if (connectionCreationRetryAttempts == null) {
            return "0";
        } else {
            return connectionCreationRetryAttempts;
        }
    }

    /**
     * Sets the value of the connectionCreationRetryAttempts property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setConnectionCreationRetryAttempts(String value) throws PropertyVetoException {
        support.fireVetoableChange("connectionCreationRetryAttempts", this.connectionCreationRetryAttempts, value);

        this.connectionCreationRetryAttempts = value;
    }

    /**
     * Gets the value of the connectionCreationRetryIntervalInSeconds property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getConnectionCreationRetryIntervalInSeconds() {
        if (connectionCreationRetryIntervalInSeconds == null) {
            return "10";
        } else {
            return connectionCreationRetryIntervalInSeconds;
        }
    }

    /**
     * Sets the value of the connectionCreationRetryIntervalInSeconds property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setConnectionCreationRetryIntervalInSeconds(String value) throws PropertyVetoException {
        support.fireVetoableChange("connectionCreationRetryIntervalInSeconds", this.connectionCreationRetryIntervalInSeconds, value);

        this.connectionCreationRetryIntervalInSeconds = value;
    }

    /**
     * Gets the value of the lazyConnectionEnlistment property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getLazyConnectionEnlistment() {
        if (lazyConnectionEnlistment == null) {
            return "false";
        } else {
            return lazyConnectionEnlistment;
        }
    }

    /**
     * Sets the value of the lazyConnectionEnlistment property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setLazyConnectionEnlistment(String value) throws PropertyVetoException {
        support.fireVetoableChange("lazyConnectionEnlistment", this.lazyConnectionEnlistment, value);

        this.lazyConnectionEnlistment = value;
    }

    /**
     * Gets the value of the lazyConnectionAssociation property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getLazyConnectionAssociation() {
        if (lazyConnectionAssociation == null) {
            return "false";
        } else {
            return lazyConnectionAssociation;
        }
    }

    /**
     * Sets the value of the lazyConnectionAssociation property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setLazyConnectionAssociation(String value) throws PropertyVetoException {
        support.fireVetoableChange("lazyConnectionAssociation", this.lazyConnectionAssociation, value);

        this.lazyConnectionAssociation = value;
    }

    /**
     * Gets the value of the associateWithThread property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getAssociateWithThread() {
        if (associateWithThread == null) {
            return "false";
        } else {
            return associateWithThread;
        }
    }

    /**
     * Sets the value of the associateWithThread property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setAssociateWithThread(String value) throws PropertyVetoException {
        support.fireVetoableChange("associateWithThread", this.associateWithThread, value);

        this.associateWithThread = value;
    }

    /**
     * Gets the value of the matchConnections property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getMatchConnections() {
        if (matchConnections == null) {
            return "true";
        } else {
            return matchConnections;
        }
    }

    /**
     * Sets the value of the matchConnections property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setMatchConnections(String value) throws PropertyVetoException {
        support.fireVetoableChange("matchConnections", this.matchConnections, value);

        this.matchConnections = value;
    }

    /**
     * Gets the value of the maxConnectionUsageCount property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getMaxConnectionUsageCount() {
        if (maxConnectionUsageCount == null) {
            return "0";
        } else {
            return maxConnectionUsageCount;
        }
    }

    /**
     * Sets the value of the maxConnectionUsageCount property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setMaxConnectionUsageCount(String value) throws PropertyVetoException {
        support.fireVetoableChange("maxConnectionUsageCount", this.maxConnectionUsageCount, value);

        this.maxConnectionUsageCount = value;
    }

    /**
     * Gets the value of the description property.
     *
     * @return possible object is
     *         {@link String }
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setDescription(String value) throws PropertyVetoException {
        support.fireVetoableChange("description", this.description, value);

        this.description = value;
    }

    /**
     * Gets the value of the securityMap property.
     * <p/>
     * <p/>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the securityMap property.
     * <p/>
     * <p/>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSecurityMap().add(newItem);
     * </pre>
     * <p/>
     * <p/>
     * <p/>
     * Objects of the following type(s) are allowed in the list
     * {@link SecurityMap }
     */
    public List<SecurityMap> getSecurityMap() {
        return this.securityMap;
    }

    /**
     * Gets the value of the property property.
     * <p/>
     * <p/>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the property property.
     * <p/>
     * <p/>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProperty().add(newItem);
     * </pre>
     * <p/>
     * <p/>
     * <p/>
     * Objects of the following type(s) are allowed in the list
     * {@link Property }
     */
    public List<Property> getProperty() {
        return this.property;
    }



}
