/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License. You can obtain
 * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.  If applicable, add the following below the License
 * Header, with the fields enclosed by brackets [] replaced by your own
 * identifying information: "Portions Copyrighted [year]
 * [name of copyright owner]"
 *
 * Contributor(s):
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

package com.sun.enterprise.tools.upgrade.gui;

import com.sun.enterprise.tools.upgrade.common.CommonInfoModel;
import com.sun.enterprise.tools.upgrade.common.DirectoryMover;
import com.sun.enterprise.tools.upgrade.common.UpgradeUtils;
import com.sun.enterprise.tools.upgrade.logging.LogService;
import com.sun.enterprise.util.i18n.StringManager;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.net.URL;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * Main frame of the upgrade tool GUI. Built with NB's "Matisse"
 * builder. Contains the image and button panels internally.
 * The data collection and results panels are in separate classes,
 * added to a card layout component here.
 *
 * @author Bobby Bissett
 */
public class MainFrame extends javax.swing.JFrame implements DirectoryMover {

    private static final Logger logger = LogService.getLogger();
    private StringManager stringManager =
        StringManager.getManager(MainFrame.class);
    private static final CommonInfoModel commonInfoModel =
        CommonInfoModel.getInstance();

    // contained in the card layout of mainPanel
    private enum Panels { DATA_COLLECTION_PANEL, PROGRESS_PANEL }
    private final DataCollectionPanel dataCollectionPanel =
        new DataCollectionPanel(this);
    private final ProgressPanel progressPanel =
        new ProgressPanel();

    // image used in image panel
    private ImageIcon upgradeIcon;

    public MainFrame() {
        String imageURLString =
            "com/sun/enterprise/tools/upgrade/gui/Appserv_upgrade_wizard.gif";
        URL imageURL =
            ClassLoader.getSystemClassLoader().getResource(imageURLString);
        if (imageURL != null) {
            upgradeIcon = new ImageIcon(imageURL,
                "some text. booyah!");
        } else {
            // This shouldn't happen, but just in case we'd like to be told.
            System.err.println(String.format(
                "Cannot find image %s", imageURLString));
        }
        initComponents();
        
        // add listener to close app when window closed
        addWindowListener(new WindowAdapter() {
            /* todo: In original version, this operation
             * exited no matter what the user clicked.
             * Need to check desired behavior. Simplest
             * operation is performed here. Exit the app.
             */
            @Override
            public void windowClosing(WindowEvent we) {
                performExit();
            }
        });

        // update status of 'next' button by checking state of panel
        dataCollectionPanel.checkState();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel imagePanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel(upgradeIcon);
        mainPanel = new javax.swing.JPanel();
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel();
        javax.swing.JPanel centeredPanel = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(stringManager.getString("upgrade.gui.mainframe.titleMessage",
            commonInfoModel.getTarget().getVersion()));
    setMinimumSize(new java.awt.Dimension(725, 545));

    imagePanel.setLayout(new javax.swing.BoxLayout(imagePanel, javax.swing.BoxLayout.LINE_AXIS));
    imagePanel.add(imageLabel);

    mainPanel.setLayout(new java.awt.CardLayout());

    backButton.setText(stringManager.getString("upgrade.gui.mainframe.backbutton"));
    backButton.setEnabled(false);
    backButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            backButtonActionPerformed(evt);
        }
    });

    nextButton.setText(stringManager.getString("upgrade.gui.mainframe.nextbutton"));
    nextButton.setEnabled(false);
    nextButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            nextButtonActionPerformed(evt);
        }
    });

    cancelButton.setText(stringManager.getString("upgrade.gui.mainframe.cancelbutton"));
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelButtonActionPerformed(evt);
        }
    });

    helpButton.setText(stringManager.getString("upgrade.gui.mainframe.helpbutton"));
    helpButton.setToolTipText("Help");
    helpButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            helpButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout centeredPanelLayout = new javax.swing.GroupLayout(centeredPanel);
    centeredPanel.setLayout(centeredPanelLayout);
    centeredPanelLayout.setHorizontalGroup(
        centeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(centeredPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(backButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(nextButton)
            .addGap(90, 90, 90)
            .addComponent(cancelButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(helpButton)
            .addContainerGap())
    );

    centeredPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backButton, cancelButton, helpButton, nextButton});

    centeredPanelLayout.setVerticalGroup(
        centeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(centeredPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(centeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(nextButton)
                .addComponent(cancelButton)
                .addComponent(backButton)
                .addComponent(helpButton))
            .addContainerGap())
    );

    javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
    buttonPanel.setLayout(buttonPanelLayout);
    buttonPanelLayout.setHorizontalGroup(
        buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(centeredPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(65, Short.MAX_VALUE))
    );
    buttonPanelLayout.setVerticalGroup(
        buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(centeredPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    // custom "Pre-Adding Code"
    mainPanel.add(dataCollectionPanel, Panels.DATA_COLLECTION_PANEL.name());
    mainPanel.add(progressPanel, Panels.PROGRESS_PANEL.name());

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE))
                .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
//        if (this.processArguments()) {
//            printArguments();
//            de = new DialogEvent(this, DialogEvent.UPGRADE_ACTION);
//            this.currentNavigationPanel = Panels.PROGRESS_PANEL;
//            CSH.setHelpIDString(gethelpButton(), "WIZARD_RESULT");
//            this.setCurrentNavigationPanel();
//        } else {
//            return;
//        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        int option = JOptionPane.showConfirmDialog(this,
            stringManager.getString("upgrade.gui.mainframe.exitMessage"),
            stringManager.getString("upgrade.gui.mainframe.exitMessageTitle"),
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
        if (option == JOptionPane.NO_OPTION) {
            return;
        }
        performExit();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_helpButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton nextButton;
    // End of variables declaration//GEN-END:variables

    // called from window listener and close button
    private void performExit() {
        logger.fine("Before Recover Call");
        commonInfoModel.recover();

        // original code called listener in UpgradeToolMain that did sys exit
        System.exit(0);
    }

    // called from data collection panel when requred information is present
    void allowContinue(boolean b) {
        nextButton.setEnabled(b);
    }

    public boolean moveDirectory(File dir) {
        String message = String.format(stringManager.getString(
            "upgrade.gui.util.domainRenameOption", dir.getName()));
        String title = stringManager.getString(
            "upgrade.gui.util.domainNameConflict");
        int option = JOptionPane.showConfirmDialog(this, message, title,
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (JOptionPane.OK_OPTION != option) {
            return false;
        }
        UpgradeUtils.rename(dir);
        return true;
    }
}
