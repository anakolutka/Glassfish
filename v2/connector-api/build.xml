<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<!DOCTYPE project [
  <!ENTITY commonBuild SYSTEM "../bootstrap/ant-common.xml">
]>

<project name="Connector API" default="all" basedir=".">  

<!-- ========== Initialize Properties =================================== -->

    <!--
        component.name: required property.  the value should be the
                        name of the component directory
    -->
    <property name="component.name" value="connector-api"/>

    <property file="../bootstrap/project.properties"/>
    <property file="./build.properties"/>

    &commonBuild;
  
    <!-- all -->
    <target name="all" depends="compile, assemble"
            description="Build entire component">
    </target>

    <!-- build -->
    <target name="build" depends="compile, assemble"
            description="Build entire component">
    </target>

    <!-- init. Initialization involves creating publishing directories and
         OS specific targets. --> 
    <target name="init" description="${component.name} initialization">
        <tstamp>
            <format property="start.time" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>    
        <echo message="Building component ${component.name}"/>
        <mkdir dir="${component.classes.dir}"/>
        <copy file="${glassfish.maven}/legal/CDDLv1.0.txt"
              toFile="${component.classes.dir}/META-INF/LICENSE.txt"/>
    </target>

    <target name="compile"> 
        <antcall target="compile-internal">
          <param name="internal.javac.source" value="${javac.source}"/>
        </antcall>
    </target>
    <!-- compile --> 
    <target name="compile-internal" depends="init"
            description="Compile javax/resource/* sources">  
        <echo message="Compiling with -source ${internal.javac.source}" />
        <javac srcdir="${src.dir}" 
               destdir="${component.classes.dir}"
               debug="${javac.debug}" 
               optimize="${javac.optimize}"
               source="${internal.javac.source}" 
               deprecation="${javac.deprecation}"
               failonerror="true">
            <include name="javax/resource/**"/>            
            <include name="sample/**"/>            
        </javac>
    </target>
    
    <!-- assemble -->
    <target name="assemble" depends="init"
            description="Create connector 1.5  jar files">               
        <copy todir="${component.classes.dir}">
            <fileset dir="${src.dir}"
                     includes="connector_1_5.xsd"/>
        </copy>
        <jar jarfile="${javaee.jar}" update="yes">
            <fileset dir="${component.classes.dir}">
                <include name="javax/resource/**/*.class"/>
                <!-- include name="connector_1_5.xsd"/ -->
            </fileset>
        </jar>                        
    </target>

    <!-- javadocs -->
    <target name="javadocs" depends="init, compile"
	    description="Javadocs for javax/resource/* sources">
        <mkdir dir="${component.docs.dir}"/>
        <mkdir dir="${component.jars.dir}"/>
        <javadoc sourcepath="${src.dir}"
                destdir="${component.docs.dir}"
                use="true"
                author="false"
                version="false">
            <package name="javax.resource"/>
            <package name="javax.resource.cci"/>
            <package name="javax.resource.spi"/>
            <package name="javax.resource.spi.endpoint"/>
            <package name="javax.resource.spi.security"/>
            <package name="javax.resource.spi.work"/>
        </javadoc>
	<jar jarfile="${component.jars.dir}/connector-api-docs.jar">
            <fileset dir="${component.docs.dir}">
                <include name="**/*"/>
            </fileset>
        </jar>
    </target>

    <!-- clean -->
    <target name="clean"
            description="Clean build and distribution directories">
        <delete dir="${component.classes.dir}"/>
        <delete dir="${component.publish.home}"/>
    </target>

    <target name="release"
      depends="init, jar, javadocs">
        <property name="connector-api.zip" value="connector-api.zip"/>
        <delete file="${basedir}/${connector-api.zip}"/>
        <echo message="Creating Connector bundle ${basedir}/${connector-api.zip}"/>
        <zip destfile="${connector-api.zip}">
             <zipfileset dir="${release.dir}" prefix="connector"/>
        </zip>
    </target>
   <!-- prepare manifest files for jars -->
    <target name="cook-manifest" depends="init"
            description="Generate MANIFEST.MF files">
        <copy todir="build/manifest">
            <fileset dir="." includes="*.mf" />
            <filterset>
                <filter token="SPECVERSION" value="${release.specversion}"/>
                <filter token="VERSION" value="${release.version}"/>
            </filterset>
        </copy>
    </target>

  <!-- Assemble connector.jar without updating glassfish/image/lib/ -->
    <target name="jar" depends="init">
        <antcall target="compile-internal">
           <param name="internal.javac.source" value="${release.javac.source}"/>
        </antcall>
        <antcall target="cook-manifest"/>
        <mkdir dir="${release.dir}"/>
        <echo message="component classes dir ${component.classes.dir}"/>
        <jar jarfile="${release.connector.jar}" manifest="${basedir}/build/manifest/connector.mf">
            <metainf dir="${component.classes.dir}/META-INF"
                     includes="LICENSE.txt"/>
            <fileset dir="${component.classes.dir}">
                <include name="javax/**/*.class"/>
            </fileset>
        </jar>
        <zip file="build/connector.src.zip">
            <fileset dir="${src.dir}">
                <include name="javax/**/*.java"/>
            </fileset>
        </zip>
    </target>

     <target name="push-to-maven-prepare" depends="-push-to-maven-init, jar"
        description="creates an image for the 'push-to-maven' goal">
        <delete dir="build/maven-repo" /><!-- clean it -->
        <maven-repository-importer destdir="build/maven-repo" version="${release.version}">
            <artifact jar="build/release/connector.jar" pom="connector-api.pom" srczip="build/connector.src.zip" />
        </maven-repository-importer>
    </target>

    <target name="push-to-maven" depends="push-to-maven-prepare"
        description="pushes jars to the java.net maven repository">
        <cvs-import src="build/maven-repo" dest="glassfish/repo" />
    </target>

</project>
