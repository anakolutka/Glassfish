deploydir(1)            Unterbefehle des asadmin-Utili            deploydir(1)

NAME
       deploydir - stellt ein entpacktes Format eines Anwendungsarchivs bereit

ZUSAMMENFASSUNG
           deploydir [--help]
           [--force={false|true}]
           [--virtualservers virtual_servers]
           [--contextroot context_root]
           [--verify={false|true}]
           [--precompilejsp={false|true}]
           [--name component-name]
           [--retrieve local_dirpath]
           [--uniquetablenames={true|false}]
           [--dbvendorname dbvendorname]
           [--createtables={false|true}|--dropandcreatetables={false|true}]
           [--deploymentplan deployment_plan]
           [--altdd alternate_deploymentdescriptor]
           [--runtimealtdd runtime_alternate_deploymentdescriptor]
           [--deploymentorder deployment_order]
           [--enabled={true|false}]
           [--generatermistubs={false|true}]
           [--availabilityenabled={false|true}]
           [--asyncreplication={true|false}]
           [--lbenabled={true|false}]
           [--keepstate={false|true}]
           [--libraries jar_file[,jar_file]*]
           [--target target]
           [--type pkg-type]
           [--properties(name=value)[:name=value]*]
           dirpath

BESCHREIBUNG
           Anmerkung
           ┌───────────────────────────────────────┐
           │Hinweis                                │
           │                                       │
           │           Der Unterbefehl deploydir   │
           │           ist veraltet. Verwenden Sie │
           │           stattdessen den Unterbefehl │
           │           deploy.                     │
           └───────────────────────────────────────┘

       Der Unterbefehl deploydir stellt eine Anwendung direkt aus einem
       Deployment-Verzeichnis bereit. Im Deployment-Verzeichnis müssen die
       entsprechende Verzeichnishierarchie und entsprechende
       Deployment-Deskriptoren vorhanden sein, die mit der Java
       EE-Spezifikation konform sind.

       Das Verzeichnis-Deployment ist nur für erfahrene Entwickler vorgesehen.
       Verwenden Sie deploydir nicht in Production-Umgebungen. Verwenden Sie
       stattdessen den Unterbefehl deploy. Das Verzeichnis-Deployment wird nur
       auf lokalen Hosts unterstützt, d.h., der Client und der Server müssen
       sich auf dem gleichen Rechner befinden. Aus diesem Grunde stehen für
       die Option --host nur folgende Werte zur Verfügung:

       ·   localhost

       ·   Der Wert der Umgebungsvariablen $HOSTNAME

       ·   die IP-Adresse des Rechners

       Wenn die Optionen --uniquetablenames, --createtables und
       --dropandcreatetables nicht angegeben sind, werden die Einträge in den
       Deployment-Deskriptoren verwendet.

       Die Option --force stellt sicher, dass das Deployment oder erneute
       Deployment der Komponente erzwungen wird, und zwar auch dann, wenn die
       angegebene Komponente bereits bereitgestellt oder vorhanden ist. Setzen
       Sie die Option --force bei einem erstmaligen Deployment auf "false".
       Wenn die angegebene Anwendung ausgeführt wird und die Option --force
       auf "false" gesetzt ist, ist der Unterbefehl nicht erfolgreich.

       Dieser Unterbefehl wird nur im Remote-Modus unterstützt.

OPTIONEN
       --help, -?
           Zeigt den Hilfetext für den Unterbefehl an.

       --force
           Ist der Wert auf true gesetzt, wird die Komponente selbst dann,
           wenn sie bereits bereitgestellt oder vorhanden ist, erneut
           bereitgestellt. Der Standardwert lautet false.

       --virtualservers
           Eine oder mehrere IDs von virtuellen Servern. Mehrere IDs werden
           durch Komma getrennt.

       --contextroot
           Nur gültig, wenn das Archiv ein Webmodul ist. Bei anderen
           Archivtypen wird der Wert ignoriert und wird standardmäßig auf
           einen Dateinamen ohne Erweiterung gesetzt.

       --precompilejsp
           Standardmäßig erlaubt diese Option nicht, dass die JSP während des
           Deployment vorkompiliert wird. Stattdessen werden JSPs während der
           Laufzeit kompiliert. Der Standardwert lautet false.

       --verify
           Ist der Wert auf "true" gesetzt und sind die erforderlichen
           Verifier-Packages vom Updatetool installiert, werden die Syntax und
           die Semantik des Deployment-Deskriptors verifiziert. Der
           Standardwert lautet false.

       --name
           Name der bereitstellbaren Komponente.

           Der Name kann eine optionale Versions-ID enthalten, die dem Namen
           folgt und von diesem durch einen Doppelpunkt (:) getrennt ist. Die
           Versions-ID muss mit einem Buchstaben oder einer Zahl beginnen. Er
           kann alphanumerische Zeichen sowie Unterstriche (_), Bindestriche
           (-) und Punkte (.) enthalten. Weitere Informationen zu Modul- und
           Anwendungsversionen finden Sie unter "Module and Application
           Versions" im Oracle GlassFish Server Application Deployment Guide.

       --retrieve
           Ruft die JAR-Datei des Client-Stubs aus dem Serverrechner in das
           lokale Verzeichnis ab.

       --dbvendorname
           Gibt den Namen des Datenbankherstellers an, für den die Tabellen
           erstellt werden. Unterstützte Werte sind db2, mssql, mysql, oracle,
           derby, javadb, postgresql und sybase. Diese Werte sind von Groß-
           und Kleinschreibung unabhängig. Wird diese Option nicht angegeben,
           wird der Wert des Attributs database-vendor-name in
           glassfish-ejb-jar.xml verwendet. Ist kein Wert angegeben, wird eine
           Verbindung mit der Ressource hergestellt, die vom Unterelement
           jndi-name des Elements cmp-resource in der Datei
           glassfish-ejb-jar.xml angegeben ist, und der Name des
           Datenbankherstellers wird gelesen. Kann die Verbindung nicht
           hergestellt oder der Wert nicht erkannt werden, wird
           SQL-92-Konformität vorausgesetzt.

       --createtables
           Ist der Wert auf "true" gesetzt, werden beim Deployment einer
           Anwendung mit nicht zugeordneten CMP-Beans Tabellen erstellt. Ist
           der Wert auf "false" gesetzt, werden keine Tabellen erstellt. Ist
           der Wert nicht festgelegt, bestimmt der Wert des Eintrags
           create-tables-at-deploy im Element cmp-resource der Datei
           glassfish-ejb-jar.xml, ob Tabellen erstellt werden. Es werden keine
           eindeutigen Constraints für die Tabellen erstellt.

       --dropandcreatetables
           Ist der Wert zum Zeitpunkt des erneuten Deployments der Komponente
           auf "true" gesetzt, werden die während des vorhergehenden
           Deployments erstellten Tabellen verworfen, bevor neue Tabellen
           erstellt werden. Gilt für bereitgestellte Anwendungen mit nicht
           zugeordneten CMP-Beans. Bereits vorhandene Tabellen werden beim
           ersten Deployment einer Anwendung oder bei einem Deployment, das
           auf eine explizite Aufhebung eines Deployments folgt, nicht
           verworfen. Ist der Wert auf "false" gesetzt, werden Tabellen weder
           verworfen noch erstellt. Ist kein Wert angegeben, werden die
           Tabellen verworfen, wenn der Eintrag drop-tables-at-undeploy im
           Element cmp-resource der Datei glassfish-ejb-jar.xml auf "true"
           gesetzt ist, und die neuen Tabellen werden erstellt, wenn der
           Eintrag create-tables-at-deploy im Element cmp-resource der Datei
           glassfish-ejb-jar.xml auf "true" gesetzt ist.

       --uniquetablenames
           Garantiert eindeutige Tabellennamen für alle Beans und bewirkt,
           dass ein Hash-Code zu den Tabellennamen hinzugefügt wird. Dies ist
           hilfreich, wenn Sie über eine Anwendung mit Bean-Namen verfügen,
           die von Groß- und Kleinschreibung abhängig sind. Gilt für
           Anwendungen mit nicht zugeordneten CMP-Beans.

       --deploymentplan
           Stellt den Deployment-Plan bereit. Dabei handelt es sich um eine
           JAR-Datei, die GlassFish Server-Deskriptoren enthält. Geben Sie
           diese Option an, wenn Sie eine reine EAR-Datei bereitstellen. Eine
           reine EAR-Datei ist eine EAR-Datei ohne GlassFish
           Server-Deskriptoren.

       --altdd
           Stellt die Anwendung über einen standardmäßigen Java
           EE-Deployment-Deskriptor bereit, der sich außerhalb des
           Anwendungsarchivs befindet. Geben Sie einen absoluten Pfad oder
           einen relativen Pfad zur alternativen Deployment-Deskriptordatei
           an. Der alternative Deployment-Deskriptor setzt den im Archiv
           enthaltenen Deployment-Deskriptor oberster Ebene außer Kraft.
           Beispiel: Bei einer EAR-Datei wird durch die Option --altdd die
           Datei application.xml außer Kraft gesetzt. Bei einem
           Standalone-Modul setzt die Option --altdd den Moduldeskriptor
           oberster Ebene wie web.xml außer Kraft.

       --runtimealtdd
           Stellt die Anwendung über einen GlassFish
           Server-Laufzeit-Deployment-Deskriptor bereit, der sich außerhalb
           des Anwendungsarchivs befindet. Geben Sie einen absoluten Pfad oder
           einen relativen Pfad zur alternativen Deployment-Deskriptordatei
           an. Der alternative Deployment-Deskriptor setzt den im Archiv
           enthaltenen Deployment-Deskriptor oberster Ebene außer Kraft.
           Beispiel: Bei einer EAR-Datei wird durch die Option --runtimealtdd
           die Datei glassfish-application.xml außer Kraft gesetzt. Bei einem
           Standalone-Modul setzt die Option --runtimealtdd den
           Moduldeskriptor oberster Ebene wie glassfish-web.xml außer Kraft.
           Gilt nur für GlassFish Server-Deployment-Deskriptoren
           (glassfish-*.xml); der Name der alternativen
           Deployment-Deskriptordatei muss mit glassfish- anfangen. Gilt nicht
           für sun-*.xml-Deployment-Deskriptoren, die verworfen werden.

       --deploymentorder
           Legt die Deployment-Reihenfolge der Anwendung fest. Dies ist
           nützlich, wenn die Anwendung über Abhängigkeiten verfügt und beim
           Serverstart in einer bestimmten Reihenfolge geladen werden muss.
           Die Deployment-Reihenfolge wird als Ganzzahl angegeben. Der
           Standardwert ist 8080. Anwendungen mit einer niedrigeren Zahl
           werden vor Anwendungen mit einer höheren Zahl geladen. Beispiel:
           Eine Anwendung mit der Deployment-Reihenfolge 102 wird vor einer
           Anwendung mit der Deployment-Reihenfolge 110 geladen. Wird keine
           Deployment-Reihenfolge festgelegt, wird der Standardwert 100
           zugewiesen. Wenn zwei Anwendungen dieselbe Deployment-Reihenfolge
           haben, wird diejenige zuerst bereitgestellt, die beim Serverstart
           als erste geladen wird.

           Die Deployment-Reihenfolge wird üblicherweise bei der ersten
           Bereitstellung der Anwendung festgelegt, kann jedoch über den
           Unterbefehl set auch nach dem anfänglichen Deployment angegeben
           oder geändert werden. Mithilfe des Unterbefehls get können Sie die
           Deployment-Reihenfolge einer Anwendung anzeigen

       --enabled
           Ermöglicht Benutzern, auf die Anwendung zuzugreifen. Ist der Wert
           auf false gesetzt, können Benutzer nicht auf die Anwendung
           zugreifen. Diese Option aktiviert die Anwendung auf der angegebenen
           Zielinstanz oder dem angegebenen Cluster. Wenn Sie das Deployment
           für das Ziel domain ausführen, wird diese Option ignoriert, da das
           Deployment für diese Domain kein Deployment für eine bestimmte
           Instanz oder ein bestimmtes Cluster ist. Der Standardwert ist true.

       --generatermistubs
           Ist der Wert auf true gesetzt, werden statische RMI-IIOP-Stubs
           generiert und in die Datei client.jar eingefügt. Ist der Wert auf
           false gesetzt, werden keine Stubs generiert. Der Standardwert
           lautet false.

       --availabilityenabled
           Diese Option steuert, ob High Availability für Websessions und für
           die Durchführung von SFSB-Checkpoints (Session Bean mit Status
           "Stateful") und möglicherweise für Passivierung aktiviert wird. Ist
           der Wert auf "false" (Standardwert) gesetzt, werden alle
           Websession-Speichervorgänge und SFSB-Checkpoints für die angegebene
           Anwendung, Webanwendung oder das EJB-Modul deaktiviert. Ist der
           Wert auf "true" gesetzt, wird die angegebene Anwendung oder das
           Modul für High Availability aktiviert. Setzen Sie diese Option nur
           dann auf "true", wenn High Availability auf einer höheren Ebene
           konfiguriert und aktiviert ist, beispielsweise auf Server- und
           Containerebene.

       --asyncreplication
           Diese Option steuert, ob Websession- und SFSB-Status, für die High
           Availability aktiviert ist, zunächst gepuffert und dann repliziert
           werden, indem ein separater asynchroner Thread verwendet wird. Ist
           der Wert auf "true" (Standardwert) gesetzt, wird die Performance
           verbessert, aber die Verfügbarkeit verringert. Wenn die Instanz,
           bei der Status gepuffert, aber noch nicht repliziert sind, nicht
           erfolgreich ist, gehen die Status verloren. Ist der Wert auf
           "false" gesetzt, wird die Performance verringert, aber die
           Verfügbarkeit sichergestellt. Status werden nicht gepuffert,
           sondern unmittelbar an andere Instanzen im Cluster übertragen.

       --lbenabled
           Diese Option steuert, ob die bereitgestellte Anwendung für Load
           Balancing verfügbar ist. Der Standardwert ist "true".

       --keepstate
           Diese Option steuert, ob Websessions, SFSB-Instanzen und persistent
           erstellte EJB-Timer zwischen erneuten Deployments erhalten bleiben.

           Der Standardwert ist "false". Diese Option wird nur bei der
           standardmäßigen Serverinstanz (server) unterstützt. Bei anderen
           Zielen wird sie nicht unterstützt und ignoriert.

           Änderungen, die an einer Anwendung zwischen Deployments vorgenommen
           werden, verhindern, dass diese Funktion richtig funktioniert.
           Ändern Sie beispielsweise nicht die Instanzenvariablen in der
           SFSB-Bean-Klasse.

           Bei Webanwendungen ist dieses Feature nur dann anwendbar, wenn in
           der Datei glassfish-web-app.xml das Attribut persistence-type des
           Elements session-manager file lautet.

           Für Session Bean-Instanzen mit Status "Stateful" ist der
           Persistenztyp ohne High Availability im Server (Attribut
           sfsb-persistence-type) festgelegt und muss auf den empfohlenen
           Standardwert file gesetzt werden.

           Kann eine aktive Websession, SFSB-Instanz oder ein EJB-Timer nicht
           gespeichert oder wiederhergestellt werden, stehen diese nicht zur
           Verfügung, wenn das erneute Deployment abgeschlossen ist. Das
           erneute Deployment wird jedoch fortgesetzt, und eine Warnmeldung
           wird aufgezeichnet.

           Damit die Daten aktiver Zustände erhalten bleiben, werden die Daten
           von GlassFish Server serialisiert und gespeichert. Zum
           Wiederherstellen der Daten entserialisiert der Class Loader der
           erneut bereitgestellten Anwendung die Daten, die zuvor gespeichert
           wurden.

       --libraries
           Eine durch Komma getrennte Liste mit JAR-Dateien für Librarys.
           Geben Sie die relativen oder absoluten Pfade der JAR-Dateien der
           Library an. Geben Sie relative Pfade relativ zu
           domain-dir/lib/applibs an. Die Librarys werden der Anwendung in der
           angegebenen Reihenfolge zugänglich gemacht.

       --target
           Gibt das Ziel an, für das Sie das Deployment durchführen. Gültige
           Werte sind:

           server
               Stellt die Komponente für die standardmäßige Serverinstanz
               server bereit und ist der Standardwert.

           domain
               Stellt die Komponente für die Domain bereit. Wenn domain das
               Ziel für ein ursprüngliches Deployment ist, wird die Anwendung
               für die Domain bereitgestellt. Es verweisen aber keine
               Serverinstanzen oder Cluster auf die Anwendung. Wenn domain das
               Ziel für ein erneutes Deployment ist (die Option --force ist
               auf "true" gesetzt) und die dynamische Neukonfiguration für die
               Cluster oder Serverinstanzen aktiviert ist, die auf die
               Anwendung verweisen, rufen diese Cluster oder Serverinstanzen
               automatisch die neue Version der Anwendung ab. Wird ein
               erneutes Deployment durchgeführt und die dynamische
               Konfiguration ist deaktiviert, rufen die verweisenden Cluster
               oder Serverinstanzen die neue Version der Anwendung erst dann
               ab, wenn die Cluster- oder Standalone-Serverinstanz neu
               gestartet wird.

           cluster_name
               Stellt die Komponente für jede Serverinstanz im Cluster bereit.

           instance_name
               Stellt die Komponente für eine bestimmte
               Standalone-Serverinstanz bereit.

       --type
           Der Packaging-Archivtyp der bereitgestellten Komponente. Mögliche
           Werte:

           car
               Die Komponente ist als eine CAR-Datei in ein Package
               integriert.

           ear
               Die Komponente ist als eine EAR-Datei in ein Package
               integriert.

           ejb
               Die Komponente ist ein EJB, das als JAR-Datei in ein Package
               integriert ist.

           osgi
               Die Komponente ist als OSGi-Bundle in ein Package integriert.

           rar
               Die Komponente ist als eine RAR-Datei in ein Package
               integriert.

           war
               Die Komponente ist als eine WAR-Datei in ein Package
               integriert.

       --properties oder --property
           Optionale Schlüsselwort/Wert-Paare, die weitere Eigenschaften für
           das Deployment angeben. Die verfügbaren Eigenschaften werden durch
           die Implementierung der bereitgestellten oder erneut
           bereitgestellten Komponente festgelegt. Die Option --properties und
           die Option --property sind äquivalent. Sie können jede Option
           unabhängig von der Anzahl der von Ihnen angegebenen Eigenschaften
           verwenden.

           Sie können folgende Eigenschaften für ein Deployment festlegen:

           jar-signing-alias
               Gibt den Alias für das Sicherheitszertifikat an, mit dem die
               JAR-Datei des Anwendungsclientcontainers signiert wird. Java
               Web Start führt keinen Code aus, der höhere Berechtigungen
               erfordert, es sei denn, der Code befindet sich in einer
               JAR-Datei, die mit einem Zertifikat signiert ist, dem das
               System des Benutzers vertraut. Aus Gründen der
               Benutzerfreundlichkeit signiert GlassFish Server die JAR-Datei
               automatisch, wobei das Zertifikat zusammen mit diesem Alias aus
               dem Keystore der Domain verwendet wird. Anschließend fragt Java
               Web Start den Benutzer, ob dem Code vertraut werden kann, und
               zeigt die GlassFish Server-Zertifikatinformationen an. Um diese
               JAR-Datei mit einem anderen Zertifikat zu signieren, fügen Sie
               das Zertifikat zum Keystore der Domain hinzu. Danach verwenden
               Sie diese Eigenschaft. Sie können beispielsweise ein Zertifikat
               einer vertrauenswürdigen Quelle verwenden, wodurch vermieden
               wird, dass die Java Web Start-Eingabeaufforderung angezeigt
               wird, oder Sie können das Zertifikat Ihres eigenen Unternehmens
               verwenden, von dem Benutzer wissen, dass es vertrauenswürdig
               ist. Der Standardwert ist s1as, der Alias für das
               selbstsignierte Zertifikat, das für jede Domain erstellt wird.

           java-web-start-enabled
               Gibt an, ob der Zugriff auf Java Web Start für ein
               Anwendungsclientmodul erlaubt ist. Der Standardwert ist "true".

           compatibility
               Gibt die GlassFish Server-Version für die Abwärtskompatibilität
               in Bezug auf JAR-Sichtbarkeitsanforderungen für Anwendungen an.
               Der einzig zulässige Wert lautet v2, der auf Sun GlassFish
               Enterprise Server Version 2 oder Sun Java System Application
               Server Version 9.1 oder 9.1.1 verweist. Die Java EE
               6-Plattformspezifikation enthält striktere Anforderungen als
               Java EE 5, was die Sichtbarkeit bestimmter JAR-Dateien für
               verschiedene Module innerhalb einer EAR-Datei angeht.
               Insbesondere dürfen Anwendungsclients keinen Zugriff auf
               EJB-JAR-Dateien oder andere JAR-Dateien in der EAR-Datei haben,
               es sei denn, Referenzen verwenden den standardmäßigen Java
               SE-Mechanismus (beispielsweise Erweiterungen) oder den Java
               EE-Library-Verzeichnismechanismus. Wenn diese Eigenschaft auf
               v2 gesetzt wird, werden diese Java EE 6-Beschränkungen
               entfernt.

           keepSessions={false|true}
               Wurde durch die Option --keepstate ersetzt.

               Ist die Option --force auf true gesetzt, kann diese Eigenschaft
               verwendet werden, um anzugeben, ob aktive Sessions der erneut
               bereitgestellten Anwendung gespeichert und wiederhergestellt
               werden, wenn das erneute Deployment abgeschlossen ist. Gilt für
               HTTP-Sessions in einem Webcontainer. Der Standardwert lautet
               false.

               false
                   Aktive Sessions der Anwendung werden nicht beibehalten und
                   wiederhergestellt (Standardeinstellung).

               true
                   Aktive Sessions der Anwendung werden beibehalten und
                   wiederhergestellt.

                   Kann eine aktive Session der Anwendung nicht gespeichert
                   oder wiederhergestellt werden, ist keine der Sessions
                   verfügbar, wenn das erneute Deployment abgeschlossen ist.
                   Das erneute Deployment wird jedoch fortgesetzt, und eine
                   Warnmeldung wird aufgezeichnet.

                   Zum Speichern von aktiven Sessions serialisiert GlassFish
                   Server die Sessions und speichert sie im Arbeitsspeicher.
                   Zum Wiederherstellen der Sessions entserialisiert der Class
                   Loader der erneut bereitgestellten Anwendung alle Sessions,
                   die zuvor gespeichert wurden.

           preserveAppScopedResources
               Ist der Wert auf true gesetzt, werden anwendungsspezifische
               Ressourcen beibehalten und während des erneuten Deployment
               wiederhergestellt. Der Standardwert lautet false.

           Andere verfügbare Eigenschaften werden durch die Implementierung
           der erneut bereitgestellten Komponente festgelegt.

           Bei Komponenten, die als OSGi-Bundles verpackt sind (--type=osgi),
           akzeptiert der Unterbefehl deploy Eigenschaftsargumente, mit denen
           eine WAR-Datei als WAB (Web Application Bundle) eingebunden werden
           kann. Der Unterbefehl sucht nach einem Schlüssel mit dem Namen
           UriScheme. Ist dieser vorhanden, verwendet der Unterbefehl den
           Schlüssel als URL-Stream Handler zur Dekoration des Input Streams.
           Im Dekorationsprozess werden weitere Eigenschaften verwendet. Der
           GlassFish Server OSGi-Webcontainer registriert einen URL-Stream
           Handler mit dem Namen webbundle, mit dem eine normale WAR-Datei als
           WAB eingebunden wird. Weitere Informationen zur Verwendung finden
           Sie in dem Beispiel auf der Hilfeseite deploy(1).

OPERANDEN
       dirpath
           Pfad zu dem Verzeichnis, das das entpackte Format des
           bereitstellbaren Archivs enthält. Dies ist der Pfad zum Verzeichnis
           auf dem Serverrechner.

BEISPIELE
       Beispiel 1, Anwendungen aus einem Verzeichnis bereitstellen
           In diesem Beispiel wird die entpackte Anwendung im Verzeichnis
           /home/temp/sampleApp bereitgestellt. Da die Option --force auf
           "true" gesetzt ist, wenn eine Anwendung mit diesem Namen bereits
           vorhanden ist, wird die Anwendung erneut bereitgestellt.

               asadmin> deploydir --force=true --precompilejsp=true /home/temp/sampleApp
               Application deployed successfully with name sampleApp.
               WARNING : deploydir command deprecated. Please use deploy command instead.
               Command deploydir executed successfully

BEENDIGUNGSSTATUS
       0
           Unterbefehl erfolgreich ausgeführt

       1
           Fehler beim Ausführen des Unterbefehls

SIEHE AUCH
       deploy(1), redeploy(1), undeploy(1), get(1), set(1)

       asadmin(1M)

       Oracle GlassFish Server Application Deployment Guide

Java EE 7                        12. Feb. 2013                    deploydir(1)
