<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->


<project name="JDBCConnector top level" default="build">
    <property name="pkg.dir" value="com/sun/gjc/spi"/>

    <property file="./build.properties"/>

    <target name="all" depends="build"/>

    <target name="build" depends="compile,resolve-binary-dependencies,assemble"/>

    <target name="clean" description="Clean the build">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${component.classes.dir}"/>
            <fileset dir="${component.lib.home}"/>
            <fileset dir="${component.target.rar}"/>
            <fileset dir="${component.target.binary}"/>
        </delete>
    </target>

    <!-- init. Initialization involves creating publishing directories and finding jdk version, how binary dependency
    need to be resolved (either by build or by download) -->
    <target name="init" description="${component.name} initialization">
        <tstamp>
            <format property="start.time" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>
        <echo message="Building component ${component.name}"/>
        <mkdir dir="${component.classes.dir}"/>
        <mkdir dir="${component.lib.home}"/>
        <mkdir dir="${component.target.rar}"/>

        <condition property="jdbc-4.0">
            <available classname="java.sql.Wrapper"/>
        </condition>

        <condition property="jdbc-3.0">
            <not>
                <available classname="java.sql.Wrapper"/>
            </not>
        </condition>

        <condition property="generate.binary">
            <istrue value="${build.binary.flag}"/>
        </condition>

        <condition property="download.binary">
            <isfalse value="${build.binary.flag}"/>
        </condition>
    </target>

    <target name="resolve-binary-dependencies">
        <antcall target="install-binary-dependencies"/>
        <antcall target="generate-binary-dependencies"/>
    </target>


    <target name="install-binary-dependencies" depends="init" if="download.binary">
        <resolveArtifact artifactId="jdbc-ra-dependencies" groupId="org.glassfish.connectors.jdbc-ra"
                         property="jdbc-ra-dependencies.zip"/>
        <echo message="installing binary dependencies from repository"/>

        <!-- unzip the binary dependencies (jdbc30 & jdbc40 related classes)
        later, during "compile" depending on the jdk version, appropriate classes
        (either jdbc30 or jdbc40) will be compiled and overwritten -->
        <unzip src="${jdbc-ra-dependencies.zip}" dest="${component.classes.dir}"/>
        <unzip src="${component.classes.dir}/glassfish-jdbcra-binary-dependencies.jar" dest="${component.classes.dir}"/>
    </target>


    <!-- compile -->
    <!--<target name="compile" depends="init"-->
    <target name="compile" depends="init" description="Compile com/sun/* sources">

        <javac srcdir="${src.dir}"
               destdir="${component.classes.dir}"
               debug="${javac.debug}"
               optimize="${javac.optimize}"
               source="${javac.source}"
               deprecation="${javac.deprecation}"
               failonerror="true"
               target="1.5">

            <classpath>
                <path path="${compile_classpath}"></path>
            </classpath>

            <include name="com/sun/gjc/**"/>
            <include name="com/sun/appserv/**"/>
            <!--<exclude name="com/sun/gjc/spi/ResourceAdapter.java"/>-->
            <exclude name="com/sun/gjc/spi/ConnectionHolder.java"/>
            <exclude name="com/sun/gjc/spi/DataSource.java"/>
            <exclude name="com/sun/gjc/spi/jdbc30/**"/>
            <exclude name="com/sun/gjc/spi/jdbc40/**"/>
        </javac>

        <antcall target="compile-jdbc-30"/>
        <antcall target="compile-jdbc-40"/>
    </target>

    <!-- If JDK is 1.5, compile JDBC 30 source -->
    <target name="compile-jdbc-30" if="jdbc-3.0">
        <echo message="building jdbc 30 classes"/>
        <javac srcdir="${src.dir}"
               destdir="${component.classes.dir}"
               debug="${javac.debug}"
               optimize="${javac.optimize}"
               source="${javac.source}"
               deprecation="${javac.deprecation}"
               failonerror="true">

            <classpath>
                <path path="${compile_classpath}"></path>
            </classpath>

            <include name="com/sun/gjc/spi/jdbc30/**"/>
            <exclude name="com/sun/gjc/common/**"/>
            <exclude name="com/sun/appserv/**"/>
            <exclude name="com/sun/gjc/spi/base/**"/>
            <exclude name="com/sun/gjc/spi/jdbc40/**"/>
        </javac>
    </target>

    <!-- If JDK is 1.6, compile JDBC 40 source -->
    <target name="compile-jdbc-40" if="jdbc-4.0" depends="init">
        <echo message="building jdbc 40 classes"/>
        <javac srcdir="${src.dir}"
               destdir="${component.classes.dir}"
               debug="${javac.debug}"
               optimize="${javac.optimize}"
               source="${javac.source}"
               deprecation="${javac.deprecation}"
               failonerror="true"
               target="1.5">

            <classpath>
                <path path="${compile_classpath}"></path>
            </classpath>

            <include name="com/sun/gjc/spi/jdbc40/**"/>
            <exclude name="com/sun/gjc/common/**"/>
            <exclude name="com/sun/appserv/**"/>
            <exclude name="com/sun/gjc/spi/base/**"/>
            <exclude name="com/sun/gjc/spi/jdbc30/**"/>
        </javac>
    </target>

    <target name="generate-binary-dependencies" if="generate.binary"
            description="generate binary dependency with jdbc30 and jdbc40 classes">
        <echo message="generating binary dependency with jdbc30 and jdbc40 classes"/>
        <mkdir dir="${component.target.binary}"/>
        <antcall target="generate-jdbc-3.0-binary"/>
        <antcall target="generate-jdbc-4.0-binary"/>
        <jar jarfile="${component.target.binary}/${glassfish-jdbcra-binary-dependencies.jar}" update="yes"
             basedir="${component.classes.dir}"
             includes="com/sun/gjc/spi/jdbc30/*, com/sun/gjc/spi/jdbc40/*"/>
        <tstamp>
            <format property="TIMESTAMP" pattern="yyyy-MM-dd-HH-mm"/>
        </tstamp>
        <jar jarfile="${component.target.binary}/${binary.name.prefix}-${TIMESTAMP}.jar"
             includes="${glassfish-jdbcra-binary-dependencies.jar}" basedir="${component.target.binary}"/>
        <echo message="JDBC Binary dependency version no. (timestamp) : ${TIMESTAMP}"/>        

    </target>


    <target name="generate-jdbc-3.0-binary" description="generate jdbc-30 (com/sun/gjc/spi/jdbc30) binary">
        <antcall target="compile-jdbc-30-with-explicit-jdk1.5"/>
    </target>

    <target name="generate-jdbc-4.0-binary" description="generate jdbc-40 (com/sun/gjc/spi/jdbc40) binary">
        <antcall target="compile-jdbc-40-with-explicit-jdk1.6"/>
    </target>

    <target name="compile-jdbc-40-with-explicit-jdk1.6"
            description="Compiles com/sun/gjc/spi/jdbc40 sources">
        <javac srcdir="${src.dir}" includejavaruntime="no" fork="true"
               destdir="${component.classes.dir}"
               debug="${javac.debug}"
               optimize="${javac.optimize}" compiler="modern"
               source="${javac.source}" executable="${jdk1.6}/bin/javac"
               deprecation="${javac.deprecation}"
               failonerror="true"
               target="1.5">
            <classpath>
                <path path="${compile_classpath}"></path>
            </classpath>
            <include name="com/sun/gjc/spi/jdbc40/**"/>
        </javac>
    </target>

    <target name="compile-jdbc-30-with-explicit-jdk1.5"
            description="Compiles com/sun/gjc/spi/jdbc30 sources">
        <javac srcdir="${src.dir}" includejavaruntime="no" fork="true"
               destdir="${component.classes.dir}"
               debug="${javac.debug}"
               optimize="${javac.optimize}" compiler="modern"
               source="${javac.source}" executable="${jdk1.5}/bin/javac"
               deprecation="${javac.deprecation}"
               failonerror="true"
               target="1.5">
            <classpath>
                <path path="${compile_classpath}"></path>
            </classpath>

            <include name="com/sun/gjc/spi/jdbc30/**"/>
        </javac>
    </target>

    <target name="assemble">

        <copy todir="${component.classes.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>


        <!-- build JDBC RAR of type javax.sql.XADataSource -->
        <!-- TODO V3 handle XA later
                <copy file="${src.dir}/com/sun/gjc/spi/xml/ra-xa.xml"
                      tofile="${component.lib.home}/ra.xml" overwrite="yes">
                </copy>
                <jar jarfile="${component.lib.home}/__xa_jdbc_ra.rar"
                     basedir="${component.lib.home}" excludes="**/*">
                    <manifest>
                        <attribute name="Specification-Title" value="JDBC Specification"/>
                        <attribute name="Specification-Vendor" value="Sun Microsystems, Inc.,"/>
                        <attribute name="Specification-Version" value="3.0, 4.0"/>
                        <attribute name="Implementation-Vendor" value="Sun Microsystems, Inc.,"/>
                        <attribute name="Implementation-Version" value="9.1"/>
                        <attribute name="Implementation-Title" value="Sun Java System Application Server"/>
                    </manifest>
                    <metainf dir="${component.lib.home}">
                        <include name="ra.xml"/>
                    </metainf>
                </jar>
                <echo message="Assembling __xa rar"/>

                <jar jarfile="${component.lib.home}/__xa_jdbc_ra.jar" update="true" basedir="${component.classes.dir}"
                    includes ="${pkg.dir}/**/*, com/sun/gjc/util/**/*, com/sun/gjc/common/**/*, com/sun/appserv/jdbc/**/*, **/*.properties">
                    <exclude name="com/sun/gjc/spi/DSManagedConnectionFactory.class"/>
                    <exclude name="com/sun/gjc/spi/CPManagedConnectionFactory.class"/>
                    <exclude name="com/sun/gjc/spi/DMManagedConnectionFactory.class"/>
                </jar>

                <jar jarfile="${component.lib.home}/__xa_jdbc_ra.rar" update="true" basedir="${component.lib.home}">
                    <include  name="__xa_jdbc_ra.jar" />
                </jar>
        -->


        <!-- build JDBC RAR of type javax.sql.DataSource -->
        <copy file="${src.dir}/com/sun/gjc/spi/xml/ra-ds.xml"
              tofile="${component.lib.home}/ra.xml" overwrite="yes">
        </copy>
        <jar jarfile="${component.lib.home}/__ds_jdbc_ra.rar"
             basedir="${component.lib.home}" excludes="**/*">
            <manifest>
                <attribute name="Specification-Title" value="JDBC Specification"/>
                <attribute name="Specification-Vendor" value="Sun Microsystems, Inc.,"/>
                <attribute name="Specification-Version" value="3.0, 4.0"/>
                <attribute name="Implementation-Vendor" value="Sun Microsystems, Inc.,"/>
                <attribute name="Implementation-Version" value="9.1"/>
                <attribute name="Implementation-Title" value="Sun Java System Application Server"/>
            </manifest>
            <metainf dir="${component.lib.home}">
                <include name="ra.xml"/>
            </metainf>
        </jar>

        <jar jarfile="${component.lib.home}/__ds_jdbc_ra.jar" update="true" basedir="${component.classes.dir}"
             includes="${pkg.dir}/**/*, com/sun/gjc/util/**/*, com/sun/gjc/common/**/*, com/sun/appserv/jdbc/**/*, **/*.properties">
            <exclude name="com/sun/gjc/spi/XAManagedConnectionFactory.class"/>
            <exclude name="com/sun/gjc/spi/CPManagedConnectionFactory.class"/>
            <exclude name="com/sun/gjc/spi/DMManagedConnectionFactory.class"/>
        </jar>
            <echo message="Assembling __ds rar"/>
        <jar jarfile="${component.lib.home}/__ds_jdbc_ra.rar" update="true" basedir="${component.lib.home}">
            <include name="__ds_jdbc_ra.jar"/>
        </jar>


        <!-- build JDBC RAR of type javax.sql.ConnectionPoolDataSource -->
        <copy file="${src.dir}/com/sun/gjc/spi/xml/ra-cp.xml"
              tofile="${component.lib.home}/ra.xml" overwrite="yes">
        </copy>
        <jar jarfile="${component.lib.home}/__cp_jdbc_ra.rar"
             basedir="${component.lib.home}" excludes="**/*">
            <manifest>
                <attribute name="Specification-Title" value="JDBC Specification"/>
                <attribute name="Specification-Vendor" value="Sun Microsystems, Inc.,"/>
                <attribute name="Specification-Version" value="3.0, 4.0"/>
                <attribute name="Implementation-Vendor" value="Sun Microsystems, Inc.,"/>
                <attribute name="Implementation-Version" value="9.1"/>
                <attribute name="Implementation-Title" value="Sun Java System Application Server"/>
            </manifest>
            <metainf dir="${component.lib.home}">
                <include name="ra.xml"/>
            </metainf>
        </jar>


        <jar jarfile="${component.lib.home}/__cp_jdbc_ra.jar" update="true" basedir="${component.classes.dir}"
             includes="${pkg.dir}/**/*, com/sun/gjc/util/**/*, com/sun/gjc/common/**/*, com/sun/appserv/jdbc/**/*, **/*.properties">
            <exclude name="com/sun/gjc/spi/XAManagedConnectionFactory.class"/>
            <exclude name="com/sun/gjc/spi/DSManagedConnectionFactory.class"/>
            <exclude name="com/sun/gjc/spi/DMManagedConnectionFactory.class"/>
        </jar>

        <echo message="Assembling __cp rar"/>

        <jar jarfile="${component.lib.home}/__cp_jdbc_ra.rar" update="true" basedir="${component.lib.home}">
            <include name="__cp_jdbc_ra.jar"/>
        </jar>


        <!-- TODO V3 handle XA later
        <unjar src="${component.lib.home}/__xa_jdbc_ra.rar" dest="${component.target.rar}/__xa_jdbc_ra"/>-->
        <unjar src="${component.lib.home}/__ds_jdbc_ra.rar" dest="${component.target.rar}/__ds_jdbc_ra"/>
        <unjar src="${component.lib.home}/__cp_jdbc_ra.rar" dest="${component.target.rar}/__cp_jdbc_ra"/>

        <zip basedir="${component.target.rar}" file="${component.target.dir}/jdbc-ra.zip"/>

        <attachArtifact file="${component.target.dir}/jdbc-ra.zip"/>

        <delete dir="${component.lib.home}"/>
        <delete dir="${component.target.rar}"/>
    </target>

</project>