<?xml version='1.0' encoding='ISO-8859-1' ?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->


<project name="cmp/mapping/ejb" default="jars" basedir=".">

  <!-- Ignore the environment's $CLASSPATH. -->
  <property name="build.sysclasspath" value="ignore"/>

  <property name="component.name" value="cmp"/>
  <property name="cmp.basedir" location="../.."/>

  <property file="${user.home}/build.properties"/>
  <property file="${cmp.basedir}/../bootstrap/project.properties"/>

  <property name="buildroot"               location="${cmp.basedir}/release/build"/>
  <property name="generator_database_root" location="${cmp.basedir}/generator/database"/>
  <property name="libroot"                 location="${cmp.basedir}/release/lib/ext"/>
  <property name="model_root"              location="${cmp.basedir}/model"/>
  <property name="util_root"               location="${cmp.basedir}/utility"/>

  <!-- For a module build, please define the property "glassfish.root" -->
  <!-- in $HOME/build.properties. -->
  <property name="repository"               location="${maven.repo.local}"/>
  <property name="schema2beans.jar.path"    location="${appserv-admin.jar}"/>
  <property name="schema2beansdev.jar.path" location="${buildroot}/schema2beansdev.jar"/>

  <property name="mapping.ejb.path"  value="com/sun/jdo/api/persistence/mapping/ejb"/>

  <!-- This is the directory containing the sun-cmp-mappings dtd and mdd -->
  <!-- files used for the schema2beans generation. -->
  <property name="mapping.ejb.src"    location="libsrc/${mapping.ejb.path}"/>
  <property name="mapping.ejb.build"  location="build/classes/${mapping.ejb.path}"/>
  <property name="mapping.ejb.gensrc" location="build/gensrc/${mapping.ejb.path}"/>

  <taskdef name="locjar" classname="org.netbeans.nbbuild.LocalizedJar" classpath="${buildroot}/nbantext.jar"/>


  <!-- Main targets. -->

  <!-- This is the default target. -->
  <target name="jars" depends="compile,just-jars"/>

  <target name="clean">
    <!-- Remove the beans generated in 'generate-beans'. -->
    <delete dir="${mapping.ejb.src}/beans"/>

    <delete dir="build"/>
    <delete dir="jars"/>

    <!-- Remove schema2beansdev.jar used for bean generation -->
    <delete file="${schema2beansdev.jar.path}"/>
  </target>


  <!-- Internal targets. -->

  <target name="compile" depends="check-beans-uptodate,generate-beans,generator.database.compile">
    <echo message="Compiling persistence/mapping/ejb/libsrc"/>
    <echo message="with Javac Flags Debug=${javac.debug} Optimize=${javac.optimize} Source=${javac.source}"/>

    <mkdir dir="build/classes"/>
    <javac destdir="build/classes" source="${javac.source}"
        deprecation="${javac.deprecation}"
        optimize="${javac.optimize}" debug="${javac.debug}">  
      <src path="libsrc"/>
      <src path="build/gensrc"/>
      <classpath>
        <pathelement location="${schema2beans.jar.path}"/>
        <pathelement location="${dbschema.jar}"/>
        <pathelement location="${model_root}/build/classes"/>
        <pathelement location="${util_root}/build/classes"/>
        <pathelement location="${generator_database_root}/build/classes"/>
      </classpath>
    </javac>
    <antcall target="copy-properties"/>
  </target>

  <!-- Check for uptodate-ness against ONLY ONE bean's source file -->
  <!-- Not really honest, but close enough. -->
  <target name="check-beans-uptodate">
    <uptodate property="beans-uptodate"
      srcfile="${mapping.ejb.src}/sun-cmp-mapping_1_2.dtd"
      targetfile="${mapping.ejb.gensrc}/beans/SunCmpMappings.java"/>
  </target>

  <target name="generate-beans" depends="get-schema2beansdev" unless="beans-uptodate"
    description="process the dtds create the schema2beans objects">
    <echo message="Generating CMP beans"/>
    <java fork="yes" classname="org.netbeans.modules.schema2beansdev.GenBeans">
      <classpath>
        <pathelement location="${schema2beans.jar.path}"/>
        <pathelement location="${schema2beansdev.jar.path}"/>
      </classpath>
      <arg value="-f"/>
      <arg value="${mapping.ejb.src}/sun-cmp-mapping_1_2.dtd"/>
      <arg value="-mdd"/>
      <arg value="${mapping.ejb.src}/sun-cmp-mapping_1_2.mdd"/>
      <arg line="-p com.sun.jdo.api.persistence.mapping.ejb.beans"/>
      <arg line="-r build/gensrc"/>
      <arg value="-throw"/>
      <arg value="-dtd"/>
      <arg value="-validate"/>
    </java>
  </target>

  <!-- Create the jar files. -->
  <target name="just-jars" depends="copy-dtd-mdd">
    <echo message="Creating library jar persistence-mapping-ejb.jar"/>

    <mkdir dir="jars"/>
    <locjar jarfile="jars/persistence-mapping-ejb.jar" compress="false">
      <locale name="ja"/>
      <fileset dir="build/classes"/>
    </locjar>
  </target>

  <!-- Copy the property files. -->
  <target name="copy-properties">
    <copy todir="${mapping.ejb.build}">
      <fileset dir="${mapping.ejb.src}" includes="*.properties"/>
    </copy> 
  </target>

  <!--
    Copy dtd and mdd files.
    This target might be removed, once we are sure that 
    persistence-mapping-ejb.jar does not need to contain these files.
  -->
  <target name="copy-dtd-mdd">
    <copy todir="${mapping.ejb.build}">
      <fileset dir="${mapping.ejb.src}">
        <include name="sun-cmp-mapping_1_2.dtd"/>
        <include name="sun-cmp-mapping_1_2.mdd"/>
      </fileset>
    </copy> 
  </target>

  <target name="generator.database.compile">
    <ant dir="${generator_database_root}" target="compile"/>
  </target>

  <target name="check-schema2beansdev-present">
    <available file="${schema2beansdev.jar.path}" property="schema2beansdev-present"/>
  </target>

  <target name="get-schema2beansdev" depends="check-schema2beansdev-present" unless="schema2beansdev-present">
   <antcall target="do.unzip">
      <param name="name" value="${glassfish.netbeans.name}"/>
      <param name="version" value="${glassfish.netbeans.version}"/>
      <param name="directory" value="${buildroot}"/>
    </antcall>

    <!-- Move schema2beansdev.jar to the expected location -->
    <move file="${buildroot}/modules/schema2beansdev.jar" tofile="${schema2beansdev.jar.path}"/>
    <!-- Remove the directories created in the previous step -->
    <delete dir="${buildroot}/META-INF"/>
    <delete dir="${buildroot}/modules"/>
  </target>
  
  <target name="do.unzip">
    <echo message="${repository} Unzipping ${name}-${version}.jar to ${directory}"/>
    <unzip src="${repository}/${name}/jars/${name}-${version}.jar" dest="${directory}"/>
  </target>

</project>

