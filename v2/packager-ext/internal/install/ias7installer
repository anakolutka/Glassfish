#!/bin/sh
#
# Copyright 2004 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#

echo `date`
echo "INSTALLING IAS7SE\n"


HOME_DIR=`pwd`

if [ "X$OSTYPE" = "Xwin32" ]; then
  INSTALLVANILLA=${HOME_DIR}/install.inf.vanilla.win
  INSTALLINF_SETUP=install.inf
  PATH_SEP=';'
  unzip j2eedll.zip
  unzip cis.zip
  LIBDIR="bin/j2eeplugin.dll"
  IASADMIN="iasadmin.bat"
  CP="cp"
else
INSTALLVANILLA=${HOME_DIR}/install.inf.vanilla
  INSTALLINF_SETUP=${HOME_DIR}/install.inf
  PATH_SEP=':'
  LIBDIR="lib/libj2eeplugin.so"
  IASADMIN="iasadmin"
  CP="cp -p"
fi


INSTALLINF=${HOME_DIR}/install.inf
SedCom=${HOME_DIR}/sed.com
SedWinCom=${HOME_DIR}/sedwin.com
TempValueFile=${HOME_DIR}/tempValueFile

env="${HOME}/.ias7install.env"
touch ${env}

VARIABLES="JDK_HOME IAS_ROOT HTTP_PORT IWS_ADMIN_PORT HOSTNAME DOMAIN_NAME IWS_USER IWS_USR_GROUP IWS_ADMIN_USER"
for item in ${VARIABLES} ; do
  if [ `grep -c ${item} ${env}` -eq 0 ]; then
    Answer=""
    while [ "X${Answer}X" = "XX" ]; do
      echo "Value for ${item} : \c"
        read Answer
      done
      echo "${item}=${Answer}" >> ${env}
  fi
done



. ${env}


# TODO: it's ugly!
RI_ROOT="${IAS_ROOT}/ri"
IWS_ROOT="${IAS_ROOT}/iws"
if [ `grep -c RI_ROOT ${env}` -eq 0 ]; then
  echo "RI_ROOT=${RI_ROOT}" >> ${env}
fi
if [ `grep -c IWS_ROOT ${env}` -eq 0 ]; then
  echo "IWS_ROOT=${IWS_ROOT}" >> ${env}
fi
if [ `grep -c PATH_SEP ${env}` -eq 0 ]; then
  echo "PATH_SEP=${PATH_SEP}" >> ${env}
fi
#if [ `grep -c JAVA_HOME ${env}` -eq 0 ]; then
#  echo "JAVA_HOME=${JDK_HOME}" >> ${env}
#fi


#GUESSABLE="HOSTNAME DOMAIN_NAME PATH_SEP"
#HOSTNAME=`uname -n`
#DOMAIN_NAME=`domainname`
#PATH_SEP=":"
#JDK_HOME=${JAVA_HOME}
# nok ## What we can guess ...
# nok #for item in ${GUESSABLE} ; do
# nok #	if [ `grep -c ${item} ${env}` -eq 0 ]; then
# nok #		echo "${item}=${${item}}" >> ${env}
# nok #	fi
# nok #done



. ${env}
    
rm -f ${SedCom}
rm -f ${SedWinCom}
rm -f ${TempValueFile}

echo `date`

cat ${env} |
	( while read Line ; do
		VarName=`echo $Line | awk -F"=" '{print $1}'`
		VarValu=`echo $Line | awk -F"=" '{print $2}'`
            if [ "X$OSTYPE" = "Xwin32" ]; then
		  echo "/${VarName}/  s#.{${VarName}.#${VarValu}#g" >> ${SedCom}
              echo "/${VarName}/  s#%${VarName}%#${VarValu}#g" >> ${SedWinCom}
            else
		echo "/${VarName}/\ts#.{${VarName}.#${VarValu}#g" >> ${SedCom}
            fi
	  done  
	)



sub_var() {
  sed -f ${SedCom} $1 > $1.out
  mv $1.out $1
}

sub_trim() {
  sed -e 's/\/$//' $1 > $1.out
  mv $1.out $1
}

sub_var_win() {
  sed -f ${SedWinCom} $1 > $1.out
  mv $1.out $1
}

sub_slash() {
  sed -e 's#/#\\#g' $1 > $1.out
  mv $1.out $1
}
 
addSlashForNT() {
  sed -e 's/DOCTYPE server SYSTEM "file:\//DOCTYPE server SYSTEM "file:/g' | sed -e 's/DOCTYPE server SYSTEM "file:/DOCTYPE server SYSTEM "file:\//g' $1 > $1.out
  mv $1.out $1
}
 
webAll() {
  web ${WebInstance} $1
  web ${WebAdmin}    $1
}

web() {
  echo "$2ing the $1\n"
  echo `date`
  cd $1
  startstopserver $2
  echo " ... Done\n\n"
}

startstopserver() {
  if [ "X$OSTYPE" = "Xwin32" ]; then
    ./$1svr.bat
  else
    ./$1
  fi
}

patchIWSPlugin() {
  if [ "X$OSTYPE" = "Xwin32" ]; then
    $CP ${HOME_DIR}/j2eeplugin.dll ${IWS_ROOT}/bin/https/bin
    $CP ${HOME_DIR}/cis.dll ${IWS_ROOT}/bin/https/bin
  else
    $CP ${HOME_DIR}/libj2eeplugin.so ${IWS_ROOT}/bin/https/lib
    $CP ${HOME_DIR}/libcis.so ${IWS_ROOT}/bin/https/lib
  fi
}

remove_NSES_CLASSPATH() {
  echo "Removing definition of NSES_CLASSPATH for $1"
  if [ "X$OSTYPE" = "Xwin32" ]; then
    echo "The NSES_CLASSPATH settings are stored in the registry on Windows. Using regedit, navigate to the following registry node - HKEY_LOCAL_MACHINE\SOFTWARE\Netscape\Enterprise\7.0. Disable iWS's existing classpath settings by renaming the key named NSES_CLASSPATH. Then add a new String value named NSES_CLASSPATH. Leave its value empty. The admin server will not run with this configuration. To run the admin server, restore the "original" NSES_CLASSPATH String value. "
  else
    OlderInstance="$1/start"
    StartInstance="${OlderInstance}.FCS"
    mv ${OlderInstance} ${StartInstance}

    # get the line number
    beforeLine=`grep -n "; export" ${StartInstance} |head -1| awk -F: '{print $1}'`
 
    insertLine=`expr ${beforeLine} - 1`
    head -${insertLine} ${StartInstance} > ${OlderInstance}
    echo "NSES_CLASSPATH=; export NSES_CLASSPATH" >> ${OlderInstance}
    tail +${beforeLine} ${StartInstance} >> ${OlderInstance}
    chmod 755 ${OlderInstance}
    echo " ... Done\n\n"
  fi
}

copy_and_tune_template() {
  echo "Patching $2"
  $CP $2 $2.FCS
  $CP $1 $2
  echo "Tuning $2"
  sub_var $2
  echo " ... Done\n\n"
}

modify_magnus() {
  echo "Modifying magnus.conf\n"
  $CP $1/config/magnus.conf $1/config/magnus.conf.FCS
  sed /NSServlet/d $1/config/magnus.conf.FCS > $1/config/magnus.conf
  cat >> $1/config/magnus.conf << EOF
Init fn="load-modules" shlib="${IWS_ROOT}/bin/https/${LIBDIR}" funcs="init-j2ee,ntrans-j2ee,service-j2ee" shlib_flags="(global|now)"
  
Init fn="init-j2ee"  LateInit=yes
EOF
  echo " ... Done\n\n"
}

MDBStuff() {
  # server_7_0.dtd
  $CP $1/config/server_7_0.dtd $1/config/server_7_0.dtd.FCS
  head -6 $1/config/server_7_0.dtd.FCS > $1/config/server_7_0.dtd
  cat >> $1/config/server_7_0.dtd << EOF
<!ELEMENT server ((param | (param-name, param-value))*, jms-provider?, component*,
          listener*, logger?, mime*, acl*, virtual-server-class*,
          qos?, application*, ejb-module*, web-module*)>   
<!ELEMENT jms-provider EMPTY>
<!ATTLIST jms-provider  enabled %boolean; 'true'
    lazy-start %boolean; 'false'
    auto-shutdown %boolean; 'true'
    host CDATA 'localhost'
    port CDATA '7676'
    instance-name CDATA #IMPLIED
    admin-username CDATA #REQUIRED
    admin-password CDATA #REQUIRED>
EOF
  tail +10 $1/config/server_7_0.dtd.FCS >> $1/config/server_7_0.dtd
  #rm $1/config/server_7_0.dtd.FCS

  # server.xml
  $CP $1/config/server.xml $1/config/server.xml.FCS
  head -$2 $1/config/server.xml.FCS > $1/config/server.xml
  echo "<jms-provider enabled=\"false\" lazy-start=\"false\" host=\"localhost\" admin-username=\"admin\" admin-password=\"admin\" auto-shutdown=\"false\"/>" >> $1/config/server.xml
  tail +$3 $1/config/server.xml.FCS >> $1/config/server.xml
  #rm $1/config/server.xml.FCS
}

add_admingui_app() { 
  $CP $1/config/server.xml $1/config/server.xml.noadmingui 
  cat $1/config/server.xml.noadmingui | grep -v "</server>" > $1/config/server.xml 
  cat >> $1/config/server.xml << EOF
<application name="admingui" location="$1/repository/applications/admingui" enabled="true"> 
    <web-module location="adminGUI_war" enabled="true"> 
    </web-module> 
</application> 
</server> 
EOF
  rm $1/config/server.xml.noadmingui
} 

BITS=${HOME_DIR}/j2sdkee1.3.1.b11.tar.gz

echo "Installing J2EE Reference Implementation 1.3\n"

echo `date`

mkdir -p ${RI_ROOT}
if [ "X$OSTYPE" = "Xwin32" ]; then
  cd ${HOME_DIR}
  ./j2sdkee-1_3_1-ea-bin-b11-win-30_nov_2001.exe
else
  cd ${RI_ROOT}
  gzip -dc $BITS | tar xvf -
fi
echo "... Complete\n\n"

echo "Patching userconfig.sh\n"
$CP ${RI_ROOT}/bin/userconfig.sh ${RI_ROOT}/bin/userconfig.sh.FCS
$CP ${HOME_DIR}/userconfig.sh ${RI_ROOT}/bin/userconfig.sh
sub_var ${RI_ROOT}/bin/userconfig.sh
echo " ... Done\n\n"

echo "Modifying server.policy\n"
$CP ${RI_ROOT}/lib/security/server.policy ${RI_ROOT}/lib/security/server.policy.FCS
$CP ${HOME_DIR}/server.policy  ${RI_ROOT}/lib/security/server.policy
sub_var ${RI_ROOT}/lib/security/server.policy
echo " ... Done\n\n"

echo "Installing the web server\n"

echo `date`

IWS_DIR=${HOME_DIR}/IWS
mkdir -p ${IWS_DIR}
cd ${IWS_DIR}
if [ "X$OSTYPE" = "Xwin32" ]; then
  cp ${HOME_DIR}/iws.zip ${IWS_DIR}
  unzip iws.zip
else
  tar -xvf ${HOME_DIR}/iws.tar 
fi
if [ -f ${INSTALLINF} ]; then
        cp ${INSTALLINF} ${IWS_DIR}
        echo ${IWS_DIR}/setup -s -f ${INSTALLINF_SETUP}
	${IWS_DIR}/setup -s -f ${INSTALLINF_SETUP}
elif [ -f ${INSTALLVANILLA} ] ; then
	$CP ${INSTALLVANILLA} ${INSTALLINF}
	sub_var ${INSTALLINF}
	sub_trim ${INSTALLINF}
      cp ${INSTALLINF} ${IWS_DIR}
        echo ${IWS_DIR}/setup -s -f ${INSTALLINF_SETUP}
	${IWS_DIR}/setup -s -f ${INSTALLINF_SETUP} 
else
	${IWS_DIR}/setup
fi
echo " ...Done\n\n"


WebInstance=`ls -1d ${IWS_ROOT}/https-* | grep -v admserv`
WebAdmin=`ls -1d ${IWS_ROOT}/https-* | grep admserv`

#addSlashForNT ${WebInstance}/config/server.xml

webAll start
webAll stop


echo "Patching iWS plugin and libcis.so\n"
echo `date`
patchIWSPlugin
echo " ... Done\n\n"

remove_NSES_CLASSPATH ${WebInstance}
remove_NSES_CLASSPATH ${WebAdmin}

#Commenting out so that Kedar can test -- obj.conf
copy_and_tune_template ${HOME_DIR}/jvm12.conf ${WebInstance}/config/jvm12.conf
#copy_and_tune_template ${HOME_DIR}/obj.conf ${WebInstance}/config/obj.conf
copy_and_tune_template ${HOME_DIR}/jvm12-adm.conf ${WebAdmin}/config/jvm12.conf
#copy_and_tune_template ${HOME_DIR}/obj.conf ${WebAdmin}/config/obj.conf

#Commenting out so that Kedar can test
#modify_magnus ${WebInstance}
#modify_magnus ${WebAdmin}

echo "Restoring generated.https-admserv.acl\n"
$CP ${IWS_ROOT}/httpacl/generated.https-admserv.acl  ${IWS_ROOT}/httpacl/generated.https-admserv.acl.FCS
$CP `ls -1d ${IWS_ROOT}/httpacl/generated.https-* | grep -v admserv` ${IWS_ROOT}/httpacl/generated.https-admserv.acl
echo " ... Done\n\n"



echo "Deploying adminapp\n"
cd ${IWS_ROOT}/https-admserv 
mkdir -p repository/modules repository/stubs repository/applications/adminapp/war-ic_war
cd repository/applications/adminapp
cp ${HOME_DIR}/adminapp.ear .
${JDK_HOME}/bin/jar -xvf adminapp.ear
cd war-ic_war 
${JDK_HOME}/bin/jar xvf ../war-ic.war
rm ../war-ic.war
rm ../adminapp.ear
echo " ... Done\n\n"

echo "Deploying admingui\n"
cd ${IWS_ROOT}/https-admserv
mkdir -p repository/applications/admingui/adminGUI_war
cd repository/applications/admingui
cp ${HOME_DIR}/admingui.ear .
${JDK_HOME}/bin/jar -xvf admingui.ear
cd adminGUI_war
${JDK_HOME}/bin/jar xvf ../adminGUI.war
rm ../adminGUI.war
rm ../admingui.ear
echo " ... Done\n\n"

#Commenting out so that Kedar can test
#echo "Modifying server.xml to add admingui application\n"
#add_admingui_app ${WebAdmin}
#echo " ... Done\n\n"
#######################


echo "Patching ias7deploy.sh\n"
$CP ${HOME_DIR}/ias7deploy.sh  ${IWS_ROOT}/bin/https/bin/ias7deploy.sh
sub_var ${IWS_ROOT}/bin/https/bin/ias7deploy.sh
chmod u+rx ${IWS_ROOT}/bin/https/bin/ias7deploy.sh
echo " ... Done\n\n"


echo "Copying CLI scripts\n"
$CP ${HOME_DIR}/${IASADMIN} ${IWS_ROOT}/bin/https/bin/${IASADMIN}
if [ "X$OSTYPE" = "Xwin32" ]; then
  sub_var_win ${IWS_ROOT}/bin/https/bin/${IASADMIN}
  sub_slash ${IWS_ROOT}/bin/https/bin/${IASADMIN}
else 
  sub_var ${IWS_ROOT}/bin/https/bin/${IASADMIN}
fi
chmod u+rx ${IWS_ROOT}/bin/https/bin/${IASADMIN}
echo " ... Done\n\n"

echo "Copying samples\n"
cp -r ${HOME_DIR}/samples ${IWS_ROOT}/
echo " ... Done\n\n"

echo "Copying jar files to ${IWS_ROOT}/bin/https/jar"
cp ${IWS_ROOT}/bin/https/jar/crimson.jar ${IWS_ROOT}/bin/https/jar/crimson.jar.FCS 
cp ${IWS_ROOT}/bin/https/jar/jaxp.jar ${IWS_ROOT}/bin/https/jar/jaxp.jar.FCS 
cp ${IWS_ROOT}/bin/https/jar/xalan.jar ${IWS_ROOT}/bin/https/jar/xalan.jar.FCS 
cd ${HOME_DIR}
for i in `ls *.jar`
do
  cp $i ${IWS_ROOT}/bin/https/jar/$i
done
echo " ... Done\n\n"
echo "Copying the props directory\n"
cp -r ${HOME_DIR}/props  ${IWS_ROOT}/bin/https/

echo "Permissions for logs\n"
mkdir -p ${RI_ROOT}/logs/${HOSTNAME}/j2ee/j2ee
touch ${RI_ROOT}/logs/${HOSTNAME}/j2ee/j2ee/system.out
touch ${RI_ROOT}/logs/${HOSTNAME}/j2ee/j2ee/system.err
chmod -R 777 ${RI_ROOT}/logs
echo " ... Done\n\n"

echo "Copying 6.0 sample apps"
SAMPLES60_DIR=${IWS_ROOT}/samples60
mkdir -p ${SAMPLES60_DIR}
if [ "X$OSTYPE" = "Xwin32" ]; then
  $CP ${HOME_DIR}/ias-samples_6.0-Sp4.zip ${SAMPLES60_DIR}
  cd ${SAMPLES60_DIR}
  unzip ias-samples_6.0-Sp4.zip
else
  cd ${SAMPLES60_DIR}
  tar -xvf ${HOME_DIR}/ias-samples_6.0-Sp4.tar
fi

#Commenting out the following step as per talk with Amy Kang
#echo "Update server_7_0.dtd and server.xml"
#MDBStuff ${WebInstance} 7 8
#echo "Done"

#echo "Modifying resource.properties"
#$CP ${RI_ROOT}/config/resource.properties ${RI_ROOT}/config/resource.properties.FCS
#cat >> ${RI_ROOT}/config/resource.properties << EOF
#jmsDestination.2.name=jms/SimpleQueue
#jmsDestination.2.isQueue=true
#jmsDestination.0.prop.imqDestinationName=jmsQueue
#jmsDestination.1.prop.imqDestinationName=jmsTopic
#jmsDestination.2.prop.imqDestinationName=jmsSimpleQueue
#EOF
#echo " ... Done\n\n"


echo `date`

$CP ${WebInstance}/config/* ${WebInstance}/conf_bk/
$CP ${WebAdmin}/config/* ${WebAdmin}/conf_bk/

web ${WebAdmin} start

rm ${SedCom}
rm ${INSTALLINF}
