# translation of extend.po to Korean
# Language ko-KR translations for Introduction_to_Web_Beans package.
# 
# Automatically generated, 2009.
# Eunju Kim <eukim@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-01-23 11:05+1000\n"
"Last-Translator: Eunju Kim <eukim@redhat.com>\n"
"Language-Team: Korean <ko@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=2; plural=(n!=1);\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#, no-c-format
msgid "Portable extensions"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"CDI is intended to be a foundation for frameworks, extensions and "
"integration with other technologies. Therefore, CDI exposes a set of SPIs "
"for the use of developers of portable extensions to CDI. For example, the "
"following kinds of extensions were envisaged by the designers of CDI:"
msgstr ""
"Web Beans는 다른 기술과의 통합, 확장, 프레임워크에 대한 플랫폼이 되기 위한 것입니다. 따라서, Web Beans는 Web "
"Beans로의 휴대용 확장에 대한 개발자의 사용을 위해 SPI 모음을 노출합니다. 예를 들어, 다음과 같은 종류의 확장은 Web "
"Beans 개발자에 의해 구상되었습니다. "

#. Tag: para
#, no-c-format
msgid "integration with Business Process Management engines,"
msgstr "비지니스 프로세스 관리 엔진과의 통합 "

#. Tag: para
#, no-c-format
msgid ""
"integration with third-party frameworks such as Spring, Seam, GWT or Wicket,"
" and"
msgstr " Spring, Seam, GWT, Wicket과 같은 제삼자 프레임워크와의 통합 "

#. Tag: para
#, fuzzy, no-c-format
msgid "new technology based upon the CDI programming model."
msgstr "Web Beans 프로그래밍 모델을 기반으로 하는 새로운 기술 "

#. Tag: para
#, no-c-format
msgid "More formally, according to the spec:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "A portable extension may integrate with the container by:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Providing its own beans, interceptors and decorators to the container"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Injecting dependencies into its own objects using the dependency injection "
"service"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Providing a context implementation for a custom scope"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Augmenting or overriding the annotation-based metadata with metadata from "
"some other source"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Creating an <literal>Extension</literal>"
msgstr "<literal>Bean</literal> 클래스 "

#. Tag: para
#, no-c-format
msgid ""
"The first step in creating a portable extension is to write a class that "
"implements <literal>Extension</literal>. This marker interface does not "
"define any methods, but it's needed to satisfy the requirements of Java SE's"
" service provider architecture."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "class MyExtension implements Extension { ... }"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Next, we need to register our extension as a service provider by creating a "
"file named <literal>META-"
"INF/services/javax.enterprise.inject.spi.Extension</literal>, which contains"
" the name of our extension class:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "org.mydomain.extension.MyExtension"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"An extension is not a bean, exactly, since it is instantiated by the "
"container during the initialization process, before any beans or contexts "
"exist. However, it can be injected into other beans once the initialization "
"process is complete."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Inject \n"
"MyBean(MyExtension myExtension) {\n"
"   myExtension.doSomething();\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"And, like beans, extensions can have observer methods. Usually, the observer"
" methods observe <emphasis>container lifecycle events</emphasis>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Container lifecycle events"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"During the initialization process, the container fires a series of events, "
"including:"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>BeforeBeanDiscovery</literal>"
msgstr "<literal>Manager</literal> 객체 "

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>ProcessAnnotatedType</literal>"
msgstr "<literal>Manager</literal> 객체 "

#. Tag: para
#, no-c-format
msgid ""
"<literal>ProcessInjectionTarget</literal> and "
"<literal>ProcessProducer</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<literal>ProcessBean</literal> and <literal>ProcessObserverMethod</literal>"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>AfterBeanDiscovery</literal>"
msgstr "<literal>Manager</literal> 객체 "

#. Tag: para
#, no-c-format
msgid "<literal>AfterDeploymentValidation</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Extensions may observe these events:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class MyExtension implements Extension {\n"
"   \n"
"   void beforeBeanDiscovery(@Observes BeforeBeanDiscovery bbd) {\n"
"      Logger.global.debug(\"beginning the scanning process\");\n"
"   }\n"
"      \n"
"   &lt;T&gt; void processAnnotatedType(@Observes ProcessAnnotatedType&lt;T&gt; pat) {\n"
"      Logger.global.debug(\"scanning type: \" + pat.getAnnotatedType().getJavaClass().getName());\n"
"   } \n"
"\n"
"   void afterBeanDiscovery(@Observes AfterBeanDiscovery abd) {\n"
"      Logger.global.debug(\"finished the scanning process\");\n"
"   }\n"
"   \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In fact, the extension can do a lot more than just observe. The extension is"
" permitted to modify the container's metamodel and more. Here's a very "
"simple example:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class MyExtension implements Extension {\n"
"      \n"
"   &lt;T&gt; void processAnnotatedType(@Observes ProcessAnnotatedType&lt;T&gt; pat) {\n"
"      //tell the container to ignore the type if it is annotated @Ignore\n"
"      if ( pat.getAnnotatedType().isAnnotionPresent(Ignore.class) ) pat.veto();   \n"
"   } \n"
"   \n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "The observer method may inject a <literal>BeanManager</literal>"
msgstr "Web Beans 확장의 중심은 <literal>Manager</literal> 객체입니다.  "

#. Tag: programlisting
#, no-c-format
msgid ""
"&lt;T&gt; void processAnnotatedType(@Observes ProcessAnnotatedType&lt;T&gt; "
"pat, BeanManager beanManager) { ... }"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "The <literal>BeanManager</literal> object"
msgstr "<literal>Manager</literal> 객체 "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The nerve center for extending CDI is the <literal>BeanManager</literal> "
"object. The <literal>BeanManager</literal> interface lets us obtain beans, "
"interceptors, decorators, observers and contexts programmatically."
msgstr ""
"<literal>Manager</literal> 인터페이스는 Web Beans, 인터셉터, 데코레이터, 옵저버 및 컨텍스트를 "
"프로그램적으로 획득하여 등록할 수 있게 합니다. "

#. Tag: programlisting
#, no-c-format
msgid ""
"public interface BeanManager {\n"
"   public Object getReference(Bean&lt;?&gt; bean, Type beanType, CreationalContext&lt;?&gt; ctx);\n"
"   public Object getInjectableReference(InjectionPoint ij, CreationalContext&lt;?&gt; ctx);\n"
"   public &lt;T&gt; CreationalContext&lt;T&gt; createCreationalContext(Contextual&lt;T&gt; contextual);\n"
"   public Set&lt;Bean&lt;?&gt;&gt; getBeans(Type beanType, Annotation... qualifiers);\n"
"   public Set&lt;Bean&lt;?&gt;&gt; getBeans(String name);\n"
"   public Bean&lt;?&gt; getPassivationCapableBean(String id);\n"
"   public &lt;X&gt; Bean&lt;? extends X&gt; resolve(Set&lt;Bean&lt;? extends X&gt;&gt; beans);\n"
"   public void validate(InjectionPoint injectionPoint);\n"
"   public void fireEvent(Object event, Annotation... qualifiers);\n"
"   public &lt;T&gt; Set&lt;ObserverMethod&lt;? super T&gt;&gt; resolveObserverMethods(T event, Annotation... qualifiers);\n"
"   public List&lt;Decorator&lt;?&gt;&gt; resolveDecorators(Set&lt;Type&gt; types, Annotation... qualifiers);\n"
"   public List&lt;Interceptor&lt;?&gt;&gt; resolveInterceptors(InterceptionType type, Annotation... interceptorBindings);\n"
"   public boolean isScope(Class&lt;? extends Annotation&gt; annotationType);\n"
"   public boolean isNormalScope(Class&lt;? extends Annotation&gt; annotationType);\n"
"   public boolean isPassivatingScope(Class&lt;? extends Annotation&gt; annotationType);\n"
"   public boolean isQualifier(Class&lt;? extends Annotation&gt; annotationType);\n"
"   public boolean isInterceptorBinding(Class&lt;? extends Annotation&gt; annotationType);\n"
"   public boolean isStereotype(Class&lt;? extends Annotation&gt; annotationType);\n"
"   public Set&lt;Annotation&gt; getInterceptorBindingDefinition(Class&lt;? extends Annotation&gt; bindingType);\n"
"   public Set&lt;Annotation&gt; getStereotypeDefinition(Class&lt;? extends Annotation&gt; stereotype);\n"
"   public Context getContext(Class&lt;? extends Annotation&gt; scopeType);\n"
"   public ELResolver getELResolver();\n"
"   public ExpressionFactory wrapExpressionFactory(ExpressionFactory expressionFactory);\n"
"   public &lt;T&gt; AnnotatedType&lt;T&gt; createAnnotatedType(Class&lt;T&gt; type);\n"
"   public &lt;T&gt; InjectionTarget&lt;T&gt; createInjectionTarget(AnnotatedType&lt;T&gt; type);\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Any bean or other Java EE component which supports injection can obtain an "
"instance of <literal>BeanManager</literal> via injection:"
msgstr "삽입을 통해 <literal>Manager</literal> 인스턴스를 얻을 수 있습니다: "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject BeanManager beanManager;"
msgstr "@Current Manager manager"

#. Tag: para
#, no-c-format
msgid ""
"Java EE components may obtain an instance of <literal>BeanManager</literal> "
"from JNDI by looking up the name <literal>java:comp/BeanManager</literal>. "
"Any operation of <literal>BeanManager</literal> may be called at any time "
"during the execution of the application."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Let's study some of the interfaces exposed by the "
"<literal>BeanManager</literal>."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "The <literal>InjectionTarget</literal> interface"
msgstr "<literal>Context</literal> 인터페이스 "

#. Tag: para
#, no-c-format
msgid ""
"The first thing that a framework developer is going to look for in the "
"portable extension SPI is a way to inject CDI beans into objects which are "
"not under the control of CDI. The <literal>InjectionTarget</literal> "
"interface makes this very easy."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"We recommend that frameworks let CDI take over the job of actually "
"instantiating the framework-controlled objects. That way, the framework-"
"controlled objects can take advantage of constructor injection. However, if "
"the framework requires use of a constructor with a special signature, the "
"framework will need to insntatiate the object itself, and so only method and"
" field injection will be supported."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"//get the BeanManager from JNDI\n"
"BeanManager beanManager = (BeanManager) new InitialContext().lookup(\"java:comp/BeanManager\");\n"
"\n"
"//CDI uses an AnnotatedType object to read the annotations of a class\n"
"AnnotatedType&lt;SomeFrameworkComponent&gt; type = beanManager.createAnnotatedType(SomeFrameworkComponent.class);\n"
"\n"
"//The extension uses an InjectionTarget to delegate instantiation, dependency injection \n"
"//and lifecycle callbacks to the CDI container\n"
"InjectionTarget&lt;SomeFrameworkComponent&gt; it = beanManager.createInjectionTarget(type);\n"
"\n"
"//each instance needs its own CDI CreationalContext\n"
"CreationalContext ctx = beanManager.createCreationalContext(null);\n"
"\n"
"//instantiate the framework component and inject its dependencies\n"
"SomeFrameworkComponent instance = it.produce(ctx);  //call the constructor\n"
"it.inject(instance, ctx);  //call initializer methods and perform field injection\n"
"it.postConstruct(instance);  //call the @PostConstruct method\n"
"\n"
"...\n"
"\n"
"//destroy the framework component instance and clean up dependent objects\n"
"it.preDestroy(instance);  //call the @PreDestroy method\n"
"it.dispose(instance);  //it is now safe to discard the instance\n"
"ctx.release();  //clean up dependent objects\n"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "The <literal>Bean</literal> interface"
msgstr "<literal>Context</literal> 인터페이스 "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Instances of the interface <literal>Bean</literal> represent beans. There is"
" an instance of <literal>Bean</literal> registered with the "
"<literal>BeanManager</literal> object for every bean in the application. "
"There are even <literal>Bean</literal> objects representing interceptors, "
"decorators and producer methods."
msgstr ""
"<literal>Bean</literal> 추상 클래스의 인스턴스는 Web Beans를 나타냅니다. 애플리케이션에 있는 모든 Web "
"Bean에 해당하는 <literal>Manager</literal> 객체로 등록된 <literal>Bean</literal> 인스턴스가 "
"있습니다.  "

#. Tag: para
#, no-c-format
msgid ""
"The <literal>Bean</literal> interface exposes all the interesting things we "
"discussed in <xref linkend=\"bean-anatomy\" />."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public interface Bean&lt;T&gt; extends Contextual&lt;T&gt; {\n"
"   public Set&lt;Type&gt; getTypes();\n"
"   public Set&lt;Annotation&gt; getQualifiers();\n"
"   public Class&lt;? extends Annotation&gt; getScope();\n"
"   public String getName();\n"
"   public Set&lt;Class&lt;? extends Annotation&gt;&gt; getStereotypes();\n"
"   public Class&lt;?&gt; getBeanClass();\n"
"   public boolean isAlternative();\n"
"   public boolean isNullable();\n"
"   public Set&lt;InjectionPoint&gt; getInjectionPoints();\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "There's an easy way to find out what beans exist in the application:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"Set&lt;Bean&lt;?&gt;&gt; allBeans = beanManager.getBeans(Obect.class, new "
"AnnotationLiteral&lt;Any&gt;() {});"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>Bean</literal> interface makes it possible for a portable "
"extension to provide support for new kinds of beans, beyond those defined by"
" the CDI specification. For example, we could use the "
"<literal>Bean</literal> interface to allow objects managed by another "
"framework to be injected into beans."
msgstr ""
"Web Beans 사양 (심플 Web Beans 및 엔터프라이즈 Web Beans, 생산자 방식 및 JMS 엔드포인트)에 의해 정의된 것"
" 이상으로 새로운 종류의 Web Beans을 지원하기 위해 <literal>Bean</literal> 클래스를 확장하고 "
"<literal>Manager.addBean()</literal>를 호출하여 인스턴스를 등록할 수 있습니다. 예를 들어, "
"<literal>Bean</literal> 클래스를 사용하여 Web Beans에 주입된 다른 프레임워크에 의해 관리되는 객체를 허용하게 "
"할 수 있습니다. "

#. Tag: title
#, fuzzy, no-c-format
msgid "Registering a <literal>Bean</literal>"
msgstr "<literal>Bean</literal> 클래스 "

#. Tag: para
#, no-c-format
msgid ""
"The most common kind of CDI portable extension registers a bean (or beans) "
"with the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In this example, we make a framework class, "
"<literal>SecurityManager</literal> available for injection. To make things a"
" bit more interesting, we're going to delegate back to the container's "
"<literal>InjectionTarget</literal> to perform instantiation and injection "
"upon the <literal>SecurityManager</literal> instance."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class SecurityManagerExtension implements Extension {\n"
"    \n"
"    void afterBeanDiscovery(@Observes AfterBeanDiscovery abd, BeanManager bm) {\n"
"            \n"
"        //use this to read annotations of the class\n"
"        AnnotatedType&lt;SecurityManager&gt; at = bm.createAnnotatedType(SecurityManager.class); \n"
"\n"
"        //use this to instantiate the class and inject dependencies\n"
"        final InjectionTarget&lt;SecurityManager&gt; it = bm.createInjectionTarget(at); \n"
"\n"
"        abd.addBean( new Bean&lt;SecurityManager&gt;() {\n"
"\n"
"            @Override\n"
"            public Class&lt;?&gt; getBeanClass() {\n"
"                return SecurityManager.class;\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&lt;InjectionPoint&gt; getInjectionPoints() {\n"
"                return it.getInjectionPoints();\n"
"            }\n"
"\n"
"            @Override\n"
"            public String getName() {\n"
"                return \"securityManager\";\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&lt;Annotation&gt; getQualifiers() {\n"
"                Set&lt;Annotation&gt; qualifiers = new HashSet&lt;Annotation&gt;();\n"
"                qualifiers.add( new AnnotationLiteral&lt;Default&gt;() {} );\n"
"                qualifiers.add( new AnnotationLiteral&lt;Any&gt;() {} );\n"
"                return qualifiers;\n"
"            }\n"
"\n"
"            @Override\n"
"            public Class&lt;? extends Annotation&gt; getScope() {\n"
"                return SessionScoped.class;\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&lt;Class&lt;? extends Annotation&gt;&gt; getStereotypes() {\n"
"                return Collections.emptySet();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&lt;Type&gt; getTypes() {\n"
"                Set&lt;Type&gt; types = new HashSet&lt;Type&gt;();\n"
"                types.add(SecurityManager.class);\n"
"                types.add(Object.class);\n"
"                return types;\n"
"            }\n"
"\n"
"            @Override\n"
"            public boolean isAlternative() {\n"
"                return false;\n"
"            }\n"
"\n"
"            @Override\n"
"            public boolean isNullable() {\n"
"                return false;\n"
"            }\n"
"\n"
"            @Override\n"
"            public SecurityManager create(CreationalContext&lt;SecurityManager&gt; ctx) {\n"
"                SecurityManager instance = it.produce(ctx);\n"
"                it.inject(instance, ctx);\n"
"                it.postConstruct(instance);\n"
"                return instance;\n"
"            }\n"
"\n"
"            @Override\n"
"            public void destroy(SecurityManager instance, \n"
"                                CreationalContext&lt;SecurityManager&gt; ctx) {\n"
"                it.preDestroy(instance);\n"
"                it.dispose(instance);\n"
"                ctx.release();\n"
"            }\n"
"            \n"
"        } );\n"
"    }\n"
"    \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"But a portable extension can also mess with beans that are discovered "
"automatically by the container."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Wrapping an <literal>AnnotatedType</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"One of the most interesting things that an extension class can do is process"
" the annotations of a bean class <emphasis>before</emphasis> the container "
"builds its metamodel."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Let's start with an example of an extension that provides support for the "
"use of <literal>@Named</literal> at the package level. The package-level "
"name is used to qualify the EL names of all beans defined in that package. "
"The portable extension uses the <literal>ProcessAnnotatedType</literal> "
"event to wrap the <literal>AnnotatedType</literal> object and override the "
"<literal>value()</literal> of the <literal>@Named</literal> annotation."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class QualifiedNameExtension implements Extension {\n"
"\n"
"    &lt;X&gt; void processAnnotatedType(@Observes ProcessAnnotatedType&lt;X&gt; pat) {\n"
"\n"
"        //wrap this to override the annotations of the class\n"
"        final AnnotatedType&lt;X&gt; at = pat.getAnnotatedType();\n"
"        \n"
"        AnnotatedType&lt;X&gt; wrapped = new AnnotatedType&lt;X&gt;() {\n"
"\n"
"            @Override\n"
"            public Set&lt;AnnotatedConstructor&lt;X&gt;&gt; getConstructors() {\n"
"                return at.getConstructors();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&lt;AnnotatedField&lt;? super X&gt;&gt; getFields() {\n"
"                return at.getFields();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Class&lt;X&gt; getJavaClass() {\n"
"                return at.getJavaClass();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&lt;AnnotatedMethod&lt;? super X&gt;&gt; getMethods() {\n"
"                return at.getMethods();\n"
"            }\n"
"\n"
"            @Override\n"
"            public &lt;T extends Annotation&gt; T getAnnotation(final Class&lt;T&gt; annType) {\n"
"                if ( Named.class.equals(annType) ) {\n"
"                    class NamedLiteral \n"
"                            extends AnnotationLiteral&lt;Named&gt; \n"
"                            implements Named {\n"
"                        @Override\n"
"                        public String value() {\n"
"                            Package pkg = at.getClass().getPackage();\n"
"                            String unqualifiedName = at.getAnnotation(Named.class).value();\n"
"                            final String qualifiedName;\n"
"                            if ( pkg.isAnnotationPresent(Named.class) ) {\n"
"                                qualifiedName = pkg.getAnnotation(Named.class).value() \n"
"                                      + '.' + unqualifiedName;\n"
"                            }\n"
"                            else {\n"
"                                qualifiedName = unqualifiedName;\n"
"                            }\n"
"                            return qualifiedName;\n"
"                        }\n"
"                    }\n"
"                    return (T) new NamedLiteral();\n"
"                }\n"
"                else {\n"
"                    return at.getAnnotation(annType);\n"
"                }\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&lt;Annotation&gt; getAnnotations() {\n"
"                return at.getAnnotations();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Type getBaseType() {\n"
"                return at.getBaseType();\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&lt;Type&gt; getTypeClosure() {\n"
"                return at.getTypeClosure();\n"
"            }\n"
"\n"
"            @Override\n"
"            public boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annType) {\n"
"                return at.isAnnotationPresent(annType);\n"
"            }\n"
"            \n"
"        };\n"
"        \n"
"        pat.setAnnotatedType(wrapped);\n"
"    }\n"
"    \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here's a second example, which adds the <literal>@Alternative</literal> "
"annotation to any class which implements a certain "
"<literal>Service</literal> interface."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class ServiceAlternativeExtension implements Extension {\n"
"      \n"
"   &lt;T&gt; void processAnnotatedType(@Observes ProcessAnnotatedType&lt;T&gt; pat) {\n"
"   \n"
"      final AnnotatedType&lt;T&gt; type = pat.getAnnotatedType();\n"
"      \n"
"      if ( Service.class.isAssignableFrom( type.getJavaClass() ) ) {\n"
"      \n"
"         //if the class implements Service, make it an @Alternative\n"
"         AnnotatedType&lt;T&gt; wrapped = new AnnotatedType&lt;T&gt;() {\n"
"         \n"
"            @Override\n"
"            public boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationType) {\n"
"               return annotationType.equals(Alternative.class) ? \n"
"                  true : type.isAnnotationPresent(annotationType);\n"
"            }\n"
"            \n"
"            //remaining methods of AnnotatedType\n"
"            ...\n"
"         }\n"
"         \n"
"         pat.setAnnotatedType(wrapped);\n"
"      }\n"
"   } \n"
"   \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <literal>AnnotatedType</literal> is not the only thing that can be "
"wrapped by an extension."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Wrapping an <literal>InjectionTarget</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <literal>InjectionTarget</literal> interface exposes operations for "
"producing and disposing an instance of a component, injecting its "
"dependencies and invoking its lifecycle callbacks. A portable extension may "
"wrap the <literal>InjectionTarget</literal> for any Java EE component that "
"supports injection, allowing it to intercept any of these operations when "
"they are invoked by the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here's a CDI portable extension that reads values from properties files and "
"configures fields of Java EE components, including servlets, EJBs, managed "
"beans, interceptors and more. In this example, properties for a class such "
"as <literal>org.mydomain.blog.Blogger</literal> go in a resource named "
"<literal>org/mydomain/blog/Blogger.properties</literal>, and the name of a "
"property must match the name of the field to be configured. So "
"<literal>Blogger.properties</literal> could contain:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"firstName=Gavin\n"
"lastName=King"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The portable extension works by wrapping the containers "
"<literal>InjectionTarget</literal> and setting field values from the "
"<literal>inject()</literal> method."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"public class ConfigExtension implements Extension {\n"
"\n"
"\t&lt;X&gt; void processInjectionTarget(@Observes ProcessInjectionTarget&lt;X&gt; pit) {\n"
"\t\t\n"
"\t\t//wrap this to intercept the component lifecycle\n"
"\t    final InjectionTarget&lt;X&gt; it = pit.getInjectionTarget();\n"
"\t    \n"
"        final Map&lt;Field, Object&gt; configuredValues = new HashMap&lt;Field, Object&gt;();\n"
"        \n"
"        //use this to read annotations of the class and its members\n"
"        AnnotatedType&lt;X&gt; at = pit.getAnnotatedType();\n"
"        \n"
"        //read the properties file\n"
"        String propsFileName = at.getClass().getSimpleName() + \".properties\";\n"
"        InputStream stream = at.getJavaClass().getResourceAsStream(propsFileName);\n"
"        if (stream!=null) {\n"
"            \n"
"            try {\n"
"                Properties props = new Properties();\n"
"                props.load(stream);\n"
"                for (Map.Entry&lt;Object, Object&gt; property : props.entrySet()) {\n"
"                    String fieldName = property.getKey().toString();\n"
"                    Object value = property.getValue();\n"
"                    try {\n"
"                        Field field = at.getJavaClass().getField(fieldName);\n"
"                        field.setAccessible(true);\n"
"                        if ( field.getType().isAssignableFrom( value.getClass() ) ) {\n"
"                            configuredValues.put(field, value);\n"
"                        }\n"
"                        else {\n"
"                            //TODO: do type conversion automatically\n"
"                            pit.addDefinitionError( new InjectionException(\n"
"                                   \"field is not of type String: \" + field ) );\n"
"                        }\n"
"                    }\n"
"                    catch (NoSuchFieldException nsfe) {\n"
"                        pit.addDefinitionError(nsfe);\n"
"                    }\n"
"                    finally {\n"
"                        stream.close();\n"
"                    }\n"
"                }\n"
"            }\n"
"            catch (IOException ioe) {\n"
"                pit.addDefinitionError(ioe);\n"
"            }\n"
"        }\n"
"        \n"
"        InjectionTarget&lt;X&gt; wrapped = new InjectionTarget&lt;X&gt;() {\n"
"\n"
"            @Override\n"
"            public void inject(X instance, CreationalContext&lt;X&gt; ctx) {\n"
"                it.inject(instance, ctx);\n"
"                \n"
"                //set the values onto the new instance of the component\n"
"                for (Map.Entry&lt;Field, Object&gt; configuredValue: configuredValues.entrySet()) {\n"
"                    try {\n"
"                        configuredValue.getKey().set(instance, configuredValue.getValue());\n"
"                    }\n"
"                    catch (Exception e) {\n"
"                        throw new InjectionException(e);\n"
"                    }\n"
"                }\n"
"            }\n"
"\n"
"            @Override\n"
"            public void postConstruct(X instance) {\n"
"                it.postConstruct(instance);\n"
"            }\n"
"\n"
"            @Override\n"
"            public void preDestroy(X instance) {\n"
"                it.dispose(instance);\n"
"            }\n"
"\n"
"            @Override\n"
"            public void dispose(X instance) {\n"
"                it.dispose(instance);\n"
"            }\n"
"\n"
"            @Override\n"
"            public Set&lt;InjectionPoint&gt; getInjectionPoints() {\n"
"                return it.getInjectionPoints();\n"
"            }\n"
"\n"
"            @Override\n"
"            public X produce(CreationalContext&lt;X&gt; ctx) {\n"
"                return it.produce(ctx);\n"
"            }\n"
"            \n"
"        };\n"
"        \n"
"        pit.setInjectionTarget(wrapped);\n"
"        \n"
"    }\n"
"    \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There's a lot more to the portable extension SPI than what we've discussed "
"here. Check out the CDI spec or Javadoc for more information. For now, we'll"
" just mention one more extension point."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The <literal>Context</literal> interface"
msgstr "<literal>Context</literal> 인터페이스 "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>Context</literal> interface supports addition of new scopes to "
"CDI, or extension of the built-in scopes to new environments."
msgstr ""
"<literal>Context</literal> 인터페이스는 Web Beans에 새로운 범위를 추가로 지원하거나 새로운 환경에 내장된 "
"범위를 확장 지원합니다.  "

#. Tag: programlisting
#, no-c-format
msgid ""
"public interface Context {\n"
"   public Class&lt;? extends Annotation&gt; getScope();\n"
"   public &lt;T&gt; T get(Contextual&lt;T&gt; contextual, CreationalContext&lt;T&gt; creationalContext);\n"
"   public &lt;T&gt; T get(Contextual&lt;T&gt; contextual);\n"
"   boolean isActive();\n"
"}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For example, we might implement <literal>Context</literal> to add a business"
" process scope to CDI, or to add support for the conversation scope to an "
"application that uses Wicket."
msgstr ""
"예를 들어, Web Beans에 비지니스 프로세스 범위를 추가하거나 또는 Wicket을 사용하는 애플리케이션에 컨버세이션 범위에 대한 "
"지원을 추가하기 위해 <literal>Context</literal>를 구현할 수 있습니다. "
