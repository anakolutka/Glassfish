<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 The contents of this file are subject to the terms 
 of the Common Development and Distribution License 
 (the License).  You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the license at 
 https://glassfish.dev.java.net/public/CDDLv1.0.html or
 glassfish/bootstrap/legal/CDDLv1.0.txt.
 See the License for the specific language governing 
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL 
 Header Notice in each file and include the License file 
 at glassfish/bootstrap/legal/CDDLv1.0.txt.  
 If applicable, add the following below the CDDL Header, 
 with the fields enclosed by brackets [] replaced by
 you own identifying information: 
 "Portions Copyrighted [year] [name of copyright owner]"
 
 Copyright 2006 Sun Microsystems, Inc. All rights reserved.
-->


<!-- ========== Initialize Properties =================================== -->

    <property file="./project.properties"/>
    <property name="repository" value="${maven.repo.local}"/>

    <target name="do.unzip">
        <echo message="Unzipping ${name}-${version}.jar to ${directory}"/>
        <unzip src="${repository}/${name}/jars/${name}-${version}.jar"
               dest="${directory}"/>
    </target>

    <target name="do.chmod" depends="do.chmod.unix"/>

    <target name="do.chmod.unix" depends="init">
        <!-- all the GlassFish/lib libraries and helper executables -->
        <chmod perm="ugo+x">
            <fileset dir="${glassfish.home}/lib">
                <include name="*.so"/>
                <include name="appserv"/>
                <include name="appservAgent"/>
                <include name="appservDAS"/>
                <include name="appservLauncher"/>
            </fileset>
        </chmod>
        <!-- the IMQ executables -->
        <chmod perm="ugo+x">
            <fileset dir="${glassfish.home}/imq/bin"/>
        </chmod>
        <!-- Apache ANT -->
        <chmod perm="ugo+x">
            <fileset dir="${glassfish.home}/lib/ant/bin">
                <!--
                 We don't plan to run GlassFish under Cygwin.
                 Cygwin requires executable bits for all the .exe, .dll, .bat and .cmd.
                 If you want to run GlassFish under Cygwin, comment the following <exclude/>.
                -->
                <exclude name="*.bat"/>
                <exclude name="*.cmd"/>
            </fileset>
        </chmod>
        <!-- lbplugin libraries -->
        <!-- chmod perm="ugo+x">
            <fileset dir="${glassfish.home}/lib/lbplugin/lib">
                <include name="**/*.so"/>
            </fileset>
        </chmod -->
        <!-- Netscape security executables -->
        <chmod perm="ugo+x">
            <fileset dir="${glassfish.home}/lib/upgrade"/>
        </chmod>
        <!-- javadb -->
        <chmod perm="ugo+x">
            <fileset dir="${glassfish.home}/javadb/frameworks/NetworkServer/bin">
                <include name="*.ksh"/>
                <!--
                 For Cygwin use the following:
                    <include name="*.bat"/>
                    <include name="*.cmd"/>
                -->
            </fileset>
        </chmod>
    </target>


    <target name="post-bootstrap-pe" depends="unzip-pe.jars, publish-native">

        <!-- Copy Licenses, Copyright documents -->
        <echo message="Publishing License, copyrights.."/>
        <copy todir="${glassfish.home}">
            <fileset dir="legal" excludes="*persistence*"/>
        </copy>

        <!-- Copy Licenses, Copyright documents -->
        <echo message="Publishing setup.xml ..."/>
        <copy file="${glassfish.maven}/setup.xml" todir="${glassfish.home}"/>

        <!-- Explode the imqjms rars to applications directory -->
        <echo message="Publishing Sun MQ Resource Adapter..."/>
        <unjar src="${glassfish.home}/imq/lib/imqjmsra.rar" 
               dest="${glassfish.applications.home}/jmsra/"/>
    
        <!-- Remove imq/rpms from exploded imq -->
        <echo message="Deleting imq/rpms from Server Image..."/>
        <delete dir="${glassfish.home}/imq/rpms"/>
        <delete dir="${glassfish.home}/imq/pkgs"/>
        
        <!-- Fix the execute mode on executables -->
        <chmod perm="ugo+x">
            <fileset dir="${glassfish.home}/imq/bin" includes="**"/>
            <fileset dir="${glassfish.lib.home}" includes="appserv, appservLauncher"/>
        </chmod>

        <!-- explode javadb.zip -->
        <echo message="Publishing Derby Binaries..."/>
        <unzip src="${glassfish.home}/javadb.zip"
               dest="${glassfish.home}"/>
        <delete file="${glassfish.home}/javadb.zip"/>

        <!-- Rename com-sun-commons-logging-api.jar to com-sun-commons-logging.jar -->
        <echo message="Publishing com-sun-commons-logging.jar..."/>
        <move file="${commons-logging-api.jar}" tofile="${commons-logging.jar}"/>

        <!-- explode jaxr-ra.rar. note that jaxr-ra.jar is in appserv-rt.jar -->
        <echo message="Publishing JAXR Resource Adapter..."/>
        <delete dir="${glassfish.home}/lib/install/applications/jaxr-ra"/>
        <mkdir dir="${glassfish.home}/lib/install/applications/jaxr-ra"/>
        <unjar src="${glassfish.home}/lib/jaxr-ra.rar" 
               dest="${glassfish.home}/lib/install/applications/jaxr-ra"/>
        <delete file="${glassfish.home}/lib/jaxr-ra.rar"/>

        <!-- explode JBI Installer -->
        <unzip src="${jbi-install.jar}" 
               dest="${glassfish.home}"/>
        <delete file="${jbi-install.jar}"/>

        <!-- explode Update Center -->
        <unzip src="${updatecenter.jar}" 
               dest="${glassfish.home}"/>
        <delete file="${updatecenter.jar}"/>

	<!-- Initialize appserv-ext.jar -->
        <echo message="Initializing appserv-ext.jar..."/>
        <jar jarfile="${appserv-ext.jar}" manifest="appserv-ext.mf"/>

	<!-- Initialize appserv-deployment-client.jar -->
        <echo message="Initializing appserv-deployment-client.jar..."/>
        <jar jarfile="${appserv-deployment-client.jar}" manifest="appserv-deployment-client.mf"/>

        <!-- Initialize appserv-admin.jar -->
        <echo message="Initializing appserv-admin.jar..."/>
        <jar jarfile="${appserv-admin.jar}" manifest="appserv-admin.mf">
            <zipfileset src="${schema2beans.jar}"/>
        </jar>
        <delete file="${schema2beans.jar}"/>

        <!-- Initialize appserv-rt.jar -->
        <!-- "duplicate" attribute has to be "preserve" such that
             the multiple copies of META-INF/LICENSE.txt can be
             ignored.

             All jar files will be removed after they are zipped into
             appserv-rt.jar, with the exception of:
             * commons-logging.jar
             * jaxr-ra.jar
          -->
        <echo message="Initializing appserv-rt.jar..."/>
        <jar jarfile="${appserv-rt.jar}" 
             manifest="appserv-rt.mf"
             update="yes"
             duplicate="preserve">
            <zipfileset src="${commons-beanutils.jar}" excludes="META-INF/**"/>
            <zipfileset src="${commons-collections.jar}" excludes="META-INF/**"/>
            <zipfileset src="${commons-digester.jar}" excludes="META-INF/**"/>
            <zipfileset src="${commons-logging.jar}" excludes="META-INF/**"/>
            <zipfileset src="${commons-modeler.jar}" excludes="META-INF/**"/>
            <zipfileset src="${jakarta-regexp.jar}" excludes="META-INF/**"/>
            <zipfileset src="${jaxr-ra.jar}" excludes="META-INF/**"/>
            <zipfileset src="${ldapbp.jar}" excludes="META-INF/**"/>
            <zipfileset src="${omgapi.jar}" excludes="META-INF/**"/>
            <zipfileset src="${optorbcomp.jar}" excludes="META-INF/**"/>
            <zipfileset src="${peorb.jar}" excludes="META-INF/**"/>
            <fileset dir="${glassfish.lib.home}/jasper_jsr199"
				includes="**" excludes="META-INF/**"/>
	    <zipfileset src="${glassfish-jdbcra-binary-dependencies.jar}" excludes="META-INF/**"/>
        </jar>
        <delete file="${commons-beanutils.jar}"/>
        <delete file="${commons-collections.jar}"/>
        <delete file="${commons-digester.jar}"/>
        <delete file="${commons-modeler.jar}"/>
        <delete file="${jakarta-regexp.jar}"/>
        <delete file="${ldapbp.jar}"/>
        <delete file="${omgapi.jar}"/>
        <delete file="${optorbcomp.jar}"/>
        <delete file="${peorb.jar}"/>
        <delete dir="${glassfish.lib.home}/jasper_jsr199"/>
	<delete file="${glassfish-jdbcra-binary-dependencies.jar}"/>

        <!-- Initialize j2ee.jar -->
        <!-- All contents of j2ee.jar is now in javaee.jar. The manifest of -->
        <!-- j2ee.jar points to javaee.jar so that users continue compiling -->
        <!-- against j2ee.jar -->
        <echo message="Initializing j2ee.jar..."/>
        <jar jarfile="${j2ee.jar}" manifest="j2ee-jar.mf"/>

        <!-- Initialize appserv-ws.jar -->
        <!-- All contents of appserv-ws.jar is now in webservice-*.jar. -->
        <!-- The manifest of appserv-ws.jar points to webservices-*.jar -->
        <!-- so that users continue compiling against appserv-ws.jar -->
        <echo message="Initializing appserv-ws.jar..."/>
        <jar jarfile="${appserv-ws.jar}" manifest="appserv-ws.mf"/>

        <!-- Initialize javaee.jar -->
        <echo message="Initializing javaee.jar..."/>
        <jar jarfile="${javaee.jar}" manifest="javaee-jar.mf">
            <zipfileset src="${webservices-api.jar}"/>
            <zipfileset src="${webservices-extra-api.jar}"/>
        </jar>
        <delete file="${webservices-extra-api.jar}"/>

        <!-- Adding jsr250-api.jar into javaee.jar -->
        <echo message="Adding jsr250-api.jar into javaee.jar..."/>
        <jar jarfile="${javaee.jar}" update="yes" duplicate="fail">
            <zipfileset src="${jsr250-api.jar}"/>
        </jar>
        <delete file="${jsr250-api.jar}"/>

        <!-- Add jsf-api.jar into javaee.jar -->
        <echo message="Adding jsf-api.jar into javaee.jar..."/>
        <jar jarfile="${javaee.jar}" update="yes" duplicate="fail">
            <zipfileset src="${jsf-api.jar}"/>
        </jar>
        <delete file="${jsf-api.jar}"/> 

        <!-- Keep a copy of webservices-api in the lib/endorsed dir-->
        <!-- This is to take care of JDK6/JAXWS2.1 environment -->
        <echo message="Creating webservices-api in lib/endorsed"/>
        <mkdir dir="${glassfish.home}/lib/endorsed"/>
        <copy file="${webservices-api.jar}" todir="${glassfish.home}/lib/endorsed"/>
        <delete file="${webservices-api.jar}"/>

        <!-- Unjar WSTX services app in the lib/install directory -->
        <echo message="Unbundling WSTX service web app"/>
        <mkdir dir="${glassfish.home}/lib/install/applications/wstx-services"/>
        <unjar
          src="${wstx-services.jar}"
          dest="${glassfish.home}/lib/install/applications/wstx-services"/>
        <delete file="${wstx-services.jar}"/>
        
	<!-- JBI Common client for admin-gui -->
        <!-- the jbi-admin-common.jar is unzipped directly into glassfish/lib
        by a do.unzip antcall for jbi-common.jar under the unzip-pe.jars task -->

	<!-- jsftemplating for admin-gui -->
        <unzip src="${glassfish.home}/jsftemplating.zip"
               dest="${glassfish.home}"/>
        <delete file="${glassfish.home}/jsftemplating.zip"/>

	<!-- Woodstock component  for admin-gui -->
        <unzip src="${glassfish.home}/woodstock.zip"
               dest="${glassfish.home}"/>
        <delete file="${glassfish.home}/woodstock.zip"/>

        <!-- Fix the execute mode on executables for nss-util -->
        <chmod perm="ugo+x">
            <fileset dir="${glassfish.lib.home}" includes="certutil, pk12util"/>
            <fileset dir="${glassfish.lib.home}/upgrade" includes="certutil, pk12util"/>
        </chmod>

        <!-- expand out LauncherBootstrap.class (used by windows icons) -->
        <unzip src="${commons-launcher.jar}" dest="${glassfish.home}/lib">
        <patternset>
            <include name="LauncherBootstrap.class"/>
        </patternset>
        </unzip>

        <unzip src="${glassfish.home}/lib/${glassfish.xwss_config.name}.jar" dest="${glassfish.home}/lib"/>
        <delete file="${glassfish.home}/lib/${glassfish.xwss_config.name}.jar"/>
        <delete dir="${glassfish.home}/lib/META-INF"/>
        <echo message="Copying wss-client-config.xml and wss-server-config.xml into lib/install/templates"/>
        <mkdir dir="${glassfish.home}/lib/install/templates"/>
        <move file="${glassfish.home}/lib/wss-client-config-2.0.xml"
             tofile="${glassfish.home}/lib/appclient/wss-client-config-2.0.xml"/>
        <move file="${glassfish.home}/lib/wss-client-config-1.0.xml"
             tofile="${glassfish.home}/lib/appclient/wss-client-config-1.0.xml"/>
        <move file="${glassfish.home}/lib/wss-server-config-2.0.xml"
             tofile="${glassfish.home}/lib/install/templates/wss-server-config-2.0.xml"/>
        <move file="${glassfish.home}/lib/wss-server-config-1.0.xml"
             tofile="${glassfish.home}/lib/install/templates/wss-server-config-1.0.xml"/>

        <delete dir="${glassfish.home}/lib/lib"/>
        <delete dir="${glassfish.home}/lib/modules"/>
    </target>

    <target name="unzip-pe.jars">
        <antcall target="do.unzip">
            <param name="name" value="${glassfish.ant.name}"/> 
            <param name="version" value="${glassfish.ant.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_beanutils.name}"/>
            <param name="version" value="${glassfish.commons_beanutils.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_collections.name}"/>
            <param name="version" value="${glassfish.commons_collections.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_digester.name}"/>
            <param name="version" value="${glassfish.commons_digester.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_launcher.name}"/>
            <param name="version" value="${glassfish.commons_launcher.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_logging.name}"/>
            <param name="version" value="${glassfish.commons_logging.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>
        
        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_modeler.name}"/>
            <param name="version" value="${glassfish.commons_modeler.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

 	<antcall target="do.unzip">
            <param name="name" value="${glassfish.jdbcrajars.name}"/>
            <param name="version" value="${glassfish.jdbcrajars.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.jakarta_regexp.name}"/>
            <param name="version" value="${glassfish.jakarta_regexp.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.javahelp.name}"/>
            <param name="version" value="${glassfish.javahelp.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.jsf.name}"/>
            <param name="version" value="${glassfish.jsf.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.netbeans.name}"/>
            <param name="version" value="${glassfish.netbeans.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.netbeans.name}"/>
            <param name="version" value="${glassfish.netbeans_dbschema.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <!-- Webservice related binaries -->
        <antcall target="do.unzip">
            <param name="name" value="${glassfish.webservices_api.name}"/>
            <param name="version" value="${glassfish.webservices_api.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.webservices_extra_api.name}"/>
            <param name="version" value="${glassfish.webservices_extra_api.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.webservices_rt.name}"/>
            <param name="version" value="${glassfish.webservices_rt.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.webservices_tools.name}"/>
            <param name="version" value="${glassfish.webservices_tools.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.xwss_config.name}"/>
            <param name="version" value="${glassfish.xwss_config.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.wstx_services.name}"/>
            <param name="version" value="${glassfish.wstx_services.version}"/>
            <param name="directory" value="${glassfish.home}/lib/install/applications"/>
        </antcall>
        <!-- End of Webservice related binaries -->

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.jaxr_ra.name}"/>
            <param name="version" value="${glassfish.jaxr_ra.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.peorb.name}"/>
            <param name="version" value="${glassfish.peorb.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.ldapbp.name}"/>
            <param name="version" value="${glassfish.ldapbp.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.jsftemplating.name}"/>
            <param name="version" value="${glassfish.jsftemplating.version}"/>
            <param name="directory" value="${glassfish.home}"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.woodstock.name}"/>
            <param name="version" value="${glassfish.woodstock.version}"/>
            <param name="directory" value="${glassfish.home}"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.imq.name}"/>
            <param name="version" value="${glassfish.imq.version}"/>
            <param name="directory" value="${glassfish.home}"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.jbi_impl.name}"/>
            <param name="version" value="${glassfish.jbi_impl.version}"/>
            <param name="directory" value="${glassfish.home}"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.derby.name}"/>
            <param name="version" value="${glassfish.derby.version}"/>
            <param name="directory" value="${glassfish.home}"/>
        </antcall>


        <antcall target="do.unzip">
            <param name="name" value="${glassfish.appserv_native.name}"/>
            <param name="version" value="${glassfish.appserv_native.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.nss_util.name}"/>
            <param name="version" value="${glassfish.nss_util.version}"/>
            <param name="directory" value="${glassfish.home}/lib/upgrade"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.quickstart.name}"/>
            <param name="version" value="${glassfish.quickstart.version}"/>
            <param name="directory" value="${glassfish.home}/samples"/>
        </antcall> 

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.genericra.name}"/>
            <param name="version" value="${glassfish.genericra.version}"/>
            <param name="directory" value="${glassfish.home}/lib/addons/resourceadapters/genericjmsra"/>
        </antcall> 

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.jsr250_api.name}"/>
            <param name="version" value="${glassfish.jsr250_api.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall> 

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.installer_builder.name}"/>
            <param name="version" value="${glassfish.installer_builder.version}"/>
            <param name="directory" value="${glassfish.home}/lib/installer-builder"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.jarpack.name}"/>
            <param name="version" value="${glassfish.jarpack.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>
	<antcall target="do.unzip">
            <param name="name" value="${glassfish.jasper_jsr199.name}"/>
            <param name="version" value="${glassfish.jasper_jsr199.version}"/>
            <param name="directory" value="${glassfish.home}/lib/jasper_jsr199"/>
        </antcall>
	<antcall target="do.unzip">
            <param name="name" value="${glassfish.updatecenter.name}"/>
            <param name="version" value="${glassfish.updatecenter.version}"/>
            <param name="directory" value="${glassfish.home}/"/>
        </antcall>
    </target>

    <target name="post-bootstrap-pwc" depends="unzip-pwc.jars">
        <!-- Rename com-sun-commons-logging-api.jar to com-sun-commons-logging.jar -->
        <copy file="${commons-logging-api.jar}" tofile="${commons-logging.jar}"/>

        <!-- Initialize pwc.jar -->
        <!-- "duplicate" attribute has to be "preserve" such that
             the multiple copies of META-INF/LICENSE.txt can be
             ignored.
          -->
        <echo message="Initializing pwc.jar..."/>
        <delete dir="${glassfish.home}/../pwc" failonerror="false"/>
        <mkdir dir="${glassfish.home}/../pwc"/>
        <jar jarfile="${pwc.jar}" 
             update="yes"
             duplicate="preserve">
            <zipfileset src="${commons-beanutils.jar}" excludes="META-INF/**"/>
            <zipfileset src="${commons-collections.jar}" excludes="META-INF/**"/>
            <zipfileset src="${commons-digester.jar}" excludes="META-INF/**"/>
            <zipfileset src="${commons-logging.jar}" excludes="META-INF/**"/>
            <zipfileset src="${commons-modeler.jar}" excludes="META-INF/**"/>
            <zipfileset src="${jakarta-regexp.jar}" excludes="META-INF/**"/>
        </jar>

    </target>
    
    <target name="unzip-pwc.jars">
        <antcall target="do.unzip">
            <param name="name" value="${glassfish.ant.name}"/> 
            <param name="version" value="${glassfish.ant.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_beanutils.name}"/>
            <param name="version" value="${glassfish.commons_beanutils.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_collections.name}"/>
            <param name="version" value="${glassfish.commons_collections.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_digester.name}"/>
            <param name="version" value="${glassfish.commons_digester.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_logging.name}"/>
            <param name="version" value="${glassfish.commons_logging.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>
        
        <antcall target="do.unzip">
            <param name="name" value="${glassfish.commons_modeler.name}"/>
            <param name="version" value="${glassfish.commons_modeler.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.jakarta_regexp.name}"/>
            <param name="version" value="${glassfish.jakarta_regexp.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>
    </target>

    <target name="create-native-image" depends="init, create-native-unix, create-native-windows, create-native-darwin"/>

    <target name="create-native-unix" if="unix">
        <echo>Creating New Native staging files under ${glassfish.home}/.. </echo>
        <zip destfile="${glassfish.home}/../appserv-native.jar">
            <fileset dir="${glassfish.lib.home}"
                includes="amd64/libutilforsyslog.so,appserv,appservLauncher,libcliutil.so,libsolarisauth.so,libutilforsyslog.so,sparcv9/libutilforsyslog.so,libjvminfoutil.so" />
        </zip>
    </target>

    <target name="create-native-windows" if="windows">
        <echo>Creating New Native staging files under ${glassfish.home}/.. </echo>
        <zip destfile="${glassfish.home}/../appserv-native.jar">
            <fileset dir="${glassfish.lib.home}"
                includes="appserv.exe,appservLauncher.exe,appservService.exe,cliutil.dll,jvminfoutil.dll"/>
        </zip>
    </target>

    <target name="create-native-darwin" if="darwin">
        <echo>Creating New Native staging files under ${glassfish.home}/.. </echo>
        <zip destfile="${glassfish.home}/../appserv-native.jar">
            <fileset dir="${glassfish.lib.home}"
                includes="appserv,appservLauncher,libcliutil.so,libutilforsyslog.so,libjvminfoutil.so" />
        </zip>
    </target>

    <target name="publish-native" depends="init, copy-unix, copy-windows,copy-darwin"/>

    <target name="copy-unix" if="unix">
        <chmod file="${glassfish.home}/lib/modutil" perm="755"/>
    </target>

    <target name="copy-darwin" if="darwin">
        <chmod file="${glassfish.home}/lib/modutil" perm="755"/>
    </target>

    <target name="copy-windows" if="windows">
        <echo message="Copying cliutil.dll windows native file"/>
        <chmod file="${glassfish.home}/lib/modutil.exe" perm="755"/>
        <!-- Move cliutil.dll to bin folder-->
        <copy file="${glassfish.home}/lib/cliutil.dll" tofile="${glassfish.home}/bin/cliutil.dll"/>
        <chmod file="${glassfish.home}/bin/cliutil.dll" perm="755"/>
    </target>

    
    <!-- init. Initialization involves creating publishing directories and
         OS specific targets. -->
    <target name="init" description="appserv-ee initialization">
        <echo message="OS Initialization"/>
        <tstamp>
            <format property="start.time" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>
        <condition property="windows">
            <os family="windows" />
        </condition>
        <condition property="unix">
            <and>
              <os family="unix" />
              <not>
               <os name="Mac OS X"/>
              </not>
            </and>
        </condition>
        <condition property="solaris">
            <equals arg1="${os.name}" arg2="SunOS"/>
        </condition>
        <condition property="linux">
            <equals arg1="${os.name}" arg2="Linux"/>
        </condition>
        <condition property="darwin">
            <os name="Mac OS X"/>
        </condition>
    </target>

    <target name="get.time">
      <tstamp>
            <format property="current.time" pattern="MM/dd/yyyy hh:mm aa"/>
      </tstamp>
      <echo message="Time: ${current.time}"/>
    </target>

    <target name="post-bootstrap" depends="post-bootstrap-pe, unzip.jars, publish-native">
        <!-- Copy setup EE config file -->
        <echo message="Publishing setup-cluster.xml ..."/>
        <copy file="setup-cluster.xml" todir="${glassfish.home}"/>

        <!-- Explode jdmk zips -->
        <echo message="Publishing jdmk Binaries..."/>
        <unzip src="${glassfish.home}/lib/opendmk.zip"
               dest="${glassfish.home}/lib/SUNWjdmk/5.1/lib"/>
        <move file="${glassfish.home}/lib/SUNWjdmk/5.1/lib/jmxremote_optional.jar" todir="${glassfish.home}/lib"/>
        <delete file="${glassfish.home}/lib/opendmk.zip"/>

        <!-- antcall target="lbplugin-setup"/ -->
        <!-- echo message="Copying wss-client-config.xml and wss-server-config.xml into lib/install/templates/ee"/>
        <copy file="${glassfish.home}/lib/install/templates/wss-client-config.xml"
             tofile="${glassfish.home}/lib/install/templates/ee"/>
        <copy file="${glassfish.home}/lib/install/templates/wss-server-config.xml"
             tofile="${glassfish.home}/lib/install/templates/ee"/ -->

        <antcall target="do.chmod"/> 
    </target>

    <target name="lbplugin-setup" unless="darwin"> 
        <!-- Explode lbplugin zips -->
        <echo message="Publishing lbplugin..."/>
        <unzip src="${glassfish.home}/lib/lbplugin/SUNWaslb.zip"
               dest="${glassfish.home}/lib/lbplugin"/>
        <unzip src="${glassfish.home}/lib/lbplugin/SUNWaspx.zip"
               dest="${glassfish.home}/lib/lbplugin"/>
        <delete file="${glassfish.home}/lib/lbplugin/SUNWaslb.zip"/>
        <delete file="${glassfish.home}/lib/lbplugin/SUNWaspx.zip"/>
        <!-- lbplugin libraries -->
        <chmod perm="ugo+x">
            <fileset dir="${glassfish.home}/lib/lbplugin/lib">
                <include name="**/*.so"/>
            </fileset>
        </chmod>
    </target>

     <target name="unzip.jars">
        <antcall target="do.unzip">
            <param name="name" value="${glassfish.jdmk.name}"/>
            <param name="version" value="${glassfish.jdmk.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>
       
        <!-- antcall target="do.unzip">
            <param name="name" value="${glassfish.aslb.name}"/>
            <param name="version" value="${glassfish.aslb.version}"/>
            <param name="directory" value="${glassfish.home}/lib/lbplugin"/>
        </antcall -->

        <antcall target="do.unzip">
            <param name="name" value="${glassfish.appserv_native_ee.name}"/>
            <param name="version" value="${glassfish.appserv_native_ee.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
        </antcall>
	<antcall target="do.unzip">
	    <param name="name" value="${glassfish.shoal.name}"/>
            <param name="version" value="${glassfish.shoal.version}"/>
            <param name="directory" value="${glassfish.home}/lib"/>
	</antcall>
    </target>

    <target name="build-javaee" depends="check-java6, check-javaee-files">
        <echo message="Here you GO Ludo!, everything is ready for you!"/>
    </target>

    <target name="check-javaee-files">
        <echo message="Checking existence of required files: javaee.jar, mail.jar, activation.jar"/>
        <available file="${javaee.jar}" property="javaee.present"/>
        <available file="${mail.jar}" property="mail.present"/>
        <available file="${activation.jar}" property="activation.present"/>
        <fail message="JarFile: ${javaee.jar} is NOT present, run 'maven bootstrap' command before running this task." unless="javaee.present"/>
        <fail message="JarFile: ${mail.jar} is NOT present, run 'maven bootstrap' command before running this task." unless="mail.present"/>
        <fail message="JarFile: ${activation.jar} is NOT present, run 'maven bootstrap' command before running this task." unless="activation.present"/>
    </target>

    <target name="validate-java" unless="darwin">
        <echo message="Current Java Version ${java.version}"/>
        <available file="${local.java.home}${file.separator}lib${file.separator}tools.jar" property="jdk.present"/>
        <fail message="Please set java.home to a JDK installation" unless="jdk.present"/>
    </target>

    <target name="check-java6" depends="init, get.java.home, validate-java">
       <exec executable="${local.java.home}${file.separator}bin${file.separator}java" outputProperty="targeted.java.version">
          <arg line="-version"/>
       </exec>
       <condition property="java.version.acceptable">
          <or>
            <contains string="${targeted.java.version}" substring="1.6"/>
          </or>
       </condition>
       <fail message="This task of creating JavaEE Jar requires JDK 1.6, you have ${targeted.java.version}" unless="java.version.acceptable"/>
    </target>

    <target name="get.java.home">
       <condition property="suffix" value="/..">
          <and>
              <os family="unix"/>
              <not>
                  <os name="Mac OS X"/>
              </not>
          </and>
       </condition>
       <condition property="suffix" value="">
          <os name="Mac OS X"/>
       </condition>
       <condition property="suffix" value="/..">
          <os family="windows"/>
       </condition>
       <!-- setup the local.java.home -->
       <property name="local.java.home" value="${java.home}${suffix}"/>
    </target>

    <target name="build">
    <antcall target="get.time"/>
    <ant dir="../activation" target="all"/>
    <ant dir="../mail" target="all"/>
    <ant dir="../deployment-api" target="all"/>
    <ant dir="../transaction-api" target="all"/>
    <ant dir="../servlet-api" target="all"/>
    <ant dir="../ejb-api" target="all"/>
    <ant dir="../persistence-api" target="all"/>
    <ant dir="../connector-api" target="all"/>
    <ant dir="../management-api" target="all"/>
    <ant dir="../appserv-api" target="all"/>
    <ant dir="../jms-api" target="all"/>
    <ant dir="../jmac-api" target="all"/>
    <ant dir="../jacc-api" target="all"/>
    <ant dir="../common-util" target="all"/>
    <ant dir="../annotation-framework" target="all"/>
    <ant dir="../appserv-commons" target="all"/>
    <ant dir="../entity-persistence" target="all"/>
    <ant dir="../jmx-remote" target="all"/>
    <ant dir="../admin-core" target="all"/>
    <ant dir="../jts" target="all"/>
    <ant dir="../appserv-jstl" target="all"/>
    <ant dir="../pwc-commons" target="all"/>
    <ant dir="../appserv-webtier" target="all"/>
    <ant dir="../webtier-extensions" target="all"/>
    <ant dir="../jacc-provider" target="all"/>
    <ant dir="../container-auth" target="all"/>
    <ant dir="../jmac-provider" target="all"/>
    <ant dir="../appserv-core" target="all"/>
    <ant dir="../appserv-http-engine" target="all"/>
    <ant dir="../appserv-docs" target="all"/>
    <ant dir="../admin" target="all"/>
    <ant dir="../admin-cli" target="all"/>
    <ant dir="../appserv-addons" target="all"/>
    <ant dir="../jdbcra" target="all"/>
    <ant dir="../cmp" target="all"/>
    <ant dir="../tools" target="all"/>
    <ant dir="../avk" target="all"/>
    <ant dir="../admin-gui" target="all"/>
    <ant dir="../appserv-native" target="all"/>
    <antcall target="get.time"/>
    </target>

    <target name="clean">
    <ant dir="../activation" target="clean"/>
    <ant dir="../mail" target="clean"/>
    <ant dir="../deployment-api" target="clean"/>
    <ant dir="../transaction-api" target="clean"/>
    <ant dir="../servlet-api" target="clean"/>
    <ant dir="../ejb-api" target="clean"/>
    <ant dir="../persistence-api" target="clean"/>
    <ant dir="../connector-api" target="clean"/>
    <ant dir="../management-api" target="clean"/>
    <ant dir="../appserv-api" target="clean"/>
    <ant dir="../jms-api" target="clean"/>
    <ant dir="../jmac-api" target="clean"/>
    <ant dir="../jacc-api" target="clean"/>
    <ant dir="../common-util" target="clean"/>
    <ant dir="../annotation-framework" target="clean"/>
    <ant dir="../appserv-commons" target="clean"/>
    <ant dir="../entity-persistence" target="clean"/>
    <ant dir="../jmx-remote" target="clean"/>
    <ant dir="../admin-core" target="clean"/>
    <ant dir="../jts" target="clean"/>
    <ant dir="../appserv-jstl" target="clean"/>
    <ant dir="../pwc-commons" target="clean"/>
    <ant dir="../appserv-webtier" target="clean"/>
    <ant dir="../webtier-extensions" target="clean"/>
    <ant dir="../jacc-provider" target="clean"/>
    <ant dir="../container-auth" target="clean"/>
    <ant dir="../jmac-provider" target="clean"/>
    <ant dir="../appserv-core" target="clean"/>
    <ant dir="../appserv-http-engine" target="clean"/>
    <ant dir="../appserv-docs" target="clean"/>
    <ant dir="../admin" target="clean"/>
    <ant dir="../admin-cli" target="clean"/>
    <ant dir="../appserv-addons" target="clean"/>
    <ant dir="../jdbcra" target="clean"/>
    <ant dir="../tools" target="clean"/>
    <ant dir="../cmp" target="clean"/>
    <ant dir="../avk" target="clean"/>
    <ant dir="../admin-gui" target="clean"/>
    <ant dir="../appserv-native" target="clean"/>
    </target>
