# Language zh-CN translations for master.xml package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: master.xml\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-07-25T03:52:15\n"
"PO-Revision-Date: 2009-03-13 15:01+0800\n"
"Last-Translator: Sean Wu <alartin@gmail.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, fuzzy, no-c-format
msgid "Defining beans using XML"
msgstr "使用XML定义Web Bean"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"So far, we've seen plenty of examples of beans declared using annotations. "
"However, there are a couple of occasions when we can't use annotations to "
"define the bean:"
msgstr ""
"目前为止，我们看了大量使用注释来声明Web Bean的例子。然而，我们有时候并不使用"
"注释来定义Web Bean，如下列情况:"

#. Tag: para
#, no-c-format
msgid "when the implementation class comes from some preexisting library, or"
msgstr "当实现类是从先前已经存在的类库中产生的时候，或者"

#. Tag: para
#, fuzzy, no-c-format
msgid "when there should be multiple beans with the same implementation class."
msgstr "多个Web Bean对应同一个实现类的时候。"

#. Tag: para
#, no-c-format
msgid ""
"One way to address these problems is to write a producer method. Weld offers "
"another option: declare the bean using XML. This feature will hopefully one "
"day be part of the CDI specification. Until then, it remains a portable "
"extension."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Many frameworks use XML to provide metadata relating to Java classes. "
"However, Weld uses a very different approach to specifying the names of Java "
"classes, fields or methods to most other frameworks. Instead of writing "
"class and member names as the string values of XML elements and attributes, "
"Weld lets you use the class or member name as the name of the XML element."
msgstr ""
"很多框架使用XML来提供Java类相关的元数据。然而，Web Bean使用了和大多其他框架不"
"同的方法来指定Java类的名字，域或者方法。Web Bean让你使用类或者成员名作为XML元"
"素名，而不是将类和成员名作为XML元素的字符串值来声明Web Bean。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The advantage of this approach is that you can write an XML schema that "
"prevents spelling errors in your XML document. It's even possible for a tool "
"to generate the XML schema automatically from the compiled Java code. Or, an "
"integrated development environment could perform the same validation without "
"the need for the explicit intermediate generation step."
msgstr ""
"这种方法的好处是你可以使用XML模式来验证XML, 阻止XML文档中的拼写错误。它甚至可"
"以让一个工具从编译好的Java代码中自动生成XML模式。或者一个整合开发环境（IDE）"
"可以直接进行验证，无需使用显式的中间生成步骤。"

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring beans"
msgstr "声明Web Bean类"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For each Java package, Weld defines a corresponding XML namespace. The "
"namespace is formed by prepending <literal>urn:java:</literal> to the Java "
"package name. For the package <literal>com.mydomain.myapp</literal>, the XML "
"namespace is <literal>urn:java:com.mydomain.myapp</literal>."
msgstr ""
"对于每个Java包，Web Bean定义了一个对应的XML名域空间。这个名域由 <literal>urn:"
"java:</literal>前缀加上Java包名组成。对于 <literal>com.mydomain.myapp</"
"literal> 包来说，对应的XML名域是 <literal>urn:java:com.mydomain.myapp</"
"literal>。"

#. Tag: para
#, no-c-format
msgid ""
"Java types belonging to a package are referred to using an XML element in "
"the namespace corresponding to the package. The name of the element is the "
"name of the Java type. Fields and methods of the type are specified by child "
"elements in the same namespace. If the type is an annotation, members are "
"specified by attributes of the element."
msgstr ""
"属于一个包的Java类型指的是在对应这个包的名域中使用一个XML元素。元素的名字就是"
"Java类型的名字。类型的域和方法通过相同的名域下的子元素定义。如果类型是一个注"
"释的话，其成员通过这个元素的属性指定。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"For example, the element <literal>&lt;util:Date/&gt;</literal> in the "
"following XML fragment refers to the class <literal>java.util.Date</literal>:"
msgstr ""
"例如， 在下面的XML片段中的元素<literal>&lt;util:Date/&gt;</literal>指的是 "
"<literal>java.util.Date</literal> 类："

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"And this is all the code we need to declare that <literal>Date</literal> is "
"a bean! An instance of <literal>Date</literal> may now be injected by any "
"other bean:"
msgstr ""
"这个是将<literal>Date</literal> 声明为一个简单web Bean所需的所有代码！现在任"
"何一个 <literal>Date</literal> 实例都可以被任何其他Web Bean注入了："

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring bean metadata"
msgstr "声明Web Bean的元数据"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"We can declare the scope, deployment type and interceptor binding types "
"using direct child elements of the bean declaration:"
msgstr ""
"我们可以直接通过Web Bean声明的子元素来声明范围，部署类型和拦截器绑定类型："

#. Tag: para
#, fuzzy, no-c-format
msgid "We use exactly the same approach to specify names and qualifiers:"
msgstr "我们可以使用相同方法来指定名字和绑定类型："

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Where <literal>@Login</literal> and <literal>@SystemStart</literal> are "
"qualifier annotations types."
msgstr ""
"<literal>@Login</literal> 和 <literal>@SystemStart</literal> 是绑定注释类型。"

#. Tag: para
#, fuzzy, no-c-format
msgid "As usual, a bean may support multiple qualifier types:"
msgstr "通常，一个Web Bean可以支持多个绑定类型："

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Interceptors and decorators are beans as well, so they may be declared just "
"like any other bean:"
msgstr ""
"拦截器和装饰器只不过是简单的Web Beans，所以它们可以像其他简单Web Bean一样被声"
"明："

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring bean members"
msgstr "声明Web Bean成员"

#. Tag: para
#, no-c-format
msgid "TODO!"
msgstr "TODO!"

#. Tag: title
#, fuzzy, no-c-format
msgid "Declaring inline beans"
msgstr "声明内联的Web Beans"

#. Tag: para
#, fuzzy, no-c-format
msgid "Weld lets us define a bean at an injection point. For example:"
msgstr "Web Beans让我们能够在一个注入点定义一个Web Bean。例如："

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>&lt;Name&gt;</literal> element declares a bean of scope "
"<literal>@Dependent</literal> and class <literal>Name</literal>, with a set "
"of initial field values. This bean has a special, container-generated "
"qualifier and is therefore injectable only to the specific injection point "
"at which it is declared."
msgstr ""
" <literal>&lt;Name&gt;</literal> 元素声明了一个范围为 <literal>@Dependent</"
"literal> ，类为 <literal>Name</literal> 的一个简单的Web Bean，并且设置了一套"
"初始的域值。这个Web Bean有一个特殊的，容器生成的绑定，因此只能在它声明的特定"
"注入点被注入。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"This simple but powerful feature allows the Weld XML format to be used to "
"specify whole graphs of Java objects. It's not quite a full databinding "
"solution, but it's close!"
msgstr ""
"这个简单但是很强大的特性能够让我们使用Web Bean XML配置格式来指定整个Java类的"
"图。这并不是完整的数据绑定方案，但是它很接近了！"

#. Tag: title
#, no-c-format
msgid "Using a schema"
msgstr "使用一个模式"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"If we want our XML document format to be authored by people who aren't Java "
"developers, or who don't have access to our code, we need to provide a "
"schema. There's nothing specific to Weld about writing or using the schema."
msgstr ""
"如果我们希望我们的XML文档格式由非Java开发者或者没有权限访问我们代码的人来制"
"定，我们需要提供一个模式。在Web Beans中使用模式没有什么特殊的地方。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Writing an XML schema is quite tedious. Therefore, the Weld project will "
"provide a tool which automatically generates the XML schema from compiled "
"Java code."
msgstr ""
"编写一个XML模式相当繁琐。因此，Web Bean的参考实现项目提供了一个工具，可以从编"
"译好的Java代码中自动化生成XML模式。"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<beans xmlns=\"urn:java:javax.beans\"\n"
#~ "   xmlns:util=\"urn:java:java.util\">\n"
#~ "   <util:Date/>\n"
#~ "</beans>]]>"
#~ msgstr ""
#~ "<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
#~ "          xmlns:util=\"urn:java:java.util\">\n"
#~ "\n"
#~ "    <util:Date/>\n"
#~ "\n"
#~ "</WebBeans>]]>"

#, fuzzy
#~ msgid "<![CDATA[private @Inject Date date;]]>"
#~ msgstr "<![CDATA[@Current Date date]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myapp:ShoppingCart>\n"
#~ "   <SessionScoped/>\n"
#~ "   <myfwk:Transactional requiresNew=\"true\"/>\n"
#~ "   <myfwk:Secure/>\n"
#~ "</myapp:ShoppingCart>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:ShoppingCart>\n"
#~ "    <SessionScoped/>\n"
#~ "    <myfwk:Transactional requiresNew=\"true\"/>\n"
#~ "    <myfwk:Secure/>\n"
#~ "</myapp:ShoppingCart>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<util:Date>\n"
#~ "   <Named>currentTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "   <SessionScoped/>\n"
#~ "   <myapp:Login/>\n"
#~ "   <Named>loginTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "   <ApplicationScoped/>\n"
#~ "   <myapp:SystemStart/>\n"
#~ "   <Named>systemStartTime</Named>\n"
#~ "</util:Date>]]>"
#~ msgstr ""
#~ "<![CDATA[<util:Date>\n"
#~ "    <Named>currentTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "    <SessionScoped/>\n"
#~ "    <myapp:Login/>\n"
#~ "    <Named>loginTime</Named>\n"
#~ "</util:Date>\n"
#~ "\n"
#~ "<util:Date>\n"
#~ "    <ApplicationScoped/>\n"
#~ "    <myapp:SystemStart/>\n"
#~ "    <Named>systemStartTime</Named>\n"
#~ "</util:Date>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[private @Inject Date currentTime;\n"
#~ "private @Login Date loginTime;\n"
#~ "private @SystemStart Date systemStartTime;]]>"
#~ msgstr ""
#~ "<![CDATA[@Current Date currentTime;\n"
#~ "@Login Date loginTime;\n"
#~ "@SystemStart Date systemStartTime;]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
#~ "   <myapp:PayByCheque/>\n"
#~ "   <myapp:Asynchronous/>\n"
#~ "</myapp:AsynchronousChequePaymentProcessor>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:AsynchronousChequePaymentProcessor>\n"
#~ "    <myapp:PayByCheque/>\n"
#~ "    <myapp:Asynchronous/>\n"
#~ "</myapp:AsynchronousChequePaymentProcessor>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myfwk:TransactionInterceptor>\n"
#~ "   <Interceptor/>\n"
#~ "   <myfwk:Transactional/>\n"
#~ "</myfwk:TransactionInterceptor>]]>"
#~ msgstr ""
#~ "<![CDATA[<myfwk:TransactionInterceptor>\n"
#~ "    <Interceptor/>\n"
#~ "    <myfwk:Transactional/>\n"
#~ "</myfwk:TransactionInterceptor>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<myapp:System>\n"
#~ "   <ApplicationScoped/>\n"
#~ "   <myapp:admin>\n"
#~ "      <myapp:Name>\n"
#~ "         <myapp:firstname>Gavin</myapp:firstname>\n"
#~ "         <myapp:lastname>King</myapp:lastname>\n"
#~ "         <myapp:email>gavin@hibernate.org</myapp:email>\n"
#~ "      </myapp:Name>\n"
#~ "   </myapp:admin>\n"
#~ "</myapp:System>]]>"
#~ msgstr ""
#~ "<![CDATA[<myapp:System>\n"
#~ "    <ApplicationScoped/>\n"
#~ "    <myapp:admin>\n"
#~ "        <myapp:Name>\n"
#~ "            <myapp:firstname>Gavin</myapp:firstname>\n"
#~ "            <myapp:lastname>King</myapp:lastname>\n"
#~ "            <myapp:email>gavin@hibernate.org</myapp:email>\n"
#~ "        </myapp:Name>\n"
#~ "    </myapp:admin>\n"
#~ "</myapp:System>]]>"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<beans xmlns=\"urn:java:javax.beans\"\n"
#~ "   xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
#~ "   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "   xsi:schemaLocation=\"urn:java:javax.beans http://java.sun.com/jee/"
#~ "beans-1.0.xsd\n"
#~ "   urn:java:com.mydomain.myapp http://mydomain.com/xsd/myapp-1.2.xsd\">\n"
#~ "\n"
#~ "   <myapp:System>\n"
#~ "      ...\n"
#~ "   </myapp:System>\n"
#~ "\n"
#~ "</beans>]]>"
#~ msgstr ""
#~ "<![CDATA[<WebBeans xmlns=\"urn:java:javax.webbeans\"\n"
#~ "          xmlns:myapp=\"urn:java:com.mydomain.myapp\"\n"
#~ "          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
#~ "          xsi:schemaLocation=\"urn:java:javax.webbeans http://java.sun."
#~ "com/jee/web-beans-1.0.xsd\n"
#~ "                              urn:java:com.mydomain.myapp http://mydomain."
#~ "com/xsd/myapp-1.2.xsd\">\n"
#~ "\n"
#~ "    <myapp:System>\n"
#~ "        ...\n"
#~ "    </myapp:System>\n"
#~ "\n"
#~ "</WebBeans>]]>"

#~ msgid "In either of these cases, Web Beans gives us two options:"
#~ msgstr "在上述任何一种情况下，Web Bean给我们两种选择："

#~ msgid "write a producer method, or"
#~ msgstr "写一个生产者方法，或者"

#~ msgid "declare the Web Bean using XML."
#~ msgstr "使用XML来声明Web Bean。"
