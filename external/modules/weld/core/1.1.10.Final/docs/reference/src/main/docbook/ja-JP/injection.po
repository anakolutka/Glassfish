# Language ja-JP translations for master.xml package.
# Automatically generated, 2008.
# 
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-06-02 01:32+0900\n"
"Last-Translator: Daisuke Sano <d-sano@nri.co.jp>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: \n"

#. Tag: title
#, fuzzy, no-c-format
msgid "Dependency injection and programmatic lookup"
msgstr "依存性注入"

#. Tag: para
#, no-c-format
msgid ""
"One of the most significant features of CDI&mdash;certainly the most "
"recognized&mdash;is dependency injection; excuse me, "
"<emphasis>typesafe</emphasis> dependency injection."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Injection points"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <literal>@Inject</literal> annotation lets us define an injection point "
"that is injected during bean instantiation. Injection can occur via three "
"different mechanisms."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<emphasis>Bean constructor</emphasis> parameter injection:"
msgstr "<emphasis>初期化</emphasis>メソッドの引数による注入、"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class Checkout {\n"
"        \n"
"   private final ShoppingCart cart;\n"
"    \n"
"   @Inject\n"
"   public Checkout(ShoppingCart cart) {\n"
"      this.cart = cart;\n"
"   }\n"
"\n"
"}"
msgstr ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private final ShoppingCart cart;\n"
"    \n"
"    @Initializer\n"
"    public Checkout(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "A bean can only have one injectable constructor."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "<emphasis>Initializer method</emphasis> parameter injection:"
msgstr "<emphasis>初期化</emphasis>メソッドの引数による注入、"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class Checkout {\n"
"        \n"
"   private ShoppingCart cart;\n"
"\n"
"   @Inject\n"
"   void setShoppingCart(ShoppingCart cart) {\n"
"      this.cart = cart;\n"
"   }\n"
"    \n"
"}"
msgstr ""
"<![CDATA[public class Checkout {\n"
"        \n"
"    private ShoppingCart cart;\n"
"\n"
"    @Initializer \n"
"    void setShoppingCart(ShoppingCart cart) {\n"
"        this.cart = cart;\n"
"    }\n"
"    \n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"A bean can have multiple initializer methods. If the bean is a session bean,"
" the initializer method is not required to be a business method of the "
"session bean."
msgstr ""

#. Tag: para
#, no-c-format
msgid "And direct field injection:"
msgstr "そして、フィールドへの直接的な注入です。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public class Checkout {\n"
"\n"
"   private @Inject ShoppingCart cart;\n"
"    \n"
"}"
msgstr ""
"<![CDATA[public class Checkout {\n"
"\n"
"    private @Current ShoppingCart cart;\n"
"    \n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"Getter and setter methods are not required for field injection to work "
"(unlike with JSF managed beans)."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Dependency injection always occurs when the bean instance is first "
"instantiated by the container. Simplifying just a little, things happen in "
"this order:"
msgstr "依存性注入は、Web Beanインスタンスが最初に生成される際に必ず行われます。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"First, the container calls the bean constructor (the default constructor or "
"the one annotated <literal>@Inject</literal>), to obtain an instance of the "
"bean."
msgstr "最初に、Web Beanマネージャは、Web Beanインスタンスを取得するために、Web Beanのコンストラクタを実行する"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Next, the container initializes the values of all injected fields of the "
"bean."
msgstr "次に、Web Beanマネージャは、Web Beanの、注入すべきすべてのフィールド値を初期化する"

#. Tag: para
#, no-c-format
msgid ""
"Next, the container calls all initializer methods of bean (the call order is"
" not portable, don't rely on it)."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Finally, the <literal>@PostConstruct</literal> method, if any, is called."
msgstr "最後に、もしあれば、Web Beanの<literal>@PostConstruct</literal>メソッドが呼ばれます。"

#. Tag: para
#, no-c-format
msgid ""
"(The only complication is that the container might call initializer methods "
"declared by a superclass before initializing injected fields declared by a "
"subclass.)"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"One major advantage of constructor injection is that it allows the bean to "
"be immutable."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"CDI also supports parameter injection for some other methods that are "
"invoked by the container. For instance, parameter injection is supported for"
" producer methods:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Produces Checkout createCheckout(ShoppingCart cart) {\n"
"    return new Checkout(cart);\n"
"}"
msgstr ""
"<![CDATA[@Produces Checkout createCheckout(ShoppingCart cart) {\n"
"    return new Checkout(cart);\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"This is a case where the <literal>@Inject</literal> annotation <emphasis>is "
"not</emphasis> required at the injection point. The same is true for "
"observer methods (which we'll meet in <xref linkend=\"events\" />) and "
"disposer methods."
msgstr ""

#. Tag: title
#, no-c-format
msgid "What gets injected"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The CDI specification defines a procedure, called <emphasis>typesafe "
"resolution</emphasis>, that the container follows when identifying the bean "
"to inject to an injection point. This algorithm looks complex at first, but "
"once you understand it, it's really quite intuitive. Typesafe resolution is "
"performed at system initialization time, which means that the container will"
" inform the developer immediately if a bean's dependencies cannot be "
"satisfied."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The purpose of this algorithm is to allow multiple beans to implement the "
"same bean type and either:"
msgstr "このアルゴリズムの目的は、複数のWeb Beanが同じAPIを実装できるようにすることであり、"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"allow the client to select which implementation it requires using a "
"<emphasis>qualifier</emphasis> or"
msgstr ""
"<emphasis>バインディングアノテーション</emphasis>を使用することによって、クライアントが必要とする実装を選択できるようにする"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"allow the application deployer to select which implementation is appropriate"
" for a particular deployment, without changes to the client, by enabling or "
"disabling an <emphasis>alternative</emphasis>, or"
msgstr ""
"アプリケーションをデプロイする際に<emphasis>デプロイメントタイプ</emphasis>を有効にしたり無効にしたりすることによって、クライアントを変更することなく、特定の環境に対して適切な実装を選択できるようにする"

#. Tag: para
#, no-c-format
msgid "allow the beans to be isolated into separate modules."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Obviously, if you have exactly one bean of a given type, and an injection "
"point with that same type, then bean A is going to go into slot A. That's "
"the simplest possible scenario. When you first start your application, "
"you'll likely have lots of those."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"But then, things start to get complicated. Let's explore how the container "
"determines which bean to inject in more advanced cases. We'll start by "
"taking a closer look at qualifiers."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Qualifier annotations"
msgstr "バインディングアノテーション"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"If we have more than one bean that implements a particular bean type, the "
"injection point can specify exactly which bean should be injected using a "
"qualifier annotation. For example, there might be two implementations of "
"<literal>PaymentProcessor</literal>:"
msgstr ""
"もし一つより多いWeb Beanが特定のAPIを実装している場合、注入箇所では、バインディングアノテーションを使用することによって、どのWeb "
"Beanが注入されるべきかということが正確に指定されます。例えば、ここに<literal>PaymentProcessor</literal>に対する二つの実装が存在するとします。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Synchronous\n"
"public class SynchronousPaymentProcessor implements PaymentProcessor {\n"
"   public void process(Payment payment) { ... }\n"
"}"
msgstr ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Asynchronous\n"
"public class AsynchronousPaymentProcessor implements PaymentProcessor {\n"
"   public void process(Payment payment) { ... }\n"
"}"
msgstr ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Where <literal>@Synchronous</literal> and <literal>@Asynchronous</literal> "
"are qualifier annotations:"
msgstr ""
"ここで、<literal>@PayByCheque</literal>と<literal>@PayByCreditCard</literal>はバインディングアノテーションです。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface Synchronous {}"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCheque {}]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface Asynchronous {}"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayByCheque {}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A client bean developer uses the qualifier annotation to specify exactly "
"which bean should be injected."
msgstr ""
"クライアントWeb Beanの開発者は、バインディングアノテーションを使用することによって、どのWeb "
"Beanが注入されるべきかということを、正確に指定することができます。"

#. Tag: para
#, no-c-format
msgid "Using field injection:"
msgstr "フィールドに注入することができます。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Inject @Synchronous PaymentProcessor syncPaymentProcessor;\n"
"@Inject @Asynchronous PaymentProcessor asyncPaymentProcessor;"
msgstr ""
"<![CDATA[@PayByCheque PaymentProcessor chequePaymentProcessor;\n"
"@PayByCreditCard PaymentProcessor creditCardPaymentProcessor;]]>"

#. Tag: para
#, no-c-format
msgid "Using initializer method injection:"
msgstr "初期化メソッドを使用して注入することもできます。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Inject\n"
"public void setPaymentProcessors(@Synchronous PaymentProcessor syncPaymentProcessor, \n"
"                                 @Asynchronous PaymentProcessor asyncPaymentProcessor) {\n"
"   this.syncPaymentProcessor = syncPaymentProcessor;\n"
"   this.asyncPaymentProcessor = asyncPaymentProcessor;\n"
"}"
msgstr ""
"<![CDATA[@Initializer\n"
"public void setPaymentProcessors(@PayByCheque PaymentProcessor chequePaymentProcessor, \n"
"                                 @PayByCreditCard PaymentProcessor creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "Using constructor injection:"
msgstr "そして、コンストラクタを使用して注入することもできます。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Inject\n"
"public Checkout(@Synchronous PaymentProcessor syncPaymentProcessor, \n"
"                @Asynchronous PaymentProcessor asyncPaymentProcessor) {\n"
"   this.syncPaymentProcessor = syncPaymentProcessor;\n"
"   this.asyncPaymentProcessor = asyncPaymentProcessor;\n"
"}"
msgstr ""
"<![CDATA[@Initializer\n"
"public Checkout(@PayByCheque PaymentProcessor chequePaymentProcessor, \n"
"                @PayByCreditCard PaymentProcessor creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"Qualifier annotations can also qualify method arguments of producer, "
"disposer and observer methods. Combining qualified arguments with producer "
"methods is a good way to have an implementation of a bean type selected at "
"runtime based on the state of the system:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Produces\n"
"PaymentProcessor getPaymentProcessor(@Synchronous PaymentProcessor syncPaymentProcessor,\n"
"                                     @Asynchronous PaymentProcessor asyncPaymentProcessor) {\n"
"   return isSynchronous() ? syncPaymentProcessor : asyncPaymentProcessor;\n"
"}"
msgstr ""
"<![CDATA[@Initializer\n"
"public void setPaymentProcessors(@PayByCheque PaymentProcessor chequePaymentProcessor, \n"
"                                 @PayByCreditCard PaymentProcessor creditCardPaymentProcessor) {\n"
"   this.chequePaymentProcessor = chequePaymentProcessor;\n"
"   this.creditCardPaymentProcessor = creditCardPaymentProcessor;\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"If an injected field or a parameter of a bean constructor or initializer "
"method is not explicitly annotated with a qualifier, the default qualifier, "
"<literal>@Default</literal>, is assumed."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now, you may be thinking, <emphasis>\"What's the different between using a "
"qualifier and just specifying the exact implementation class you "
"want?\"</emphasis> It's important to understand that a qualifier is like an "
"extension of the interface. It does not create a direct dependency to any "
"particular implementation. There may be multiple alternative implementations"
" of <literal>@Asynchronous PaymentProcessor</literal>!"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid ""
"The built-in qualifiers <literal>@Default</literal> and "
"<literal>@Any</literal>"
msgstr ""
"シンプルWeb "
"Beanは<literal>@PostConstruct</literal>と<literal>@PreDestroy</literal>のみをコールバックとしてサポートします。"

#. Tag: para
#, no-c-format
msgid ""
"Whenever a bean or injection point does not explicitly declare a qualifier, "
"the container assumes the qualifier <literal>@Default</literal>. From time "
"to time, you'll need to declare an injection point without specifying a "
"qualifier. There's a qualifier for that too. All beans have the qualifier "
"<literal>@Any</literal>. Therefore, by explicitly specifying "
"<literal>@Any</literal> at an injection point, you suppress the default "
"qualifier, without otherwise restricting the beans that are eligible for "
"injection."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This is especially useful if you want to iterate over all beans with a "
"certain bean type. For example:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Inject \n"
"void initServices(@Any Instance&lt;Service&gt; services) { \n"
"   for (Service service: services) {\n"
"      service.init();\n"
"   }\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Qualifiers with members"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Java annotations can have members. We can use annotation members to further "
"discriminate a qualifier. This prevents a potential explosion of new "
"annotations. For example, instead of creating several qualifiers "
"representing different payment methods, we could aggregate them into a "
"single annotation with a member:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, FIELD, PARAMETER, TYPE})\n"
"public @interface PayBy {\n"
"   PaymentMethod value();\n"
"}"
msgstr ""
"<![CDATA[@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"@BindingType\n"
"public @interface PayBy {\n"
"    PaymentType value();\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"Then we select one of the possible member values when applying the "
"qualifier:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "private @Inject @PayBy(CHECK) PaymentProcessor checkPayment;"
msgstr ""
"<![CDATA[@Asynchronous @PayByCheque PaymentProcessor paymentProcessor]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"We can force the container to ignore a member of a qualifier type by "
"annotating the member <literal>@Nonbinding</literal>."
msgstr ""
"バインディングアノテーションタイプのメンバーに@NonBindingアノテーションをつけることによって、Web "
"Beanマネージャがメンバを無視するように指定することもできます。"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, FIELD, PARAMETER, TYPE})\n"
"public @interface PayBy {\n"
"   PaymentMethod value();\n"
"   @Nonbinding String comment() default \"\";\n"
"}"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Multiple qualifiers"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "An injection point may specify multiple qualifiers:"
msgstr "注入箇所に、複数のバインディングアノテーションを指定することもできます。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Synchronous @Reliable PaymentProcessor syncPaymentProcessor;"
msgstr ""
"<![CDATA[@Asynchronous @PayByCheque PaymentProcessor paymentProcessor]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Then only a bean which has <emphasis>both</emphasis> qualifier annotations "
"would be eligible for injection."
msgstr ""
"このような場合、<emphasis>両方の</emphasis>バインディングアノテーションを持つWeb "
"Beanのみが、注入する対象として適格となります。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Synchronous @Reliable\n"
"public class SynchronousReliablePaymentProcessor implements PaymentProcessor {\n"
"   public void process(Payment payment) { ... }\n"
"}"
msgstr ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: title
#, no-c-format
msgid "Alternatives"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Alternatives are beans whose implementation is specific to a particular "
"client module or deployment scenario. This alternative defines a mock "
"implementation of both <literal>@Synchronous PaymentProcessor</literal> and "
"<literal>@Asynchronous PaymentProcessor</literal>, all in one:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Alternative @Synchronous @Asynchronous\n"
"public class MockPaymentProcessor implements PaymentProcessor {\n"
"   public void process(Payment payment) { ... }\n"
"}"
msgstr ""
"<![CDATA[@PayByCheque\n"
"public class ChequePaymentProcessor implements PaymentProcessor {\n"
"    public void process(Payment payment) { ... }\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"By default, <literal>@Alternative</literal> beans are disabled. We need to "
"<emphasis>enable</emphasis> an alternative in the "
"<literal>beans.xml</literal> descriptor of a bean archive to make it "
"available for instantiation and injection. This activation only applies to "
"the beans in that archive."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"&lt;beans\n"
"   xmlns=\"http://java.sun.com/xml/ns/javaee\"\n"
"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"   xsi:schemaLocation=\"\n"
"      http://java.sun.com/xml/ns/javaee\n"
"      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd\"&gt;\n"
"   &lt;alternatives&gt;\n"
"         &lt;class&gt;org.mycompany.mock.MockPaymentProcessor&lt;/class&gt;\n"
"   &lt;/alternatives&gt;\n"
"&lt;/beans&gt;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"When an ambiguous dependency exists at an injection point, the container "
"attempts to resolve the ambiguity by looking for an enabled alternative "
"among the beans that could be injected. If there is exactly one enabled "
"alternative, that's the bean that will be injected."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Fixing unsatisfied and ambiguous dependencies"
msgstr "依存性を充たすように修正する"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The typesafe resolution algorithm fails when, after considering the "
"qualifier annotations on all beans that implement the bean type of an "
"injection point and filtering out disabled beans "
"(<literal>@Alternative</literal> beans which are not explicitly enabled), "
"the container is unable to identify exactly one bean to inject. The "
"container will abort deployment, informing us of the unsatisfied or "
"ambiguous dependency."
msgstr ""
"注入箇所のAPIタイプを実装したすべてのWeb Beanのバインディングアノテーションやデプロイメントタイプを考慮した結果、Web "
"Beanマネージャが注入すべきWeb Beanを一つに絞りきれない場合、タイプセーフな解決アルゴリズムは失敗します。"

#. Tag: para
#, no-c-format
msgid ""
"During the course of your development, you're going to encounter this "
"situation. Let's learn how to resolve it."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To fix an <emphasis>unsatisfied dependency</emphasis>, either:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"create a bean which implements the bean type and has all the qualifier types"
" of the injection point,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"make sure that the bean you already have is in the classpath of the module "
"with the injection point, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"explicitly enable an <literal>@Alternative</literal> bean that implements "
"the bean type and has the appropriate qualifier types, using "
"<literal>beans.xml</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To fix an <emphasis>ambiguous dependency</emphasis>, either:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"introduce a qualifier to distinguish between the two implementations of the "
"bean type,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"disable one of the beans by annotating it <literal>@Alternative</literal>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"move one of the implementations to a module that is not in the classpath of "
"the module with the injection point, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"disable one of two <literal>@Alternative</literal> beans that are trying to "
"occupy the same space, using <literal>beans.xml</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"See <ulink "
"url=\"http://sfwk.org/Documentation/HowDoAResolveAnAmbiguousResolutionExceptionBetweenAProducerMethodAndARawType\">this"
" FAQ</ulink> for step-by-step instructions for how to resolve an ambiguous "
"resolution exception between a raw bean type and a producer method that "
"returns the same bean type."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Just remember: \"There can be only one.\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"On the other hand, if you really do have an optional or multivalued "
"injection point, you should change the type of your injection point to "
"<literal>Instance</literal>, as we'll see in <xref linkend=\"lookup\" />."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now there's one more issue you need to be aware of when using the dependency"
" injection service."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Client proxies"
msgstr "クライアントプロキシ"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Clients of an injected bean do not usually hold a direct reference to a bean"
" instance, unless the bean is a dependent object (scope "
"<literal>@Dependent</literal>)."
msgstr "注入されたWeb Beanのクライアントは、通常、Web Beanインスタンスに対する直接的な参照を持ちません。"

#. Tag: para
#, no-c-format
msgid ""
"Imagine that a bean bound to the application scope held a direct reference "
"to a bean bound to the request scope. The application-scoped bean is shared "
"between many different requests. However, each request should see a "
"different instance of the request scoped bean&mdash;the current one!"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Now imagine that a bean bound to the session scope holds a direct reference "
"to a bean bound to the application scope. From time to time, the session "
"context is serialized to disk in order to use memory more efficiently. "
"However, the application scoped bean instance should not be serialized along"
" with the session scoped bean! It can get that reference any time. No need "
"to hoard it!"
msgstr ""
"今度は、セッションスコープに結び付けられたWeb Beanが、アプリケーションスコープに結び付けられたWeb "
"Beanに対する直接的な参照を持っている場合を想像してみてください。セッションコンテキストは、メモリを効率的に使う目的で、時々ディスクにシリアライズされます。しかしながら、アプリケーションスコープのWeb"
" Beanインスタンスは、セッションスコープのWeb Beanインスタンスと一緒にシリアライズされるべきではないのです。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Therefore, unless a bean has the default scope "
"<literal>@Dependent</literal>, the container must indirect all injected "
"references to the bean through a proxy object. This <emphasis>client "
"proxy</emphasis> is responsible for ensuring that the bean instance that "
"receives a method invocation is the instance that is associated with the "
"current context. The client proxy also allows beans bound to contexts such "
"as the session context to be serialized to disk without recursively "
"serializing other injected beans."
msgstr ""
"それゆえWeb Beanマネージャは、Web "
"Beanがデフォルトスコープである<literal>@Dependent</literal>を持っていない限り、すべての注入されたWeb "
"Beanへの参照を、プロキシオブジェクトを通じて間接的に行わなければなりません。この<emphasis>クライアントプロキシ</emphasis>は、メソッドが起動されるWeb"
" "
"Beanインスタンスと、現在のコンテキストに結びついたインスタンスが同一であることを保証する責任を持ちます。またクライアントプロキシは、セッションコンテキストのようなコンテキストに結び付けられたWeb"
" Beanが、他の注入されたWeb Beanを再帰的にシリアライズすることなく、シリアライズすることを可能とします。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Unfortunately, due to limitations of the Java language, some Java types "
"cannot be proxied by the container. If an injection point declared with one "
"of these types resolves to a bean with any scope other than "
"<literal>@Dependent</literal>, the container will abort deployment, "
"informing us of the problem."
msgstr ""
"不幸にも、Java言語の制限により、いくつかのJavaタイプはWeb "
"Beanマネージャがプロキシ化することができません。それゆえ、注入箇所のタイプがプロキシ化できないものである場合、Web "
"Beanマネージャは<literal>UnproxyableDependencyException</literal>をスローします。"

#. Tag: para
#, fuzzy, no-c-format
msgid "The following Java types cannot be proxied by the container:"
msgstr "次に挙げるJava型はWeb Beanマネージャがプロキシ化することができません。"

#. Tag: para
#, no-c-format
msgid ""
"classes which don't have a non-private constructor with no parameters, and"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"classes which are declared <literal>final</literal> or have a "
"<literal>final</literal> method,"
msgstr "<literal>final</literal>宣言されたクラスや、<literal>final</literal>メソッドを持つクラス"

#. Tag: para
#, no-c-format
msgid "arrays and primitive types."
msgstr "配列とプリミティブ型"

#. Tag: para
#, no-c-format
msgid ""
"It's usually very easy to fix an unproxyable dependency problem. If an "
"injection point of type <literal>X</literal> results in an unproxyable "
"dependency, simply:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "add a constructor with no parameters to <literal>X</literal>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"change the type of the injection point to "
"<literal>Instance&lt;X&gt;</literal>,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"introduce an interface <literal>Y</literal>, implemented by the injected "
"bean, and change the type of the injection point to <literal>Y</literal>, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"if all else fails, change the scope of the injected bean to "
"<literal>@Dependent</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A future release of Weld will likely support a non-standard workaround for "
"this limitation, using non-portable JVM APIs:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Sun, IcedTea, Mac: <literal>Unsafe.allocateInstance()</literal> (The most "
"efficient)"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"IBM, JRockit: "
"<literal>ReflectionFactory.newConstructorForSerialization()</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "But we didn't get around to implementing this yet."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Obtaining a contextual instance by programmatic lookup"
msgstr "ルックアップ処理によるWeb Beanの取得"

#. Tag: para
#, no-c-format
msgid ""
"In certain situations, injection is not the most convenient way to obtain a "
"contextual reference. For example, it may not be used when:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the bean type or qualifiers vary dynamically at runtime, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"depending upon the deployment, there may be no bean which satisfies the type"
" and qualifiers, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid "we would like to iterate over all beans of a certain type."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"In these situations, the application may obtain an instance of the interface"
" <literal>Instance</literal>, parameterized for the bean type, by injection:"
msgstr ""
"アプリケーションは注入によって、<literal>Manager</literal>インタフェースを持つインスタンスを取得することができます。"

#. Tag: programlisting
#, no-c-format
msgid "@Inject Instance&lt;PaymentProcessor&gt; paymentProcessorSource;"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>get()</literal> method of <literal>Instance</literal> produces "
"a contextual instance of the bean."
msgstr "テスト作業における<literal>@Mock</literal>や<literal>@Staging</literal>の使用"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "PaymentProcessor p = paymentProcessorSource.get();"
msgstr "<![CDATA[@Current PaymentProcessor paymentProcessor]]>"

#. Tag: para
#, no-c-format
msgid "Qualifiers can be specified in one of two ways:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "by annotating the <literal>Instance</literal> injection point, or"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"by passing qualifiers to the <literal>select()</literal> of "
"<literal>Event</literal>."
msgstr ""
"シンプルWeb "
"Beanは<literal>@PostConstruct</literal>と<literal>@PreDestroy</literal>のみをコールバックとしてサポートします。"

#. Tag: para
#, no-c-format
msgid "Specifying the qualifiers at the injection point is much, much easier:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Inject @Asynchronous Instance&lt;PaymentProcessor&gt; "
"paymentProcessorSource;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now, the <literal>PaymentProcessor</literal> returned by "
"<literal>get()</literal> will have the qualifier "
"<literal>@Asynchronous</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Alternatively, we can specify the qualifier dynamically. First, we add the "
"<literal>@Any</literal> qualifier to the injection point, to suppress the "
"default qualifier. (All beans have the qualifier <literal>@Any</literal>.)"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @Any Instance&lt;PaymentProcessor&gt; paymentProcessorSource;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Next, we need to obtain an instance of our qualifier type. Since annotations"
" are interfaces, we can't just write <literal>new Asynchronous()</literal>. "
"It's also quite tedious to create a concrete implementation of an annotation"
" type from scratch. Instead, CDI lets us obtain a qualifier instance by "
"subclassing the helper class <literal>AnnotationLiteral</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"class AsynchronousQualifier\n"
"extends AnnotationLiteral&lt;Asynchronous&gt; implements Asynchronous {}"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In some cases, we can use an anonymous class:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"PaymentProcessor p = paymentProcessorSource\n"
"   .select(new AnnotationLiteral&lt;Asynchronous&gt;() {});"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"However, we can't use an anonymous class to implement a qualifier type with "
"members."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Now, finally, we can pass the qualifier to the <literal>select()</literal> "
"method of <literal>Instance</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"Annotation qualifier = synchronously ?\n"
"      new SynchronousQualifier() : new AsynchronousQualifier();\n"
"PaymentProcessor p = anyPaymentProcessor.select(qualifier).get().process(payment);"
msgstr ""

#. Tag: title
#, no-c-format
msgid "The <literal>InjectionPoint</literal> object"
msgstr "<literal>InjectionPoint</literal>オブジェクト"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"There are certain kinds of dependent objects (beans with scope "
"<literal>@Dependent</literal>) that need to know something about the object "
"or injection point into which they are injected in order to be able to do "
"what they do. For example:"
msgstr ""
"ある種の依存性を持ったオブジェクト、<literal>@Dependent</literal>スコープを持ったWeb "
"Beanは、それらが機能するために注入されたオブジェクトや注入箇所についての情報が必要になります。例えば、"

#. Tag: para
#, no-c-format
msgid ""
"The log category for a <literal>Logger</literal> depends upon the class of "
"the object that owns it."
msgstr "<literal>Logger</literal>のログカテゴリはロガーを保有するオブジェクトのクラスが何であるかに依存します。"

#. Tag: para
#, no-c-format
msgid ""
"Injection of a HTTP parameter or header value depends upon what parameter or"
" header name was specified at the injection point."
msgstr "HTTPパラメタ値やヘッダ値の注入は、注入箇所において、どのパラメタ名やヘッダ名が指定されているかに依存します。"

#. Tag: para
#, no-c-format
msgid ""
"Injection of the result of an EL expression evaluation depends upon the "
"expression that was specified at the injection point."
msgstr "EL式の評価結果の注入は、注入箇所においてどのような式が指定されているかに依存します。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A bean with scope <literal>@Dependent</literal> may inject an instance of "
"<literal>InjectionPoint</literal> and access metadata relating to the "
"injection point to which it belongs."
msgstr ""
"<literal>@Dependent</literal>スコープを持ったWeb "
"Beanは、<literal>InjectionPoint</literal>のインスタンスに注入を行い、Web "
"Beanが属する注入箇所に関するメタデータにアクセスする可能性があります。"

#. Tag: para
#, no-c-format
msgid ""
"Let's look at an example. The following code is verbose, and vulnerable to "
"refactoring problems:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "Logger log = Logger.getLogger(MyClass.class.getName());"
msgstr "<![CDATA[Logger log = Logger.getLogger(MyClass.class.getName());]]>"

#. Tag: para
#, no-c-format
msgid ""
"This clever little producer method lets you inject a JDK "
"<literal>Logger</literal> without explicitly specifying the log category:"
msgstr ""
"次の賢く小さなプロデューサメソッドは、明示的にログカテゴリを指定することなくJDKの<literal>Logger</literal>を注入します。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"class LogFactory {\n"
"\n"
"   @Produces Logger createLogger(InjectionPoint injectionPoint) { \n"
"      return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName()); \n"
"   }\n"
"\n"
"}"
msgstr ""
"<![CDATA[class LogFactory {\n"
"\n"
"   @Produces Logger createLogger(InjectionPoint injectionPoint) { \n"
"      return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName()); \n"
"   }\n"
"\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "We can now write:"
msgstr "これによって、次のような記述が可能になります。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject Logger log;"
msgstr "<![CDATA[@Current Logger log;]]>"

#. Tag: para
#, no-c-format
msgid ""
"Not convinced? Then here's a second example. To inject HTTP parameters, we "
"need to define a qualifier type:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@BindingType\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface HttpParam {\n"
"   @Nonbinding public String value();\n"
"}"
msgstr ""
"<![CDATA[@BindingType\n"
"@Retention(RUNTIME)\n"
"@Target({TYPE, METHOD, FIELD, PARAMETER})\n"
"public @interface HttpParam {\n"
"   @NonBinding public String value();\n"
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "We would use this qualifier type at injection points as follows:"
msgstr "このバインディングタイプを注入箇所において、次のように使うことができます。"

#. Tag: programlisting
#, no-c-format
msgid ""
"@HttpParam(\"username\") String username;\n"
"@HttpParam(\"password\") String password;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following producer method does the work:"
msgstr "次のプロデューサメソッドが動作します。"

#. Tag: programlisting
#, no-c-format
msgid ""
"class HttpParams\n"
"\n"
"   @Produces @HttpParam(\"\")\n"
"   String getParamValue(InjectionPoint ip) {\n"
"      ServletRequest request = (ServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\n"
"      return request.getParameter(ip.getAnnotated().getAnnotation(HttpParam.class).value());\n"
"   }\n"
"\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Note that acquiring of the request in this example is JSF-centric. For a "
"more generic solution you could write your own producer for the request and "
"have it injected as a method parameter."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Note also that the <literal>value()</literal> member of the "
"<literal>HttpParam</literal> annotation is ignored by the container since it"
" is annotated <literal>@Nonbinding.</literal>"
msgstr ""
"（<literal>HttpParam</literal>アノテーションの<literal>value()</literal>メンバーは、<literal>@NonBinding</literal>アノテーションが付いているので、Web"
" Beanマネージャには無視されることに注意して下さい。）"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The container provides a built-in bean that implements the "
"<literal>InjectionPoint</literal> interface:"
msgstr ""
"Web Beanマネージャは<literal>InjectionPoint</literal>インタフェースを実装した組み込みWeb "
"Beanを提供します。"

#. Tag: programlisting
#, no-c-format
msgid ""
"public interface InjectionPoint { \n"
"   public Type getType();\n"
"   public Set&lt;Annotation&gt; getQualifiers();\n"
"   public Bean&lt;?&gt; getBean();\n"
"   public Member getMember();\n"
"   public Annotated getAnnotated();\n"
"   public boolean isDelegate();\n"
"   public boolean isTransient();\n"
"}"
msgstr ""
