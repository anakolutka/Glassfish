<?xml version="1.0" encoding="UTF-8"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
  
  <!-- A NIO based HTTP Transport -->
  
  <bean id="nioTransport" class="org.safehaus.asyncweb.transport.nio.NIOTransport">
    
    <!--
      This property sets the port listened on for new connections
    -->
    <property name="port">
      <value>9012</value>
    </property>
       
    <!--
      This property controls the number of IO worker threads.
      Please note that this is not related to the number of concurrent
      connections you wish to process. This will typically be a small number
    -->
    <property name="ioWorkerCount">
      <value>2</value>
    </property>
        
    <!--
      The HTTP IO Handler we employ. 
    -->
    <property name="httpIOHandler">
      <bean class="org.safehaus.asyncweb.transport.nio.HttpIOHandler">
        <!-- 
          This property controls the maximum number of requests allowed through
          a persistent connection.
          This property can be set to -1 to allow infinite keep alives
        -->
        <property name="maxKeepAlives">
          <value>100</value>
        </property>       
        
        <!--
          The amount of time we allow a connection to remain open with no data
          written to it before initiating closure
        -->
        <property name="readIdleTime">
          <value>300</value>
        </property>
      </bean>
    </property>
    
  </bean>
    
  <!-- The service container -->
  
  <bean id="container" class="org.safehaus.asyncweb.container.basic.BasicServiceContainer">
    
    <!--
      This property lists the service handlers to be employed by this
      container (in the order they are to be used).
    -->
    <property name="serviceHandlers">
      <list>
        <!--
          This handler causes the existing client session (if any) to be renewed on 
          every request - irrespective of whether application code causes the session 
          to be accessed.
        
          <bean class="org.safehaus.asyncweb.http.session.SessionKeepAliveHandler"/>
        -->
        
        <!--
          The Http service handler
        -->
        <ref bean="httpServiceHandler"/>
      
      </list>
    </property>
    
    <!--
      This property lists the transports employed by this container
    <property name="transports">
      <list>
        <ref bean="nioTransport"/>
      </list>
    </property>
    
    -->
    <!--
      Session management configuration. If omitted, default (in memory) session management
      is employed      
    -->
    <property name="sessionAccessor">
      <!-- 
        Employ a default accessor which combines a secure random key generator,
        cookie session identification and a session store
      -->
      <bean class="org.safehaus.asyncweb.http.session.DefaultSessionAccessor">
        <!--
          Employ a basic (in memory) session store with a 15 minute timeout
        -->
        <property name="sessionStore">
          <bean class="org.safehaus.asyncweb.http.session.BasicSessionStore">
            <constructor-arg type="long"><value>900000</value></constructor-arg>
            
            <!--
              SessionListeners
            -->
            <property name="sessionListeners">
              <list>
                <!-- An example listener which logs lifecyle events. This can be removed if required -->
                <bean class="org.safehaus.asyncweb.http.session.LoggingSessionListener"/>
              </list>
            </property>
            
          </bean>
        </property>
      </bean>
    </property>
    
  </bean>
  
  
  <!-- The HTTP Service Handler -->
  
  <bean id="httpServiceHandler" class="org.safehaus.asyncweb.container.basic.HttpServiceHandler">
    
    <!-- 
      This property controls the service resolver employed by the 
      container.
      By default, we use a "SimplePrefixResolver" with a prefix of "/service/".
      This means that all request URIs are expected to begin with "/service/",
      and the remainder of the URI is used as the service name. Anything not
      matching this prefix is passed through unchanged (with leading '/' removed)
    -->
    <property name="serviceResolver">
      <bean class="org.safehaus.asyncweb.container.resolver.CompositeResolver">
        <property name="resolvers">
          <list>
            <bean class="org.safehaus.asyncweb.container.resolver.SimplePrefixResolver">
              <property name="uriPrefix">
                <value>/service/</value>
              </property>
            </bean>
            <bean class="org.safehaus.asyncweb.container.resolver.PassThruResolver"/>
          </list>
        </property>
      </bean>
      

    </property>
    
  </bean>
  
  <!-- 
    HTTP Service Auto-loading.
    
    Auto-loading pre-registers all HttpServices in the spring application
    context with the HttpServiceHandler.
  -->
  <bean id="httpServiceAutoload" class="org.safehaus.asyncweb.integration.spring.HttpServiceLoader">
  
    <property name="httpServiceHandler">
      <ref bean="httpServiceHandler"/>
    </property>
     
  </bean>
  
  
</beans>
