<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->
<!DOCTYPE project [
  <!ENTITY commonBuild SYSTEM "../bootstrap/ant-common.xml">
]>
<project name="standard" default="build" basedir=".">

  <!-- =================================================================== -->
  <!-- Version Number                                                      -->
  <!-- =================================================================== -->

  <property name="standard-version" value="1.2" />
  <property name="release.name" value="jakarta-taglibs-standard-${standard-version}" />
  <property name="release.pre" value="nop" />
  <property name="release.post" value="nop" />

  <!-- =================================================================== -->
  <!-- Inherited properties                                                -->
  <!-- =================================================================== -->

  <property file="../bootstrap/project.properties"/>
  <property file="./build.properties"/>

  <!-- =================================================================== -->
  <!-- taglib specific properties                                                -->
  <!-- =================================================================== -->
    
  <property name="taglib.name"    value="standard"/>

  <!--
        These property values are derived from the previously defined values,
	and should not normally be overridden from the command line.

        build.library               Target directory for tag library
        build.examples		    Target directory for examples app
        build.doc                   Target directory for documentation app
	dist.library                Destination JAR for tag library
	dist.examples		    Destination WAR for examples app
	dist.doc                    Destination WAR for documentation app
	dist.tld                    Destination TLD file for tag library
  -->

  &commonBuild;

  <!-- =================================================================== -->
  <!-- Destination Preparation                                             -->
  <!-- =================================================================== -->

  <target name="prepare-dependencies">

    <!-- info on build environment -->

    <echo>---------- Environment Information ----------</echo>
    <echo>java.home: ${java.home}</echo>
    <echo>ant.java.version: ${ant.java.version}</echo>
    <echo>debug: ${javac.debug}</echo>
    <echo>deprecation: ${javac.deprecation}</echo>
    <echo>optimize: ${javac.optimize}</echo>
    <echo>---------------------------------------------</echo>
    
    <!-- Check the build/runtime dependencies -->
  </target>

  <!-- Set up build directories -->
  <target name="prepare-build" depends="prepare-dependencies">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.library}"/>
    <mkdir dir="${build.library}/META-INF"/>
    <mkdir dir="${build.library}/classes"/>
    <mkdir dir="${build.library}/lib"/>
    <mkdir dir="${build.examples}"/>
    <mkdir dir="${build.examples}/WEB-INF"/>
    <mkdir dir="${build.examples}/WEB-INF/classes"/>
    <mkdir dir="${build.examples}/WEB-INF/lib"/>
<!--
    <mkdir dir="${build.doc}"/>
    <mkdir dir="${build.doc}/WEB-INF"/>
-->
  </target>

  <!-- Set up distribution directory -->
  <target name="prepare-dist" depends="prepare-build">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.library}"/>
    <mkdir dir="${dist.library}/lib"/>
    <mkdir dir="${dist.library}/tld"/>
    <mkdir dir="${dist.library}/javadoc"/>
  </target>

  <!-- =================================================================== -->
  <!-- Build Tag Library Components                                      -->
  <!-- =================================================================== -->

  <target name="all" depends="build"/>
  <target name="build" depends="library-build, examples-build"/>
  <target name="build-pwc" depends="library-build-pwc"/>

<!--
  <target name="build" depends="library-build, examples-build, documentation-build"/>
-->

  <target name="compile" depends="prepare-build">  
    <javac 
      srcdir="src" 
      destdir="${build.library}/classes"
      classpath="${javaee.jar}"
      debug="${javac.debug}"
      deprecation="${javac.deprecation}"
      optimize="${javac.optimize}"/> 
  </target>

  <!-- compile for pwc. javaee.jar is unavailable here hence pwc.jar is used -->
  <target name="compile-pwc" depends="prepare-build">  
    <javac 
      srcdir="src" 
      destdir="${build.library}/classes"
      classpath="${pwc.jar}"
      debug="${javac.debug}"
      deprecation="${javac.deprecation}"
      optimize="${javac.optimize}"/> 
  </target>

  <!-- Build the tag library itself -->
  <target name="library-build" depends="compile">  
          
    <!-- copy the TLDs in META-INF -->
    <copy todir="${build.library}/META-INF">
      <fileset dir="conf" includes="*.tld"/>
    </copy>    

    <!-- Copy the resource properties files -->
    <copy todir="${build.library}/classes">
      <fileset dir="src">
	<include name="**/*.properties"/>
      </fileset>
    </copy>
    
    <!-- Update javaee.jar -->
    <jar destfile="${javaee.jar}"
         basedir="${build.library}/classes"
         includes="javax/**"
         update="true"/>

    <!-- Create the JSTL jar -->
    <jar destfile="${glassfish.lib.home}/appserv-jstl.jar"
         manifest="appserv-jstl.mf"
         basedir="${build.library}/classes"
         includes="org/**">
      <fileset dir="${build.library}">
        <include name="META-INF/*.tld"/>
      </fileset>
      <manifest>
        <attribute name="Specification-Title" value="JavaServer Pages Standard Tag Library (JSTL)"/>
        <attribute name="Specification-Version" value="1.2"/>
        <attribute name="Implementation-Title" value="JavaServer Pages Standard Tag Library Reference Implementation"/>
        <attribute name="Implementation-Version" value="${standard-version}"/>
        <attribute name="Implementation-Vendor" value="Sun Microsystems, Inc."/>
        <attribute name="Implementation-Vendor-Id" value="com.sun"/>
        <attribute name="Extension-Name" value="javax.servlet.jsp.jstl"/>
      </manifest>         
    </jar>        
  </target>

  <!-- Build the tag library and update PWC jars -->
  <target name="library-build-pwc" depends="compile-pwc">  
          
    <!-- copy the TLDs in META-INF -->
    <copy todir="${build.library}/META-INF">
      <fileset dir="conf" includes="*.tld"/>
    </copy>    

    <!-- Copy the resource properties files -->
    <copy todir="${build.library}/classes">
      <fileset dir="src">
	<include name="**/*.properties"/>
      </fileset>
    </copy>
    
    <!-- Update pwc.jar -->
    <jar destfile="${pwc.jar}"
         basedir="${build.library}/classes"
         includes="javax/**"
         update="true"/>

    <!-- Create the JSTL jar -->
    <jar destfile="${glassfish.home}/../pwc/appserv-jstl.jar"
         manifest="appserv-jstl.mf"
         basedir="${build.library}/classes"
         includes="org/**">
      <fileset dir="${build.library}">
        <include name="META-INF/*.tld"/>
      </fileset>
      <manifest>
        <attribute name="Specification-Title" value="JavaServer Pages Standard Tag Library (JSTL)"/>
        <attribute name="Specification-Version" value="1.2"/>
        <attribute name="Implementation-Title" value="JavaServer Pages Standard Tag Library Reference Implementation"/>
        <attribute name="Implementation-Version" value="${standard-version}"/>
        <attribute name="Implementation-Vendor" value="Sun Microsystems, Inc."/>
        <attribute name="Implementation-Vendor-Id" value="com.sun"/>
        <attribute name="Extension-Name" value="javax.servlet.jsp.jstl"/>
      </manifest>         
    </jar>        
  </target>

  <!-- prepare manifest files for jars -->
  <target name="cook-manifest"
          description="Generate MANIFEST.MF files">
      <copy todir="build/manifest">
          <fileset dir="." includes="*.mf" />
          <filterset>
              <filter token="VERSION" value="${release.version}"/>
          </filterset>
      </copy>
  </target>


  <!-- Assemble jstl.jar without updating glassfish/image/lib/ -->
  <target name="jar" depends="compile, cook-manifest">
      <copy file="${glassfish.maven}/legal/CDDLv1.0.txt" tofile="${build.library}/META-INF/LICENSE.txt"/>
      <!-- copy the TLDs to META-INF -->
      <copy todir="${build.library}/META-INF">
        <fileset dir="conf" includes="*.tld"/>
      </copy>    
      <!-- Copy the resource properties files -->
      <copy todir="${build.library}/classes">
        <fileset dir="src">
	  <include name="**/*.properties"/>
        </fileset>
      </copy>
      <mkdir dir="${release.dir}"/>
      <jar jarfile="${release.jstl.jar}"
              manifest="${build.library}/manifest/jstl.mf">
          <metainf dir="${build.library}/META-INF"
                   includes="LICENSE.txt"/>
          <fileset dir="${build.library}/classes">
              <include name="javax/**/*.class"/>
              <include name="org/**/*.class"/>
              <include name="org/**/*.properties"/>
          </fileset>
          <fileset dir="${build.library}">
              <include name="META-INF/*.tld"/>
          </fileset>
      </jar>
      <zip file="build/jstl.src.zip">
          <fileset dir="src">
              <include name="javax/**"/>
              <include name="org/**"/>
          </fileset>
          <fileset dir="conf">
              <include name="*.tld"/>
          </fileset>
      </zip>
  </target>


  <!-- Compile the examples application -->
  <target name="examples-build" depends="library-build">

    <!-- Compile the examples source code -->
    <javac srcdir="examples" destdir="${build.examples}/WEB-INF/classes"
           classpath="${javaee.jar}:${build.library}/classes"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}"
           optimize="${javac.optimize}"/>
  
    <!-- Copy web.xml + examples TLD -->
    <copy todir="${build.examples}/WEB-INF">
      <fileset dir="examples/web/WEB-INF"/>
    </copy>
    
    <!-- Copy web pages -->
    <copy todir="${build.examples}">
      <fileset dir="examples/web"/>
    </copy>
        
    <!-- copy the runtime jar files -->
    <copy todir="${build.examples}/WEB-INF/lib">
      <fileset dir="${build.library}/lib" includes="*.jar"/>
    </copy>
    
  </target>

  <!-- Compile the documentation application -->
  <target name="documentation-build" depends="prepare-build">
  
    <copy todir="${build.doc}/WEB-INF">
      <fileset dir="doc/conf"/>
    </copy>
    
    <copy todir="${build.doc}">
      <fileset dir="doc/web">
        <include name="**/*.html"/>
      </fileset>
    </copy>    
  </target>
  
  <!-- =================================================================== -->
  <!-- Create the Distribution                                             -->
  <!-- =================================================================== -->

  <!-- Create the entire set of distribution files -->
  <target name="dist" depends="library-dist,examples-dist,documentation-dist,javadoc-dist"/>

  <!-- Create the library distribution files -->
  <target name="library-dist" depends="library-build, prepare-dist">

    <!-- Copy the runtime jar files -->
    <copy todir="${dist.library}/lib">
      <fileset dir="${build.library}/lib" includes="**/*.jar"/>
    </copy>

    <!-- All TLDs are copied in the 'tld' dir of the distribution -->
    <copy todir="${dist.dir}/${taglib.name}/tld">
      <fileset dir="conf" includes="*.tld"/>
    </copy>
      
    <!-- LICENSE file copied at the top level of the distribution -->
    <copy file="${glassfish.maven}/legal/CDDLv1.0.txt" tofile="${dist.library}/LICENSE.txt"/>
  </target>

  <!-- Create the examples application WAR file -->
  <target name="examples-dist" depends="examples-build, prepare-dist">    
      <!-- create the jar for the examples webapp -->  
      <jar jarfile="${dist.examples}" basedir="${build.examples}"/>
  </target>

  <!-- Create the documentation application WAR file -->
  <target name="documentation-dist" depends="documentation-build, prepare-dist">
      <jar jarfile="${dist.doc}" basedir="${build.doc}" excludes="intro.html"/>
      <mkdir dir="${taglibs.doc}"/>
      <copy todir="${taglibs.doc}">
          <fileset dir="${build.doc}">
              <exclude name="WEB-INF/**"/>
          </fileset>
      </copy>
  </target>
  
  <!-- Create the javadocs -->
  <target name="javadoc-dist" depends="prepare-dist">
   <javadoc packagenames="javax.servlet.jsp.jstl.*"
            sourcepath="src"
            classpath="${servlet25.jar}:${jsp21.jar}:${el-api.jar}:${jdbc2_0-stdext.jar}:${jaxp-api.jar}:${dom.jar}:${sax.jar}:${xercesImpl.jar}:${xalan.jar}"
            destdir="${dist.library}/javadoc"
            bottom='&lt;font size="-1"&gt;Copyright 2003 Sun Microsystems, Inc. All Rights Reserved.&lt;/font&gt;'/>
  </target>

    <target name="push-to-maven-prepare" depends="-push-to-maven-init, jar"
        description="creates an image for the 'push-to-maven' goal">
        <delete dir="build/maven-repo" /><!-- clean it -->
        <maven-repository-importer destdir="build/maven-repo" version="${release.version}">
            <artifact jar="${release.jstl.jar}" pom="jstl.pom" srczip="build/jstl.src.zip" />
        </maven-repository-importer>
    </target>

    <target name="push-to-maven" depends="push-to-maven-prepare"
        description="pushes jars to the java.net maven repository">
        <cvs-import src="build/maven-repo" dest="glassfish/repo" />
    </target>

  <!-- =================================================================== -->
  <!-- Nightly (components generated for the website)                      -->
  <!-- =================================================================== -->
  
  <target name="dist-nightly" depends="dist">
    <!-- website intro page for the taglib -->
    <style in="xml/intro.xml"
           destdir="${build.doc}"                                          
           out="${build.doc}/intro.html"
           style="${taglibs.xsl}">
      <param name="prefix" expression="../../"/>
    </style>
    <copy file="${build.doc}/intro.html" todir="${taglibs.doc}"/>
  </target>    
  
  <!-- =================================================================== -->
  <!-- Public utility targets                                              -->
  <!-- =================================================================== -->
 
  <!-- Delete build and dist directories so we can start from scratch -->
  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Private utility targets                                              -->
  <!-- =================================================================== -->
  
  <!-- Check the availability of a required jar -->
  <target name="requiredJar">
    <echo message="  ${prop}"/>
    <available file="${file}" property="requirement.satisfied"/>
    <antcall target="requiredJarFailed"/>
  </target>

  <!-- Support for target 'requiredJar' -->
  <target name="requiredJarFailed" unless="requirement.satisfied">
    <echo message="The property ${prop} must be set to a jar file containing"/>
    <echo message="the '${desc}'."/>
    <fail message="Current value for ${prop} is: ${file}."/>
  </target>
  
  <!-- Process a target only if a property is set.
       Allows us to ignore some dependencies that are included in
       J2SE 1.4 but were not prior to that. -->
  <target name="processIfPropSet">
    <echo message="  ${prop}"/>
    <condition property="prop.specified">
      <isSet property="${prop}"/>
    </condition>
    <antcall target="${task}"/>
    <antcall target="${task}Not"/>
  </target>

  <!-- Check the availability of a required jar only if property is set -->
  <target name="requiredJarIfPropSet" if="prop.specified">
    <antcall target="requiredJar"/>
  </target>

  <!-- Warning message when required jar is ignored because the property
       is not set. -->
  <target name="requiredJarIfPropSetNot" unless="prop.specified">
    <echo message="  Ignoring dependency on ${prop} because property is not set."/>
    <echo message="  OK as long as both compile and run-time environments are at least J2SE 1.4."/>
  </target>

  <!-- Copy file only if property is set -->
  <target name="copyIfPropSet" if="prop.specified">
    <copy file="${file}" todir="${todir}"/>
  </target>

  <!-- Warning message when file is not copied because the property
       is not set. -->
  <target name="copyIfPropSetNot" unless="prop.specified">
    <echo message="  Ignoring copy of ${prop} because property is not set."/>
  </target>  

  <!-- =================================================================== -->
  <!-- Perform an official release -->
  <!-- =================================================================== -->
  <target name="release" depends="dist">
    <mkdir dir="${release.dir}"/>
    <antcall target="${release.pre}"/>
    <!-- Copy the taglib to the release dir -->
    <copy todir="${release.dir}" >
      <fileset dir="${dist.dir}/${taglib.name}" excludes="doc/**"/>
    </copy>
    <copy file="${glassfish.maven}/legal/CDDLv1.0.txt"   tofile="${release.dir}/LICENSE.txt"/>
    <copy file="../README"    tofile="${release.dir}/README"/>
    <zip zipfile="${dist.dir}/${release.name}.zip"
       basedir="${dist.dir}" includes="${release.name}/**"/>
    <tar tarfile="${dist.dir}/${release.name}.tar"
       basedir="${dist.dir}" includes="${release.name}/**"/>
    <gzip zipfile="${dist.dir}/${release.name}.tar.gz"
          src="${dist.dir}/${release.name}.tar"/>
    <delete dir="${dist.dir}/${release.name}"/> 
    <delete file="${dist.dir}/${release.name}.tar"/> 
    <antcall target="${release.post}"/>
  </target>

  <!-- target that does nothing -->
  <target name="nop"/>

  <!-- =================================================================== -->
  <!-- Unit Test PassThru Targets -->
  <!-- =================================================================== -->
  <target name="test" depends="build">
    <ant antfile="build-tests.xml" target="run.test"/>
  </target>

  <target name="run.cactus" depends="build">
    <ant antfile="build-tests.xml" target="run.cactus"/>
  </target>

  <target name="run.junit" depends="build">
    <ant antfile="build-tests.xml" target="junit"/>
  </target>

</project>
