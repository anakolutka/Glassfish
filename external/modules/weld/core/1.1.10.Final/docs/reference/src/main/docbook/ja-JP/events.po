# Language ja-JP translations for master.xml package.
# Automatically generated, 2008.
# 
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-04-30 23:50+0900\n"
"Last-Translator: Fusayuki Minamoto <miki.htmnet@nifty.com>\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: \n"

#. Tag: title
#, no-c-format
msgid "Events"
msgstr "イベント"

#. Tag: para
#, no-c-format
msgid ""
"Dependency injection enables loose-coupling by allowing the implementation "
"of the injected bean type to vary, either a deployment time or runtime. "
"Events go one step further, allowing beans to interact with no compile time "
"dependency at all. Event <emphasis>producers</emphasis> raise events that "
"are delivered to event <emphasis>observers</emphasis> by the container."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This basic schema might sound like the familiar observer/observable pattern,"
" but there are a couple of twists:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"not only are event producers decoupled from observers; observers are "
"completely decoupled from producers,"
msgstr "イベントプロデューサはオブザーバから分離されているだけではなく、オブザーバはプロデューサから完全に分離されています。"

#. Tag: para
#, no-c-format
msgid ""
"observers can specify a combination of \"selectors\" to narrow the set of "
"event notifications they will receive, and"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"observers can be notified immediately, or can specify that delivery of the "
"event should be delayed until the end of the current transaction."
msgstr "オブザーバは直ちにに通知を受信するか、あるいは現在のトランザクションの終了を待ってイベント配送を遅延させるように指定することが可能です"

#. Tag: para
#, no-c-format
msgid ""
"The CDI event notification facility uses more or less the same typesafe "
"approach that we've already seen with the dependency injection service."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Event payload"
msgstr "イベントプロデューサ"

#. Tag: para
#, no-c-format
msgid ""
"The event object carries state from producer to consumer. The event object "
"is nothing more than an instance of a concrete Java class. (The only "
"restriction is that an event type may not contain type variables). An event "
"may be assigned qualifiers, which allows observers to distinguish it from "
"other events of the same type. The qualifiers function like topic selectors,"
" allowing an observer to narrow the set of events it observes."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"An event qualifier is just a normal qualifier, defined using "
"<literal>@Qualifier</literal>. Here's an example:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Target({FIELD, PARAMETER})\n"
"@Retention(RUNTIME)\n"
"public @interface Updated {}"
msgstr ""
"<![CDATA[@BindingType\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Updated { ... }]]>"

#. Tag: title
#, no-c-format
msgid "Event observers"
msgstr "イベントオブザーバ"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"An <emphasis>observer method</emphasis> is a method of a bean with a "
"parameter annotated <literal>@Observes</literal>."
msgstr ""
"<emphasis>オブザーバメソッド</emphasis> は、 <literal>@Observes</literal> "
"というアノテーションの付いたパラメータを持つWeb Beanのメソッドです。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void onAnyDocumentEvent(@Observes Document document) { ... }"
msgstr ""
"<![CDATA[public void onAnyDocumentEvent(@Observes Document document) { ... "
"}]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The annotated parameter is called the <emphasis>event parameter</emphasis>. "
"The type of the event parameter is the observed <emphasis>event "
"type</emphasis>, in this case <literal>Document</literal>. The event "
"parameter may also specify qualifiers."
msgstr ""
"このアノテーション付きのパラメータは <emphasis>イベントパラメータ</emphasis> "
"と呼ばれます。イベントパラメータの種類は<emphasis>イベントタイプ</emphasis> で指定されます。オブザーバメソッドは "
"\"セレクタ\"を指定することもできます。それはWeb "
"Beansバインディングタイプのインスタンスに過ぎません。バインディングタイプがイベントセレクタとして使用されると、それは "
"<emphasis>イベントバインディングタイプ</emphasis> と呼ばれます。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void afterDocumentUpdate(@Observes @Updated Document document) { ... "
"}"
msgstr ""
"<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document "
"document) { ... }]]>"

#. Tag: para
#, no-c-format
msgid ""
"An observer method need not specify any event qualifiers&mdash;in this case "
"it is interested in <emphasis>only unqualified</emphasis> events of a "
"particular type. If it does specify qualifiers, it's only interested in "
"events which have those qualifiers."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The observer method may have additional parameters, which are injection "
"points:"
msgstr ""
"オブザーバメソッドは追加のパラメータを持つこともできます。それは通常のWeb "
"Beansメソッドパラメータインジェクションのセマンティクスに従って依存性の注入が行われます。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void afterDocumentUpdate(@Observes @Updated Document document, User "
"user) { ... }"
msgstr ""
"<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document "
"document, User user) { ... }]]>"

#. Tag: title
#, no-c-format
msgid "Event producers"
msgstr "イベントプロデューサ"

#. Tag: para
#, no-c-format
msgid ""
"Event producers fire events using an instance of the parameterized "
"<literal>Event</literal> interface. An instance of this interface is "
"obtained by injection:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @Any Event&lt;Document&gt; documentEvent;"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A producer raises events by calling the <literal>fire()</literal> method of "
"the <literal>Event</literal> interface, passing the event object:"
msgstr ""
"プロデューサは <literal>Event</literal> インタフェースの <literal>fire()</literal> "
"メソッドを呼び出し、<emphasis>イベントオブジェクト</emphasis> を渡すことでイベントを発生させます。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "documentEvent.fire(document);"
msgstr "<![CDATA[documentEvent.fire(document);]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "This particular event will be delivered to every observer method that:"
msgstr "イベントは次のような特徴を持つ各オブザーバメソッドへ配送されます。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"has an event parameter to which the event object (the "
"<literal>Document</literal>) is assignable, and"
msgstr "イベントオブジェクトが代入可能なイベントパラメータ、かつ"

#. Tag: para
#, fuzzy, no-c-format
msgid "specifies no qualifiers."
msgstr "イベントバインディングを指定しない"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The container simply calls all the observer methods, passing the event "
"object as the value of the event parameter. If any observer method throws an"
" exception, the container stops calling observer methods, and the exception "
"is rethrown by the <literal>fire()</literal> method."
msgstr ""
"Web "
"Beanマネージャは単にすべてのオブザーバメソッドを呼び出し、そのイベントパラメータの値としてイベントオブジェクトを渡します。もしオブザーバメソッドが例外をスローしたら、Web"
" Beanマネージャはオブザーバメソッドの呼び出しを停止し、その例外は <literal>fire()</literal> "
"メソッドによって再スローされます。"

#. Tag: para
#, no-c-format
msgid "Qualifiers can be applied to an event in one of two ways:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "by annotating the <literal>Event</literal> injection point, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"by passing qualifiers to the <literal>select()</literal> of "
"<literal>Event</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Specifying the qualifiers at the injection point is far simpler:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "@Inject @Updated Event&lt;Document&gt; documentUpdatedEvent;"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Then, every event fired via this instance of <literal>Event</literal> has "
"the event qualifier <literal>@Updated</literal>. The event is delivered to "
"every observer method that:"
msgstr ""
"次に <literal>Event</literal> "
"のインスタンスを介して発火したイベントは、イベントバインディングのアノテーションを付加します。そのイベントは次のような特徴持つ各オブザーバメソッドに配送されます。"

#. Tag: para
#, no-c-format
msgid "has an event parameter to which the event object is assignable, and"
msgstr "イベントオブジェクトが代入可能なイベントパラメータ、かつ"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"does not have any event qualifier <emphasis>except</emphasis> for the event "
"qualifiers that match those specified at the <literal>Event</literal> "
"injection point."
msgstr ""
"<literal>fire()</literal> へ渡されるイベントバインディングを <emphasis>除いて</emphasis> "
"イベントバインディングを指定しない "

#. Tag: para
#, no-c-format
msgid ""
"The downside of annotating the injection point is that we can't specify the "
"qualifier dynamically. CDI lets us obtain a qualifier instance by "
"subclassing the helper class <literal>AnnotationLiteral</literal>. That way,"
" we can pass the qualifier to the <literal>select()</literal> method of "
"<literal>Event</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"documentEvent.select(new "
"AnnotationLiteral&lt;Updated&gt;(){}).fire(document);"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Events can have multiple event qualifiers, assembled using any combination "
"of annotations at the <literal>Event</literal> injection point and qualifier"
" instances passed to the <literal>select()</literal> method."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Conditional observer methods"
msgstr "トランザクション型オブザーバ"

#. Tag: para
#, no-c-format
msgid ""
"By default, if there is no instance of an observer in the current context, "
"the container will instantiate the observer in order to deliver an event to "
"it. This behavior isn't always desirable. We may want to deliver events only"
" to instances of the observer that already exist in the current contexts."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A conditional observer is specified by adding <literal>receive = "
"IF_EXISTS</literal> to the <literal>@Observes</literal> annotation."
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void refreshOnDocumentUpdate(@Observes(receive = IF_EXISTS) @Updated "
"Document d) { ... }"
msgstr ""
"<![CDATA[public void afterDocumentUpdate(@Observes @Updated Document "
"document) { ... }]]>"

#. Tag: para
#, no-c-format
msgid ""
"A bean with scope <literal>@Dependent</literal> cannot be a conditional "
"observer, since it would never be called!"
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Event qualifiers with members"
msgstr "メンバを持ったイベントバインディング"

#. Tag: para
#, fuzzy, no-c-format
msgid "An event qualifier type may have annotation members:"
msgstr "イベントバインディングは次のようにアノテーションメンバーを持つことができます。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Qualifier\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Role {\n"
"   RoleType value();\n"
"}"
msgstr ""
"<![CDATA[@BindingType\n"
"@Target({PARAMETER, FIELD})\n"
"@Retention(RUNTIME)\n"
"public @interface Role {\n"
"    RoleType value();\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"The member value is used to narrow the messages delivered to the observer:"
msgstr "メンバー値は次のようにオブザーバへ配送されるメッセージを狭めるのに使用されます。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void adminLoggedIn(@Observes @Role(ADMIN) LoggedIn event) { ... }"
msgstr ""
"<![CDATA[public void adminLoggedIn(@Observes @Role(ADMIN) LoggedIn event) { "
"... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Event qualifier type members may be specified statically by the event "
"producer, via annotations at the event notifier injection point:"
msgstr ""
"イベントバインディングタイプはイベントプロデューサによって静的に指定できます。次の例は、イベント通知インジェクションポイントでのアノテーションを通じて指定しています。"

#. Tag: programlisting
#, no-c-format
msgid "@Inject @Role(ADMIN) Event&lt;LoggedIn&gt; loggedInEvent;"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Alternatively, the value of the event qualifier type member may be "
"determined dynamically by the event producer. We start by writing an "
"abstract subclass of <literal>AnnotationLiteral</literal>:"
msgstr ""
"別の方法では、イベントバインディングタイプのメンバー値はイベントプロデューサによって動的に決定することもできます。まず、次のように "
"<literal>AnnotationLiteral</literal> の抽象サブクラスを書くことで始めます。"

#. Tag: programlisting
#, no-c-format
msgid ""
"abstract class RoleBinding \n"
"   extends AnnotationLiteral&lt;Role&gt; \n"
"   implements Role {}"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The event producer passes an instance of this class to "
"<literal>select()</literal>:"
msgstr "イベントプロデューサはこのクラスのインスタンスを <literal>fire()</literal> へ渡します。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"documentEvent.select(new RoleBinding() {\n"
"   public void value() { return user.getRole(); }\n"
"}).fire(document);"
msgstr ""
"<![CDATA[documentEvent.fire( document, new RoleBinding() { public void "
"value() { return user.getRole(); } } );]]>"

#. Tag: title
#, fuzzy, no-c-format
msgid "Multiple event qualifiers"
msgstr "複数のイベントバインディング"

#. Tag: para
#, fuzzy, no-c-format
msgid "Event qualifier types may be combined, for example:"
msgstr "イベントバインディングタイプは、たとえば次のように組み合わせることが可能です。"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Inject @Blog Event&lt;Document&gt; blogEvent;\n"
"...\n"
"if (document.isBlog()) blogEvent.select(new AnnotationLiteral&lt;Updated&gt;(){}).fire(document);"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Observers must completely match the final qualified type of the event. "
"Assume the following observers in this example:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void afterBlogUpdate(@Observes @Updated @Blog Document document) { "
"... }"
msgstr ""
"<![CDATA[public void afterBlogUpdate(@Observes @Updated @Blog Document "
"document) { ... }]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void onAnyBlogEvent(@Observes @Blog Document document) { ... }"
msgstr ""
"<![CDATA[public void onAnyBlogEvent(@Observes @Blog Document document) { ..."
" }]]>"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void onAnyDocumentEvent(@Observes Document document) { ... }}}"
msgstr ""
"<![CDATA[public void onAnyDocumentEvent(@Observes Document document) { ... "
"}}}]]>"

#. Tag: para
#, no-c-format
msgid "The only observer notified will be:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "However, if there were also an observer:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "public void afterBlogUpdate(@Observes @Any Document document) { ... }"
msgstr ""
"<![CDATA[public void afterBlogUpdate(@Observes @Updated @Blog Document "
"document) { ... }]]>"

#. Tag: para
#, no-c-format
msgid ""
"It would also be notified, as <literal>@Any</literal> acts as an alias for "
"any and all qualifiers."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Transactional observers"
msgstr "トランザクション型オブザーバ"

#. Tag: para
#, no-c-format
msgid ""
"Transactional observers receive their event notifications during the before "
"or after completion phase of the transaction in which the event was raised. "
"For example, the following observer method needs to refresh a query result "
"set that is cached in the application context, but only when transactions "
"that update the <literal>Category</literal> tree succeed:"
msgstr ""
"トランザクション型オブザーバは、イベントが発生したときのトランザクションが完了前または完了後のフェーズ中にイベント通知を受け取ります。たとえば、次のオブザーバメソッドはアプリケーションコンテキストにキャッシュされたクエリーの結果をリフレッシュする必要がありますが、"
" <literal>Category</literal> ツリーの更新をしたトランザクションが成功したときだけ必要です。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"public void refreshCategoryTree(@Observes(during = AFTER_SUCCESS) "
"CategoryUpdateEvent event) { ... }"
msgstr ""
"<![CDATA[public void refreshCategoryTree(@AfterTransactionSuccess @Observes "
"CategoryUpdateEvent event) { ... }]]>"

#. Tag: para
#, fuzzy, no-c-format
msgid "There are five kinds of transactional observers:"
msgstr "次の3種類のトランザクション型オブザーバが存在します。"

#. Tag: para
#, no-c-format
msgid ""
"<literal>IN_PROGESS</literal> observers are called immediately (default)"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>AFTER_SUCCESS</literal> observers are called during the after "
"completion phase of the transaction, but only if the transaction completes "
"successfully"
msgstr ""
"<literal>@AfterTransactionSuccess</literal> "
"オブザーバは、トランザクション完了後のフェーズ中にそのトランザクションの完了に成功したときだけ呼び出される"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>AFTER_FAILURE</literal> observers are called during the after "
"completion phase of the transaction, but only if the transaction fails to "
"complete successfully"
msgstr ""
"<literal>@AfterTransactionFailure</literal> "
"オブザーバは、トランザクション完了後のフェーズ中にそのトランザクションの完了に失敗したときだけ呼び出される"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>AFTER_COMPLETION</literal> observers are called during the after "
"completion phase of the transaction"
msgstr ""
"<literal>@AfterTransactionCompletion</literal> "
"オブザーバは、トランザクション完了後のフェーズ中に呼び出される"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>BEFORE_COMPLETION</literal> observers are called during the before "
"completion phase of the transaction"
msgstr ""
"<literal>@BeforeTransactionCompletion</literal> "
"オブザーバは、トランザクション完了前のフェーズ中に呼び出される"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Transactional observers are very important in a stateful object model "
"because state is often held for longer than a single atomic transaction."
msgstr ""
"トランザクション型オブザーバはWeb "
"Beansのようなステートフルオブジェクトモデルにおいてはとても重要です。なぜなら、ステートは単一のアトミックトランザクションよりも長く保持されることが多いからです。"

#. Tag: para
#, no-c-format
msgid ""
"Imagine that we have cached a JPA query result set in the application scope:"
msgstr "アプリケーションスコープにおいてJPAクエリーの結果をキャッシュしたと想像してみてください。"

#. Tag: programlisting
#, no-c-format
msgid ""
"@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"   @PersistenceContext EntityManager em;\n"
"    \n"
"   List&lt;Product&gt; products;\n"
"\n"
"   @Produces @Catalog \n"
"   List&lt;Product&gt; getCatalog() {\n"
"      if (products==null) {\n"
"         products = em.createQuery(\"select p from Product p where p.deleted = false\")\n"
"            .getResultList();\n"
"      }\n"
"      return products;\n"
"   }\n"
"    \n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"From time to time, a <literal>Product</literal> is created or deleted. When "
"this occurs, we need to refresh the <literal>Product</literal> catalog. But "
"we should wait until <emphasis>after</emphasis> the transaction completes "
"successfully before performing this refresh!"
msgstr ""
"時が経つにつれ、 <literal>Product</literal> は生成され、削除されます。これが発生するとき、 "
"<literal>Product</literal> "
"カタログをリフレッシュする必要があります。しかし、このリフレッシュを実行する前にそのトランザクションの完了が成功する "
"<emphasis>後</emphasis> まで待つべきなのです。"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The bean that creates and deletes <literal>Product</literal>s could raise "
"events, for example:"
msgstr " <literal>Product</literal> を生成、削除するWeb Beansは次のようにイベントを発生させます。"

#. Tag: programlisting
#, no-c-format
msgid ""
"@Stateless\n"
"public class ProductManager {\n"
"   @PersistenceContext EntityManager em;\n"
"   @Inject @Any Event&lt;Product&gt; productEvent;\n"
"\n"
"   public void delete(Product product) {\n"
"      em.delete(product);\n"
"      productEvent.select(new AnnotationLiteral&lt;Deleted&gt;(){}).fire(product);\n"
"   }\n"
"    \n"
"   public void persist(Product product) {\n"
"      em.persist(product);\n"
"      productEvent.select(new AnnotationLiteral&lt;Created&gt;(){}).fire(product);\n"
"   }\n"
"   ...\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"And now <literal>Catalog</literal> can observe the events after successful "
"completion of the transaction:"
msgstr ""
"そして、 <literal>Catalog</literal> は次のようにトランザクションの完了が成功した後にイベントを観察できるようになります。"

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"   ...\n"
"   void addProduct(@Observes(during = AFTER_SUCCESS) @Created Product product) {\n"
"      products.add(product);\n"
"   }\n"
"    \n"
"   void removeProduct(@Observes(during = AFTER_SUCCESS) @Deleted Product product) {\n"
"      products.remove(product);\n"
"   }\n"
"}"
msgstr ""
"<![CDATA[@ApplicationScoped @Singleton\n"
"public class Catalog {\n"
"\n"
"    ...\n"
"    \n"
"    void addProduct(@AfterTransactionSuccess @Observes @Created Product product) {\n"
"        products.add(product);\n"
"    }\n"
"    \n"
"    void addProduct(@AfterTransactionSuccess @Observes @Deleted Product product) {\n"
"        products.remove(product);\n"
"    }\n"
"    \n"
"}]]>"
