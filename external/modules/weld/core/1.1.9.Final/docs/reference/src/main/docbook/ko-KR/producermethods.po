# translation of producermethods.po to Korean
# Language ko-KR translations for Introduction_to_Web_Beans package.
# 
# Automatically generated, 2009.
# Eunju Kim <eukim@redhat.com>, 2009.
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-01-16T16:07:16\n"
"PO-Revision-Date: 2009-01-23 11:12+1000\n"
"Last-Translator: Eunju Kim <eukim@redhat.com>\n"
"Language-Team: Korean <ko@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=2; plural=(n!=1);\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#, no-c-format
msgid "Producer methods"
msgstr "생산자 방식 "

#. Tag: para
#, no-c-format
msgid ""
"Producer methods let us overcome certain limitations that arise when a "
"container, instead of the application, is responsible for instantiating "
"objects. They're also the easiest way to integrate objects which are not "
"beans into the CDI environment."
msgstr ""

#. Tag: para
#, no-c-format
msgid "According to the spec:"
msgstr "spec에 의하면: "

#. Tag: para
#, no-c-format
msgid "A producer method acts as a source of objects to be injected, where:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the objects to be injected are not required to be instances of beans,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the concrete type of the objects to be injected may vary at runtime or"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"the objects require some custom initialization that is not performed by the "
"bean constructor"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "For example, producer methods let us:"
msgstr "생산자 방식의 범위 "

#. Tag: para
#, no-c-format
msgid "expose a JPA entity as a bean,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "expose any JDK class as a bean,"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"define multiple beans, with different scopes or initialization, for the same"
" implementation class, or"
msgstr ""

#. Tag: para
#, no-c-format
msgid "vary the implementation of a bean type at runtime."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In particular, producer methods let us use runtime polymorphism with CDI. As"
" we've seen, alternative beans are one solution to the problem of "
"deployment-time polymorphism. But once the system is deployed, the CDI "
"implementation is fixed. A producer method has no such limitation:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@SessionScoped\n"
"public class Preferences implements Serializable {\n"
"   private PaymentStrategyType paymentStrategy;\n"
"   ...\n"
"   @Produces @Preferred \n"
"   public PaymentStrategy getPaymentStrategy() {\n"
"       switch (paymentStrategy) {\n"
"           case CREDIT_CARD: return new CreditCardPaymentStrategy();\n"
"           case CHECK: return new CheckPaymentStrategy();\n"
"           case PAYPAL: return new PayPalPaymentStrategy();\n"
"           default: return null;\n"
"       } \n"
"   }\n"
"}"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy ccps,\n"
"                                          ChequePaymentStrategy cps,\n"
"                                          PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"

#. Tag: para
#, no-c-format
msgid "Consider an injection point:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid "@Inject @Preferred PaymentStrategy paymentStrategy;"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy() {\n"
"    ...\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"This injection point has the same type and qualifier annotations as the "
"producer method, so it resolves to the producer method using the usual CDI "
"injection rules. The producer method will be called by the container to "
"obtain an instance to service this injection point."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Scope of a producer method"
msgstr "생산자 방식의 범위 "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The scope of the producer method defaults to <literal>@Dependent</literal>, "
"and so it will be called <emphasis>every time</emphasis> the container "
"injects this field or any other field that resolves to the same producer "
"method. Thus, there could be multiple instances of the "
"<literal>PaymentStrategy</literal> object for each user session."
msgstr ""
"생산자 방식의 기본값 범위는 <literal>@Dependent</literal>로 되어 있으므로, <emphasis>매 "
"번</emphasis> Web Bean 관리자가 이러한 영역 또는 동일한 생산자 방식으로 해결되는 다른 영역을 삽입할 때 마다 "
"호출됩니다. 따라서, 각각의 사용자 세션에 대해 <literal>PaymentStrategy</literal> 객체의 인스턴스가 여러개 "
"있을 수 있습니다.  "

#. Tag: para
#, no-c-format
msgid ""
"To change this behavior, we can add a <literal>@SessionScoped</literal> "
"annotation to the method."
msgstr ""
"이러한 기능을 변경하려면, <literal>@SessionScoped</literal> 어노테이션 방식을 추가할 수 있습니다.  "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy() {\n"
"   ...\n"
"}"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy() {\n"
"    ...\n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"Now, when the producer method is called, the returned "
"<literal>PaymentStrategy</literal> will be bound to the session context. The"
" producer method won't be called again in the same session."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A producer method does <emphasis>not</emphasis> inherit the scope of the "
"bean that declares the method. There are two different beans here: the "
"producer method, and the bean which declares it. The scope of the producer "
"method determines how often the method will be called, and the lifecycle of "
"the objects returned by the method. The scope of the bean that declares the "
"producer method determines the lifecycle of the object upon which the "
"producer method is invoked."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Injection into producer methods"
msgstr "생산자 방식으로 삽입 "

#. Tag: para
#, no-c-format
msgid ""
"There's one potential problem with the code above. The implementations of "
"<literal>CreditCardPaymentStrategy</literal> are instantiated using the Java"
" <literal>new</literal> operator. Objects instantiated directly by the "
"application can't take advantage of dependency injection and don't have "
"interceptors."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If this isn't what we want, we can use dependency injection into the "
"producer method to obtain bean instances:"
msgstr ""

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy ccps,\n"
"                                          CheckPaymentStrategy cps,\n"
"                                          PayPalPaymentStrategy ppps) {\n"
"   switch (paymentStrategy) {\n"
"      case CREDIT_CARD: return ccps;\n"
"      case CHEQUE: return cps;\n"
"      case PAYPAL: return ppps;\n"
"      default: return null;\n"
"   } \n"
"}"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(CreditCardPaymentStrategy ccps,\n"
"                                          ChequePaymentStrategy cps,\n"
"                                          PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"Wait, what if <literal>CreditCardPaymentStrategy</literal> is a request-"
"scoped bean? Then the producer method has the effect of \"promoting\" the "
"current request scoped instance into session scope. This is almost certainly"
" a bug! The request scoped object will be destroyed by the container before "
"the session ends, but the reference to the object will be left \"hanging\" "
"in the session scope. This error will <emphasis>not</emphasis> be detected "
"by the container, so please take extra care when returning bean instances "
"from producer methods!"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There's at least three ways we could go about fixing this bug. We could "
"change the scope of the <literal>CreditCardPaymentStrategy</literal> "
"implementation, but this would affect other clients of that bean. A better "
"option would be to change the scope of the producer method to "
"<literal>@Dependent</literal> or <literal>@RequestScoped</literal>."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"But a more common solution is to use the special <literal>@New</literal> "
"qualifier annotation."
msgstr "하지만 보다 일반적인 방법은 특별한 <literal>@New</literal> 바인딩 어노테이션을 사용하는 것입니다. "

#. Tag: title
#, no-c-format
msgid "Use of <literal>@New</literal> with producer methods"
msgstr "생산자 방식과 함께 <literal>@New</literal> 사용 "

#. Tag: para
#, no-c-format
msgid "Consider the following producer method:"
msgstr "다음과 같은 생산자 방식을 고려합니다: "

#. Tag: programlisting
#, fuzzy, no-c-format
msgid ""
"@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(@New CreditCardPaymentStrategy ccps,\n"
"                                          @New CheckPaymentStrategy cps,\n"
"                                          @New PayPalPaymentStrategy ppps) {\n"
"   switch (paymentStrategy) {\n"
"      case CREDIT_CARD: return ccps;\n"
"      case CHEQUE: return cps;\n"
"      case PAYPAL: return ppps;\n"
"      default: return null;\n"
"   } \n"
"}"
msgstr ""
"<![CDATA[@Produces @Preferred @SessionScoped\n"
"public PaymentStrategy getPaymentStrategy(@New CreditCardPaymentStrategy ccps,\n"
"                                          @New ChequePaymentStrategy cps,\n"
"                                          @New PayPalPaymentStrategy ppps) {\n"
"    switch (paymentStrategy) {\n"
"        case CREDIT_CARD: return ccps;\n"
"        case CHEQUE: return cps;\n"
"        case PAYPAL: return ppps;\n"
"        default: return null;\n"
"    } \n"
"}]]>"

#. Tag: para
#, no-c-format
msgid ""
"Then a new <emphasis>dependent</emphasis> instance of "
"<literal>CreditCardPaymentStrategy</literal> will be created, passed to the "
"producer method, returned by the producer method and finally bound to the "
"session context. The dependent object won't be destroyed until the "
"<literal>Preferences</literal> object is destroyed, at the end of the "
"session."
msgstr ""

#. Tag: title
#, fuzzy, no-c-format
msgid "Disposer methods"
msgstr "생산자 방식 "

#. Tag: para
#, no-c-format
msgid ""
"Some producer methods return objects that require explicit destruction. For "
"example, somebody needs to close this JDBC connection:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"@Produces @RequestScoped Connection connect(User user) {\n"
"   return createConnection(user.getId(), user.getPassword());\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Destruction can be performed by a matching <emphasis>disposer "
"method</emphasis>, defined by the same class as the producer method:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"void close(@Disposes Connection connection) {\n"
"   connection.close();\n"
"}"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The disposer method must have at least one parameter, annotated "
"<literal>@Disposes</literal>, with the same type and qualifiers as the "
"producer method. The disposer method is called automatically when the "
"context ends (in this case, at the end of the request), and this parameter "
"receives the object produced by the producer method. If the disposer method "
"has additional method parameters, the container will look for a bean that "
"satisfies the type and qualifiers of each parameter and pass it to the "
"method automatically."
msgstr ""
