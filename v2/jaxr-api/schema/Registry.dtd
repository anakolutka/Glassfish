<?xml version="1.0" encoding="UTF-8"?>

<!--
 The contents of this file are subject to the terms 
 of the Common Development and Distribution License 
 (the License).  You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the license at 
 https://glassfish.dev.java.net/public/CDDLv1.0.html or
 glassfish/bootstrap/legal/CDDLv1.0.txt.
 See the License for the specific language governing 
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL 
 Header Notice in each file and include the License file 
 at glassfish/bootstrap/legal/CDDLv1.0.txt.  
 If applicable, add the following below the CDDL Header, 
 with the fields enclosed by brackets [] replaced by
 you own identifying information: 
 "Portions Copyrighted [year] [name of copyright owner]"
 
 Copyright 2007 Sun Microsystems, Inc. All rights reserved.
-->

<!-- Begin information model mapping. -->

<!--
ObjectAttributes are attributes from the RegistryObject interface in ebRIM.

id may be empty. If specified it may be in urn:uuid format or be in some
arbitrary format. If id is empty registry must generate globally unique id.

If id is provided and in proper UUID syntax (starts with urn:uuid:) 
registry will honour it.

If id is provided and is not in proper UUID syntax then it is used for
linkage within document and is ignored by the registry. In this case the
registry generates a UUID for id attribute.

id must not be null when object is being retrieved from the registry.
-->
<!ENTITY % ObjectAttributes " 
   id          ID     #IMPLIED
   name        CDATA  #IMPLIED
   description CDATA  #IMPLIED   
">

<!-- 
Use as a proxy for an Object that is in the registry already.
Specifies the id attribute of the object in the registry as its id attribute.
id attribute in ObjectAttributes is exactly the same syntax and semantics as
id attribute in RegistryObject.
-->
<!ELEMENT ObjectRef EMPTY>
<!ATTLIST ObjectRef
    id ID #IMPLIED 
>

<!ELEMENT ObjectRefList (ObjectRef)*>

<!--
RegistryEntryAttributes are attributes from the RegistryEntry interface 
in ebRIM.
It inherits ObjectAttributes
-->
<!ENTITY % RegistryEntryAttributes " %ObjectAttributes;
   majorVersion     CDATA  '1'
   minorVersion     CDATA  '0'
   status           CDATA  #IMPLIED
   userVersion      CDATA  #IMPLIED
   stability        CDATA  'Dynamic'
   expirationDate   CDATA  #IMPLIED
   objectType CDATA #REQUIRED">

<!ELEMENT RegistryEntry (SlotList?)>
<!ATTLIST RegistryEntry
        %RegistryEntryAttributes; >
<!ELEMENT Value (#PCDATA)>
<!ELEMENT ValueList (Value*)>
<!ELEMENT Slot (ValueList?)>
<!ATTLIST Slot
        name CDATA #REQUIRED
        slotType CDATA #IMPLIED
>
<!ELEMENT SlotList (Slot*)>

<!--
ExtrinsicObject are attributes from the ExtrinsicObject interface in ebRIM.
It inherits RegistryEntryAttributes
-->


<!ELEMENT ExtrinsicObject EMPTY >
<!ATTLIST ExtrinsicObject
        %RegistryEntryAttributes; 
        contentURI CDATA #REQUIRED
        mimeType CDATA #IMPLIED
        opaque (true | false) "false"
>


<!ENTITY % IntrinsicObjectAttributes " %RegistryEntryAttributes;">

<!-- Leaf classes that reflect the concrete classes in ebRIM -->
<!ELEMENT RegistryEntryList 
(Association | Classification | ClassificationNode | Package | 
 ExternalLink | ExternalIdentifier | Organization | 
 ExtrinsicObject | ObjectRef)*>

<!--
An ExternalLink specifies a link from a RegistryEntry and an external URI
-->
<!ELEMENT ExternalLink EMPTY>
<!ATTLIST ExternalLink
        %IntrinsicObjectAttributes; 
        externalURI CDATA #IMPLIED
>

<!--
An ExternalIdentifier provides an identifier for a RegistryEntry

The value is the value of the identifier (e.g. the social security number)
-->
<!ELEMENT ExternalIdentifier EMPTY>
<!ATTLIST ExternalIdentifier
        %IntrinsicObjectAttributes; 
        value CDATA #REQUIRED
>

<!--
An Association specifies references to two previously submitted
registry entrys.

The sourceObject is id of the sourceObject in association
The targetObject is id of the targetObject in association
-->
<!ELEMENT Association EMPTY>
<!ATTLIST Association
        %IntrinsicObjectAttributes; 
        sourceRole CDATA #IMPLIED
        targetRole CDATA #IMPLIED
        associationType CDATA #REQUIRED
        bidirection (true | false) "false"
        sourceObject IDREF #REQUIRED
        targetObject IDREF #REQUIRED
>

<!--
A Classification specifies references to two registry entrys.

The classifiedObject is id of the Object being classified.
The classificationNode is id of the ClassificationNode classying the object
-->
<!ELEMENT Classification EMPTY>
<!ATTLIST Classification
        %IntrinsicObjectAttributes; 
        classifiedObject IDREF #REQUIRED
        classificationNode IDREF #REQUIRED
>

<!--
A Package is a named collection of objects.
-->
<!ELEMENT Package EMPTY>
<!ATTLIST Package
        %IntrinsicObjectAttributes; 
>

<!-- Attributes inherited by various types of telephone number elements -->
<!ENTITY % TelephoneNumberAttributes " areaCode   CDATA  #REQUIRED
   contryCode CDATA  #REQUIRED
   extension  CDATA  #IMPLIED
   number     CDATA  #REQUIRED
   url        CDATA  #IMPLIED">
<!ELEMENT TelephoneNumber EMPTY>
<!ATTLIST TelephoneNumber
        %TelephoneNumberAttributes; 
>
<!ELEMENT FaxNumber EMPTY>
<!ATTLIST FaxNumber
        %TelephoneNumberAttributes; 
>

<!ELEMENT PagerNumber EMPTY>
<!ATTLIST PagerNumber
        %TelephoneNumberAttributes; 
>

<!ELEMENT MobileTelephoneNumber EMPTY>
<!ATTLIST MobileTelephoneNumber
        %TelephoneNumberAttributes; 
>
<!-- PostalAddress -->
<!ELEMENT PostalAddress EMPTY>
<!ATTLIST PostalAddress
        city CDATA #REQUIRED
        country CDATA #REQUIRED
        postalCode CDATA #REQUIRED
        state CDATA #IMPLIED
        street CDATA #REQUIRED
>
<!-- PersonName -->
<!ELEMENT PersonName EMPTY>
<!ATTLIST PersonName
        firstName CDATA #REQUIRED
        middleName CDATA #IMPLIED
        lastName CDATA #REQUIRED
>

<!-- Organization -->
<!ELEMENT Organization (PostalAddress, FaxNumber?, TelephoneNumber)>
<!ATTLIST Organization
        %IntrinsicObjectAttributes; 
        parent IDREF #IMPLIED
        primaryContact IDREF #REQUIRED
>

<!ELEMENT User (PersonName, PostalAddress, TelephoneNumber, MobileTelephoneNumber?, FaxNumber?, PagerNumber?)>
<!ATTLIST User
        %ObjectAttributes; 
        organization IDREF #IMPLIED
        email CDATA #IMPLIED
        url CDATA #IMPLIED
>

<!ELEMENT AuditableEvent EMPTY>
<!ATTLIST AuditableEvent
        %ObjectAttributes; 
        eventType CDATA #REQUIRED
        registryEntry IDREF #REQUIRED
        timestamp CDATA #REQUIRED
        user IDREF #REQUIRED
>

<!--
ClassificationNode is used to submit a Classification tree to the Registry.

parent is the id to the parent node. code is an optional code value for a ClassificationNode
often defined by an external taxonomy (e.g. NAICS)
-->
<!ELEMENT ClassificationNode EMPTY>
<!ATTLIST ClassificationNode
        %IntrinsicObjectAttributes; 
        parent IDREF #IMPLIED
        code CDATA #IMPLIED
>

<!--
End information model mapping.

Begin Registry Services Interface
-->

<!ELEMENT RequestAcceptedResponse EMPTY>
<!ATTLIST RequestAcceptedResponse
        xml:lang NMTOKEN #REQUIRED
>
<!--

The SubmitObjectsRequest allows one to submit a list of RegistryEntry elements. Each RegistryEntry element provides metadata for a single submitted object.  Note that the repository item being submitted is in a separate document that is not in this DTD. The ebXML Messaging Services Specfication defines packaging, for submission, of the metadata of a repository item with the repository item itself. The value of the contentURI attribute of the ExtrinsicObject element must be the same as the xlink:href attribute within the Reference element within the Manifest element of the MessageHeader.
-->
<!ELEMENT SubmitObjectsRequest (RegistryEntryList)>
<!ELEMENT AddSlotsRequest (ObjectRef, SlotList)+>
<!-- Only need name in Slot within SlotList -->
<!ELEMENT RemoveSlotsRequest (ObjectRef, SlotList)+>
<!--
The ObjectRefList is the list of
refs to the registry entrys being approved.
-->
<!ELEMENT ApproveObjectsRequest (ObjectRefList)>
<!--
The ObjectRefList is the list of
refs to the registry entrys being deprecated.
-->
<!ELEMENT DeprecateObjectsRequest (ObjectRefList)>
<!--
The ObjectRefList is the list of
refs to the registry entrys being removed
-->
<!ELEMENT RemoveObjectsRequest (ObjectRefList)>
<!ATTLIST RemoveObjectsRequest
        deletionScope (DeleteAll | DeleteRepositoryItemOnly) "DeleteAll"
>
<!ELEMENT GetRootClassificationNodesRequest EMPTY>
<!--
The namePattern follows SQL-92 syntax for the pattern specified in
LIKE clause. It allows for selecting only those root nodes that match
the namePattern. The default value of '*' matches all root nodes.
-->
<!ATTLIST GetRootClassificationNodesRequest
        namePattern CDATA "*"
>
<!--
The response includes one or more ClassificationNodes
-->
<!ELEMENT GetRootClassificationNodesResponse ( ClassificationNode+ )>
<!--
Get the classification tree under the ClassificationNode specified parentRef. 

If depth is 1 just fetch immediate child 
nodes, otherwise fetch the descendant tree upto the specified depth level.
If depth is 0 that implies fetch entire sub-tree
-->
<!ELEMENT GetClassificationTreeRequest EMPTY>
<!ATTLIST GetClassificationTreeRequest
        parent CDATA #REQUIRED
        depth CDATA "1"
>
<!--
The response includes one or more ClassificationNodes which includes only
immediate ClassificationNode children nodes if depth attribute in 
GetClassificationTreeRequest was 1, otherwise the decendent nodes 
upto specified depth level are returned.
-->
<!ELEMENT GetClassificationTreeResponse ( ClassificationNode+ )>
<!--
Get refs to all registry entrys that are classified by all the 
ClassificationNodes specified by ObjectRefList. 
Note this is an implicit logical AND operation 
-->
<!ELEMENT GetClassifiedObjectsRequest (ObjectRefList)>


<!--
objectType attribute can specify the type of objects that the registry
client is interested in, that is classified by this ClassificationNode.
It is a String that matches a choice in the type attribute of ExtrinsicObject.
The default value of "" "*" that client is interested in all types
of registry entrys that are classified by the specified ClassificationNode. 
-->
<!ATTLIST GetClassifiedObjectsRequest objectType CDATA  "*">

<!--
The response includes a sequence of zero or more
RegistryEntrys that are classified by the ClassificationNodes 
specified in the ObjectRefList in GetClassifiedObjectsRequest.
-->
<!ELEMENT GetClassifiedObjectsResponse ( RegistryEntry* )>
<!--
An Ad hoc query request specifies a query string as defined by [RS] in the queryString attribute
-->
<!ELEMENT AdhocQueryRequest (FilterQuery | ReturnRegistryEntry | ReturnRepositoryItem | SQLQuery)>
<!ELEMENT SQLQuery (#PCDATA)>
<!--
The response includes a RegistryEntryList which has zero or more
RegistryEntrys that match the query specified in AdhocQueryRequest.
-->
<!ELEMENT AdhocQueryResponse 
 ( RegistryEntryList | 
   FilterQueryResult | 
   ReturnRegistryEntryResult | 
   ReturnRepositoryItemResult )>
<!--
Gets the actual content (not metadata) specified by the ObjectRefList
-->
<!ELEMENT GetContentRequest (ObjectRefList)>
<!--
The GetObjectsResponse will have no sub-elements if there were no errors.
The actual contents will be in the other payloads of the message.  
-->
<!ELEMENT GetContentResponse EMPTY >
<!--
Describes the capability profile for the registry and what optional features
are supported
-->
<!ELEMENT RegistryProfile (OptionalFeaturesSupported)>
<!ATTLIST RegistryProfile
        version CDATA #REQUIRED
>

<!ELEMENT OptionalFeaturesSupported EMPTY>
<!ATTLIST OptionalFeaturesSupported
        sqlQuery (true | false) "false"
        xQuery (true | false) "false"
>
<!-- Begin FilterQuery DTD -->
<!ELEMENT FilterQuery (RegistryEntryQuery | AuditableEventQuery | ClassificationNodeQuery | RegistryPackageQuery | OrganizationQuery)>
<!ELEMENT FilterQueryResult (RegistryEntryQueryResult | AuditableEventQueryResult | ClassificationNodeQueryResult | RegistryPackageQueryResult | OrganizationQueryResult)>
<!ELEMENT RegistryEntryQueryResult (RegistryEntryView*)>
<!ELEMENT RegistryEntryView EMPTY>
<!ATTLIST RegistryEntryView
        objectURN CDATA #REQUIRED
        contentURI CDATA #IMPLIED
        objectID CDATA #IMPLIED
>
<!ELEMENT AuditableEventQueryResult (AuditableEventView*)>
<!ELEMENT AuditableEventView EMPTY>
<!ATTLIST AuditableEventView
        objectID CDATA #REQUIRED
        timestamp CDATA #REQUIRED
>
<!ELEMENT ClassificationNodeQueryResult (ClassificationNodeView*)>
<!ELEMENT ClassificationNodeView EMPTY>
<!ATTLIST ClassificationNodeView
        objectURN CDATA #REQUIRED
        contentURI CDATA #IMPLIED
        objectID CDATA #IMPLIED
>
<!ELEMENT RegistryPackageQueryResult (RegistryPackageView*)>
<!ELEMENT RegistryPackageView EMPTY>
<!ATTLIST RegistryPackageView
        objectURN CDATA #REQUIRED
        contentURI CDATA #IMPLIED
        objectID CDATA #IMPLIED
>
<!ELEMENT OrganizationQueryResult (OrganizationView*)>
<!ELEMENT OrganizationView EMPTY>
<!ATTLIST OrganizationView
        orgURN CDATA #REQUIRED
        objectID CDATA #IMPLIED
>

<!ELEMENT RegistryEntryQuery  
	(	RegistryEntryFilter?,
		SourceAssociationBranch*,
		TargetAssociationBranch*,
     	HasClassificationBranch*,
		SubmittingOrganizationBranch?,
		ResponsibleOrganizationBranch?,
		ExternalIdentifierFilter*,
    	ExternalLinkFilter*,
		SlotFilter*,
		HasAuditableEventBranch*	)>

<!ELEMENT SourceAssociationBranch (AssociationFilter?, RegistryEntryFilter?)>
<!ELEMENT TargetAssociationBranch (AssociationFilter?, RegistryEntryFilter?)>
<!ELEMENT HasClassificationBranch (ClassificationFilter?, ClassificationNodeFilter?)>
<!ELEMENT SubmittingOrganizationBranch (OrganizationFilter?, ContactFilter?)>
<!ELEMENT ResponsibleOrganizationBranch (OrganizationFilter?, ContactFilter?)>
<!ELEMENT HasAuditableEventBranch (AuditableEventFilter?, UserFilter?, OrganizationFilter?)>
<!ELEMENT AuditableEventQuery 
  (AuditableEventFilter?, RegistryEntryQuery*, InvokedByBranch? )> 

<!ELEMENT InvokedByBranch
  ( UserFilter?, OrganizationQuery? )>

<!ELEMENT ClassificationNodeQuery (ClassificationNodeFilter?, PermitsClassificationBranch*, HasParentNode?, HasSubnode*)>
<!ELEMENT PermitsClassificationBranch (ClassificationFilter?, RegistryEntryQuery?)>
<!ELEMENT HasParentNode (ClassificationNodeFilter?, HasParentNode?)>
<!ELEMENT HasSubnode (ClassificationNodeFilter?, HasSubnode*)>
<!ELEMENT RegistryPackageQuery (PackageFilter?, HasMemberBranch*)>
<!ELEMENT HasMemberBranch (RegistryEntryQuery?)>
<!ELEMENT OrganizationQuery (OrganizationFilter?, SubmitsRegistryEntry*, HasParentOrganization?, InvokesEventBranch*, ContactFilter*)>
<!ELEMENT SubmitsRegistryEntry (RegistryEntryQuery?)>
<!ELEMENT HasParentOrganization (OrganizationFilter?, HasParentOrganization?)>
<!ELEMENT InvokesEventBranch (UserFilter?, AuditableEventFilter?, RegistryEntryQuery?)>
<!ELEMENT ReturnRegistryEntry (RegistryEntryQuery, WithClassifications?, WithSourceAssociations?, WithTargetAssociations?, WithAuditableEvents?, WithExternalLinks?)>
<!ELEMENT WithClassifications (ClassificationFilter?)>
<!ELEMENT WithSourceAssociations (AssociationFilter?)>
<!ELEMENT WithTargetAssociations (AssociationFilter?)>
<!ELEMENT WithAuditableEvents (AuditableEventFilter?)>
<!ELEMENT WithExternalLinks (ExternalLinkFilter?)>
<!ELEMENT ReturnRegistryEntryResult (RegistryEntryMetadata*)>
<!ELEMENT RegistryEntryMetadata (RegistryEntry, Classification*, SourceAssociations?, TargetAssociations?, AuditableEvent*, ExternalLink*)>
<!ELEMENT SourceAssociations (Association*)>
<!ELEMENT TargetAssociations (Association*)>
<!ELEMENT ReturnRepositoryItem (RegistryEntryQuery, RecursiveAssociationOption?, WithDescription?)>
<!ELEMENT RecursiveAssociationOption (AssociationType+)>
<!ATTLIST RecursiveAssociationOption
        depthLimit CDATA #IMPLIED
>
<!ELEMENT AssociationType EMPTY>
<!ATTLIST AssociationType
        role CDATA #REQUIRED
>
<!ELEMENT WithDescription EMPTY>
<!ELEMENT ReturnRepositoryItemResult (RepositoryItem*)>
<!ELEMENT RepositoryItem (RegistryPackage | ExtrinsicObject | WithdrawnObject | ExternalLink)>
<!ATTLIST RepositoryItem
        identifier CDATA #REQUIRED
        name CDATA #REQUIRED
        contentURI CDATA #REQUIRED
        objectType CDATA #REQUIRED
        status CDATA #REQUIRED
        stability CDATA #REQUIRED
        description CDATA #IMPLIED
>
<!ELEMENT RegistryPackage EMPTY>
<!ELEMENT WithdrawnObject EMPTY>
<!ELEMENT ExternalLinkItem EMPTY>
<!ELEMENT ObjectFilter (Clause)>
<!ELEMENT RegistryEntryFilter (Clause)>
<!ELEMENT IntrinsicObjectFilter (Clause)>
<!ELEMENT ExtrinsicObjectFilter (Clause)>
<!ELEMENT PackageFilter (Clause)>
<!ELEMENT OrganizationFilter (Clause)>
<!ELEMENT ContactFilter (Clause)>
<!ELEMENT ClassificationNodeFilter (Clause)>
<!ELEMENT AssociationFilter (Clause)>
<!ELEMENT ClassificationFilter (Clause)>
<!ELEMENT ExternalLinkFilter (Clause)>
<!ELEMENT SlotFilter (Clause)>
<!ELEMENT ExternalIdentifierFilter (Clause)>
<!ELEMENT AuditableEventFilter (Clause)>
<!ELEMENT UserFilter (Clause)>

<!--
The following lines define the XML syntax for Clause.
-->
<!ELEMENT Clause (SimpleClause | CompoundClause)>
<!ELEMENT SimpleClause (BooleanClause | RationalClause | StringClause)>
<!ATTLIST SimpleClause
        leftArgument CDATA #REQUIRED
>
<!ELEMENT CompoundClause (Clause, Clause+)>
<!ATTLIST CompoundClause
        connectivePredicate (And | Or) #REQUIRED
>
<!ELEMENT BooleanClause EMPTY>
<!ATTLIST BooleanClause
        booleanPredicate (true | false) #REQUIRED
>
<!ELEMENT RationalClause (IntClause | FloatClause)>
<!ATTLIST RationalClause
        logicalPredicate (LE | LT | GE | GT | EQ | NE) #REQUIRED
>
<!ELEMENT IntClause (#PCDATA)>
<!ATTLIST IntClause
        e-dtype NMTOKEN #FIXED "int"
>
<!ELEMENT FloatClause (#PCDATA)>
<!ATTLIST FloatClause
        e-dtype NMTOKEN #FIXED "float"
>
<!ELEMENT StringClause (#PCDATA)>
<!ATTLIST StringClause
        stringPredicate 
		(contains | -contains | 
			startswith | -startswith | 
			equal | -equal | 
			endswith | -endswith) #REQUIRED
>
<!-- End FilterQuery DTD -->

<!-- Begin RegistryError definition -->
<!-- The RegistryErrorList is derived from the ErrorList element from the ebXML Message Service Specification -->
<!ELEMENT RegistryErrorList ( RegistryError+ )>
<!ATTLIST RegistryErrorList
	highestSeverity  ( Warning | Error ) 'Warning' >
	
<!ELEMENT RegistryError  (#PCDATA) >
<!ATTLIST RegistryError
	codeContext   CDATA   #REQUIRED
	errorCode     CDATA   #REQUIRED
	severity  ( Warning | Error ) 'Warning'
	location      CDATA   #IMPLIED
	xml:lang     NMTOKEN  #IMPLIED>

<!ELEMENT RegistryResponse
 (( AdhocQueryResponse  |
    GetContentResponse  |
    GetClassificationTreeResponse  |
    GetClassifiedObjectsResponse  |
    GetRootClassificationNodesResponse  )?,
   RegistryErrorList?  )>
<!ATTLIST RegistryResponse
   status  (success | failure )  #REQUIRED >

<!-- The contrived root node -->

<!ELEMENT RootElement 
  ( SubmitObjectsRequest | 
    ApproveObjectsRequest | 
    DeprecateObjectsRequest | 
    RemoveObjectsRequest | 
    GetRootClassificationNodesRequest | 
    GetClassificationTreeRequest | 
    GetClassifiedObjectsRequest | 
    AdhocQueryRequest |
    GetContentRequest | 
    AddSlotsRequest | 
    RemoveSlotsRequest | 
	 RegistryResponse |
    RegistryProfile) >

<!ELEMENT Href  (#PCDATA )>

<!ELEMENT XMLDocumentErrorLocn  (DocumentId , Xpath )>

<!ELEMENT DocumentId  (#PCDATA )>

<!ELEMENT Xpath (#PCDATA)>
