                    ------
                    GlassFish v3 embedding API
                    ------
                    Kohsuke Kawaguchi
                    ------
                    ---




    This module provides the core part of the embedded GlassFish, namely the API.
    The API allows you to programatically configure GlassFish and perform
    basic operations like deploy and undeploy.

    The following code example should give you a feeling of how this API looks like:
    
--------------------------------------------
GlassFish glassfish = new GlassFish();
glassfish.minimallyConfigure(8080);

GFApplication app = glassfish.deploy(new File("path/to/simple.war"));

System.out.println("Ready!");

...

app.undeploy();
glassfish.stop();
--------------------------------------------

    In addition to the operations available for stand-alone GFv3 like above,
    embedded GlassFish can be customized/used in ways that only in-VM program can.
    For example, you can deploy a web application without ever creating a WAR file
    or directory in the first place, or add/replace any of the internal components
    that make up GFv3.

What jars do I need?

    To use the embedded GFv3, you need two pieces. One is the API jar
    and the other is the GFv3 jar(s). The former is a jar whose name looks like
    <<<gf-embedded-api-1.0-alpha-2-jar-with-dependencies.jar>>>.
    The latter depends on what you need
    for your application. For example, those who need EJB functionality would need
    several more jars than those who just need the servlet container functionality.

    Maven is the easiest way to do this. You can declare dependencies to GFv3 feature POMs
    that you need (which talks in terms of feature granularity), or you can even
    selectively include/exclude specific modules.)

    Ant users, OTOH, would probably find it easier to use
    {{{http://maven.dyndns.org/glassfish/org/glassfish/distributions/web-all/}"all-in-one" jars}};
    these are single jar distributions of the common GFv3 profiles, so that
    you don't have to worry about several dozen jar files.
    
    Once you pick up these two pieces, simply place them in your classpath and you
    are all set.

    